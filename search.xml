<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用Hexo创建博客</title>
    <url>/2019/06/13/setup_blog/</url>
    <content><![CDATA[<p>在操作之前，</p>
<ol>
<li>安装好了相关的软件如： <code>node</code></li>
<li>拥有自己的github账号正确设置好<code>SSH KEY</code></li>
<li>创建一个 <code>username.github.io</code> 的repo 并开启相应的page设置</li>
</ol>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:your_name/your_name.github.io.git</span><br><span class="line">git checkout -b hexo</span><br></pre></td></tr></table></figure>

<h3 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>由于Hexo要求必须在空文件夹中执行init操作，所以我们需要在博客文件夹以外的地方新建一个空文件夹，之后点击鼠标右键选择<code>Git bash Here</code>输入以下命令，并将命令执行完成后文件夹中的所有文件复制到<code>your_name.github.io</code>文件夹中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>本地预览(可省略)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<h3 id="远程部署"><a href="#远程部署" class="headerlink" title="远程部署"></a>远程部署</h3><p>我们已经在本地成功建站，接下来我们要做的就是通过简单的修改配置文件使得Hexo为我们生成的静态页面能够部署到Github Pages上面。</p>
<ol>
<li>编辑username.github.io文件夹下面的_config.yml（Hexo官方文档中将其称为全局配置文件），找到deploy关键字，将其修改为<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:your_name/your_name.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li>
<li>为了将完成到Github的远程部署，我们还需要安装一个插件。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li>执行以下命令，完成静态页面的远程部署与博客源文件的备份<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;提交说明&quot;</span></span><br><span class="line">git push origin hexo</span><br><span class="line">hexo generate -d</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h3><p>请自行搜索github, 输入关键字 <code>hexo theme</code>选择自己喜爱的主题，并按照相关文档进行设置</p>
<h3 id="对于其他设备上写博客"><a href="#对于其他设备上写博客" class="headerlink" title="对于其他设备上写博客"></a>对于其他设备上写博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> your_repo</span><br><span class="line"><span class="built_in">cd</span> your_repo</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h2 id="自动脚本编写"><a href="#自动脚本编写" class="headerlink" title="自动脚本编写"></a>自动脚本编写</h2><p>在源文件分支(<code>hexo</code>分支)上添加如下文件, 如果是windows 命名为<code>publish.cmd</code> 如果是linux 或者mac命名为<code>publish</code> 并加入可执行权限<code>chmod a+x publish</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;add article&quot;</span></span><br><span class="line">git push origin hexo</span><br><span class="line">hexo generate -d</span><br></pre></td></tr></table></figure>
<p>编写完毕，运行脚本 windows,  <code>publish</code> 其他 <code>./publish</code></p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>版本管理工具Git的使用</title>
    <url>/2019/06/13/apps/git/</url>
    <content><![CDATA[<h2 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h2><p>Git 是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理，是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件， Git也是计算机界最重要的软件之一， 被广泛的适用于各大中小公司的各类项目中。</p>
<p>小插曲: 为啥我们不提其他的版本控制系统， 因为对于一般的情况下， 有<code>Git</code>就足够了，它至少能满足99 %的人的需求。</p>
<h2 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h2><h3 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h3><ol>
<li>生成 RSA 秘钥对， 私钥自己保存， 公钥需要给<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;winjeg@qq.com&quot;</span></span><br></pre></td></tr></table></figure>
生成过程中使用的密码会更安全一些， 但设置就会更麻烦一些， 关于相关的设置， 希望大家“不厌其烦”， 去搜索引擎自己搜索就好。<br>生成结果一般有两个文件：</li>
<li><code>id_rsa</code> 这是一个绝密的文件， 只有使用者自己知道， 其他人不能知道</li>
<li><code>id_rsa.pub</code> 这个是一个公开的文件， 是发给外界用来安全通信的一个工具<br>对于Github或者Gitlab而言，均有地方添加 <code>public key</code>， 一般在 用户<code>settings</code> 菜单下</li>
</ol>
<p>生成完毕之后， 把私钥放到相应的位置：</p>
<ol>
<li>linux&#x2F;mac  ~&#x2F;.ssh  并设置<code>id_rsa</code>的权限 <code>chmod 600 ~/.ssh/id_rsa</code></li>
<li>windows 用户直接把 <code>id_rsa</code> 放到 用户目录下的 .ssh 文件夹中即可</li>
</ol>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><ol>
<li>windows 下安装<br>由于安装Git 比较简单，只需要去官方网站， 去下载并且按照默认步骤安装即可。<br>因此，此处不做更多详细的介绍。</li>
</ol>
<p>如果想用<code>gpg</code>签名则比较复杂， 但注意一点， 如果出现 <code>key not avalible</code> 类似的， 尝试设置下gpg的位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global gpg.program <span class="string">&quot;C:\Program Files (x86)\GnuPG\bin\gpg.exe&quot;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>Linux 下安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git <span class="comment"># debian based</span></span><br><span class="line">sudo yum install git <span class="comment"># redhat based</span></span><br><span class="line">sudo pacman -S git <span class="comment"># archlinux  based</span></span><br><span class="line">sudo emerge git    <span class="comment"># gentoo based</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>mac 下安装<br>我猜是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Git的基础使用"><a href="#Git的基础使用" class="headerlink" title="Git的基础使用"></a>Git的基础使用</h2><h3 id="新建Git-项目"><a href="#新建Git-项目" class="headerlink" title="新建Git 项目"></a>新建Git 项目</h3><h4 id="克隆代码"><a href="#克隆代码" class="headerlink" title="克隆代码"></a>克隆代码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/winjeg/demos-go</span><br></pre></td></tr></table></figure>

<h4 id="新建本地项目，并关联到远程"><a href="#新建本地项目，并关联到远程" class="headerlink" title="新建本地项目，并关联到远程"></a>新建本地项目，并关联到远程</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init repo_name   <span class="comment"># 创建 repo_name 的文件夹， 并创建好相关的 .git 隐藏文件夹等</span></span><br><span class="line"><span class="built_in">cd</span> repo_name  </span><br><span class="line">git remote add origin git@github.com:winjeg/repo.git <span class="comment"># 设置远端地址(这个关系到推送的地址)</span></span><br><span class="line">git add .  <span class="comment"># 把当前的项目文件都暂存</span></span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span> <span class="comment"># 把暂存的文件作为一次 commit  提交</span></span><br><span class="line">git push -u origin master <span class="comment"># 把commit push 到远程的master分支</span></span><br></pre></td></tr></table></figure>

<p>经过以上步骤， 一个本地可以用的repo就建立好啦</p>
<h3 id="拉取远端"><a href="#拉取远端" class="headerlink" title="拉取远端"></a>拉取远端</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取指定分支的变化</span></span><br><span class="line">git fetch origin master </span><br><span class="line"><span class="comment"># 拉取所有分支的变化</span></span><br><span class="line">git fetch </span><br><span class="line"><span class="comment"># 拉取所有分支的变化，并且将远端不存在的分支同步移除【推荐】</span></span><br><span class="line">git fetch -p </span><br></pre></td></tr></table></figure>

<h3 id="查看当前状态"><a href="#查看当前状态" class="headerlink" title="查看当前状态"></a>查看当前状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
<p>对于当前repo， 增加， 删除，修改等的状态都会被列出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HEAD detached from fd07db2</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        deleted:    rops.yaml</span><br><span class="line">        modified:   values.yaml</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">        a.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="暂存"><a href="#暂存" class="headerlink" title="暂存"></a>暂存</h3><p>暂存文件是commit这些变更的前提</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add file_name <span class="comment"># 暂存某文件</span></span><br><span class="line">git add . <span class="comment"># 暂存所有变更</span></span><br><span class="line">git reset <span class="comment"># 取消暂存</span></span><br><span class="line">git reset --hard <span class="comment"># 取消本地所有未提交的更改</span></span><br><span class="line">git checkout file <span class="comment"># 取消某文件的更改</span></span><br></pre></td></tr></table></figure>

<h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;the commit message&quot;</span></span><br></pre></td></tr></table></figure>
<p>提交时候，结果仍在本地，但已经属于创建了本地的一个变更集</p>
<h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>推送代码到远端</p>
<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b new_branch <span class="comment"># 新建</span></span><br><span class="line">git checkout new_branch <span class="comment"># 切换到新建的分支</span></span><br></pre></td></tr></table></figure>

<h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除本地分支，如果本地还有未合并的代码，则不能删除</span></span><br><span class="line">git branch -d qixiu/feature</span><br><span class="line"><span class="comment"># 强制删除本地分支</span></span><br><span class="line">git branch -D qixiu/feature </span><br></pre></td></tr></table></figure>

<h4 id="推送新建的分支到远端"><a href="#推送新建的分支到远端" class="headerlink" title="推送新建的分支到远端"></a>推送新建的分支到远端</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin new_branch</span><br></pre></td></tr></table></figure>
<h4 id="设置本地分支与远程同步"><a href="#设置本地分支与远程同步" class="headerlink" title="设置本地分支与远程同步"></a>设置本地分支与远程同步</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/&lt;branch&gt; hexo</span><br></pre></td></tr></table></figure>
<h4 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等同于git push origin -d qixiu/feaure</span></span><br><span class="line">git push origin :qixiu/feature</span><br></pre></td></tr></table></figure>

<h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><ol>
<li>切换到本地分支<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout branch_name</span><br></pre></td></tr></table></figure></li>
<li>切换到远程分支<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -b branch_name origin/branch_name <span class="comment"># 设置本地分支与远程分支同步</span></span><br><span class="line">git pull <span class="comment"># 拉取远程分支代码</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><ol>
<li><p>无冲突合并</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge branch_name</span><br></pre></td></tr></table></figure>
</li>
<li><p>有冲突合并</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge branch_name</span><br><span class="line">git mergetool</span><br></pre></td></tr></table></figure>
<p>mergetool 的设置， 下面以<code>Kdiff</code>为例， 当然merge工具也有非常多， 如 <code>meld</code>， <code>beyond compare</code> 等。<br>其设置方法都雷同，因此此处仅仅只举出一个例子作为说明。</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global  merge.tool kdiff3</span><br><span class="line">git config mergetool.kdiff3.path <span class="string">&quot;/usr/bin/kdiff3&quot;</span></span><br></pre></td></tr></table></figure>
<p>设置好mergetool之后，以后有merge冲突的时候， <code>kdiff3</code> 会自动跳出并让你人工merge。</p>
<h3 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~4 <span class="comment"># 合并提交记录</span></span><br><span class="line">git:(feature1) git rebase master <span class="comment"># rebase 到master分支</span></span><br><span class="line">git rebase --<span class="built_in">continue</span> <span class="comment"># 继续rebase</span></span><br><span class="line">git rebase —abort <span class="comment"># 放弃rebase回到原始状态</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在合并提交记录的时候会有如下信息打印出来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">s cacc52da add: qrcode</span><br><span class="line">s f072ef48 update: indexeddb hack</span><br><span class="line">s 4e84901a feat: add indexedDB floder</span><br><span class="line">s 8f33126c feat: add test2.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase 5f2452b2..8f33126c onto 5f2452b2 (4 commands)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment"># p, pick = use commit</span></span><br><span class="line"><span class="comment"># r, reword = use commit, but edit the commit message</span></span><br><span class="line"><span class="comment"># e, edit = use commit, but stop for amending</span></span><br><span class="line"><span class="comment"># s, squash = use commit, but meld into previous commit</span></span><br><span class="line"><span class="comment"># f, fixup = like &quot;squash&quot;, but discard this commit&#x27;s log message</span></span><br><span class="line"><span class="comment"># x, exec = run command (the rest of the line) using shell</span></span><br><span class="line"><span class="comment"># d, drop = remove commit</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>选择其中一种作为合并的方式， 上述是在vim（也可以是其他设置的编辑器）的一个窗口中展示的。<br>如果你异常退出了 <code>vim</code>  窗口，不要紧张：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rebase --edit-todo</span><br></pre></td></tr></table></figure>
<p>这时候会一直处在这个编辑的模式里，我们可以回去继续编辑，修改完保存一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rebase --continue</span><br></pre></td></tr></table></figure>

<p>与其他版本管理工具类似， 下图比较形象的展示了<code>git</code>中 <code>rebase</code>与<code>merge</code>的区别<br><img src="https://user-images.githubusercontent.com/7270177/60004279-e1467100-969e-11e9-9d2f-16b6d437ac74.png" alt="image"></p>
<h3 id="Git命令别名"><a href="#Git命令别名" class="headerlink" title="Git命令别名"></a>Git命令别名</h3><p>git是一个比较开放的系统， 与bash类似， git可以自定义别名来取代冗长的命令行输入如可以设置 <code>git st</code> 代替 <code>git status</code>， 使用 <code>git l</code>代替 <code>git log</code> 等等， 这些都被定义在git的配置文件中(<code>~/.gitconfig</code>)， 修改起来非常方便。 </p>
<h3 id="Git-的GPG签名设置-Windows"><a href="#Git-的GPG签名设置-Windows" class="headerlink" title="Git 的GPG签名设置(Windows)"></a>Git 的GPG签名设置(Windows)</h3><p>安装<code>gpg4win</code> 如果没有响相应的GPG的KEY， 利用这个工具生成相应的key与配置， 记得备份。<br>如果是已有备份， 可以直接用这个工具导入，非常简单。</p>
<p>然而仅仅这样设置还是不够的， 你需要在<code>Github/Gitlab</code>上添加相应的 <code>PGP PUBLIC KEY BLOCK</code><br>提交的时候使用如下命令， 则会自动签名。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -S -m <span class="string">&quot;change readme&quot;</span></span><br><span class="line">ggpg: directory <span class="string">&#x27;/c/Users/winjeg/.gnupg&#x27;</span> created</span><br><span class="line">igpg: keybox <span class="string">&#x27;/c/Users/winjeg/.gnupg/pubring.kbx&#x27;</span> created</span><br><span class="line">gpg: skipped <span class="string">&quot;winjeg &lt;winjeg@qq.com&gt;&quot;</span>: No secret key</span><br><span class="line">gpg: signing failed: No secret key</span><br><span class="line">error: gpg failed to sign the data</span><br><span class="line">fatal: failed to write commit object</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如上产生的错误则是由于Git默认的寻找签名证书的程序的路径有误。按照下面的方法进行设置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global gpg.program <span class="string">&quot;C:\Program Files (x86)\GnuPG\bin\gpg.exe&quot;</span></span><br></pre></td></tr></table></figure>

<p>设置完毕再次运行， 则可以看到成功签名<code>commit</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">winjeg@gpc MINGW64 /d/projects/go/github.com/winjeg/cloudb (master)</span><br><span class="line">$ git commit -S -m <span class="string">&quot;change readme&quot;</span></span><br><span class="line">[master eca6b52] change readme</span><br><span class="line"> 1 file changed, 3 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>

<h2 id="Git-高级用法"><a href="#Git-高级用法" class="headerlink" title="Git 高级用法"></a>Git 高级用法</h2><h3 id="Git对象"><a href="#Git对象" class="headerlink" title="Git对象"></a>Git对象</h3><p>接下来，新建一个空文件test.txt。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> test.txt</span><br></pre></td></tr></table></figure>
<p>然后，把这个文件加入 Git 仓库，也就是为test.txt的当前内容创建一个副本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git hash-object -w test.txt</span><br><span class="line">e69de29bb2d1d6434b8b29ae775ad8c2e48c5391</span><br></pre></td></tr></table></figure>
<p>上面代码中，<code>git hash-object</code>命令把<code>test.txt</code>的当前内容压缩成二进制文件，存入 Git。压缩后的二进制文件，称为一个 Git 对象，保存在.git&#x2F;objects目录。</p>
<p>这个命令还会计算当前内容的 SHA1 哈希值（长度40的字符串），作为该对象的文件名。</p>
<p>查看文件对象的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git cat-file -p 3b18e512dba79e4c8300dd08aeb37f8e728b8dad</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>
<h3 id="暂存区-git-add"><a href="#暂存区-git-add" class="headerlink" title="暂存区 (git add)"></a>暂存区 (<code>git add</code>)</h3><p>文件保存成二进制对象以后，还需要通知 Git 哪些文件发生了变动。所有变动的文件，Git 都记录在一个区域，叫做”暂存区”（英文叫做 index 或者 stage）。等到变动告一段落，再统一把暂存区里面的文件写入正式的版本历史。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git update-index --add --cacheinfo 100644 \</span><br><span class="line">3b18e512dba79e4c8300dd08aeb37f8e728b8dad test.txt</span><br><span class="line">git ls-files --stage</span><br><span class="line">100644 3b18e512dba79e4c8300dd08aeb37f8e728b8dad 0   test.txt</span><br></pre></td></tr></table></figure>

<h3 id="Git-快照-（commit）"><a href="#Git-快照-（commit）" class="headerlink" title="Git 快照 （commit）"></a>Git 快照 （<code>commit</code>）</h3><p>暂存区保留本次变动的文件信息，等到修改了差不多了，就要把这些信息写入历史，这就相当于生成了当前项目的一个快照（snapshot）。</p>
<p>项目的历史就是由不同时点的快照构成。Git 可以将项目恢复到任意一个快照。快照在 Git 里面有一个专门名词，叫做 commit，生成快照又称为完成一次提交。</p>
<p>下文所有提到”快照”的地方，指的就是 commit。</p>
<h3 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h3><p>Git分支其实是指向某个快照节点的指针， 对于Git来说， 分支的创建成本是极其低廉的。另外，Git 有一个特殊指针HEAD， 总是指向当前分支的最近一次快照。另外，Git 还提供简写方式，HEAD^指向 HEAD的前一个快照（父节点），HEAD~6则是HEAD之前的第6个快照。</p>
<hr>
<p>本文将不对其他内容做过多介绍, 仅仅介绍到此为止</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>多媒体相关的一些知识</title>
    <url>/2013/09/13/apps/mutimedia/</url>
    <content><![CDATA[<h2 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h2><h3 id="videos"><a href="#videos" class="headerlink" title="videos"></a>videos</h3><p>FFmpeg</p>
<h3 id="audios"><a href="#audios" class="headerlink" title="audios"></a>audios</h3><h2 id="openshot"><a href="#openshot" class="headerlink" title="openshot"></a>openshot</h2><h2 id="ffmpeg"><a href="#ffmpeg" class="headerlink" title="ffmpeg"></a>ffmpeg</h2>]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>multi-media</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh 周边知识</title>
    <url>/2013/09/13/apps/ssh/</url>
    <content><![CDATA[<h2 id="SSH-密钥生成与转换"><a href="#SSH-密钥生成与转换" class="headerlink" title="SSH 密钥生成与转换"></a>SSH 密钥生成与转换</h2><ol>
<li>确保你有公钥私钥对，确保安装了ssh<br>如果没有可以用下面的命令生成 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen </span><br></pre></td></tr></table></figure>
由私钥生成公钥<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -y -f id_rsa &gt; id_rsa.pub </span><br></pre></td></tr></table></figure></li>
<li>open ssh与  windows ppk相互转换<br>关键工具 <code>puttygen.exe</code></li>
</ol>
<h2 id="ssh免密码登录"><a href="#ssh免密码登录" class="headerlink" title="ssh免密码登录"></a>ssh免密码登录</h2><ol>
<li><p>要把自己的公钥添加至目标机的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.ssh/authorized_keys</span><br></pre></td></tr></table></figure>
<p>文件中去，<code>authorized_keys</code> 的权限是 <code>600</code> </p>
</li>
<li><p><code>ssh-copy-id</code> + host<br>会自动加免密到目标机器如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-copy-id user@host</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="ssh-连接管理"><a href="#ssh-连接管理" class="headerlink" title="ssh 连接管理"></a>ssh 连接管理</h2><h3 id="ssh-自动补全工具"><a href="#ssh-自动补全工具" class="headerlink" title="ssh 自动补全工具"></a>ssh 自动补全工具</h3><p> 自动补全是：ssh 连接 linux 自动补全需要bash_completion<br> 还需要在 <code>~/.ssh/config</code> 文件中记录 三个字段如下<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host   alias-of-the-host</span><br><span class="line">User   username</span><br><span class="line">Ip     10.1.1.2</span><br></pre></td></tr></table></figure></p>
<h3 id="ssh远程管理工具"><a href="#ssh远程管理工具" class="headerlink" title="ssh远程管理工具"></a>ssh远程管理工具</h3><ul>
<li>在 <code>.ssh/config</code> 中配置的各种服务</li>
<li>一些terminal自带的一些ssh管理工具， 如deeepin的terminal</li>
<li>remmina 远程管理工具</li>
</ul>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>Tidb 笔记</title>
    <url>/2017/09/13/apps/tidb/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>TIDB是一种分布式高可用实现MySQL协议的可动态扩容的数据库<br>动态扩容是指计算能力与存储空间两个维度的动态扩容<br>tidb 由 tidb server， PDserver 与 TIKV组成<br>基本结构如下图<br><img src="/imgs/tidb-architecture.png" alt="TIDB架构"></p>
<h2 id="TIDB"><a href="#TIDB" class="headerlink" title="TIDB"></a>TIDB</h2><p>TIDB 是一个无状态可以动态扩展的服务， 本身并不存储任何数据</p>
<h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ol>
<li>接收SQL请求</li>
<li>处理SQL相关的逻辑</li>
<li>与PD Server 通信定位数据实际存储位置</li>
<li>与TIKV实际交换数据</li>
<li>返回数据</li>
</ol>
<h2 id="PD-server"><a href="#PD-server" class="headerlink" title="PD server"></a>PD server</h2><p>PD Server 负责整个集群信息的管理与通信， 通常要部署奇数台</p>
<h3 id="主要功能-1"><a href="#主要功能-1" class="headerlink" title="主要功能"></a>主要功能</h3><ol>
<li>存储集群数据元信息</li>
<li>管理与负载均衡TIKV， 并负责数据迁移</li>
<li>分配全局唯一单调递增ID</li>
</ol>
<h2 id="TIKV"><a href="#TIKV" class="headerlink" title="TIKV"></a>TIKV</h2><p>TIKV 是一种分布式事务型Key-Value型存储， 它是负责整个TIDB集群所有的实际数据存储的。<br>它使用Raft协议来保证集群数据的一致性与故障恢复，区域是它最基本的存储单元，所有不同节点<br>上的区域副本构成了一个Raft的分组</p>
]]></content>
      <categories>
        <category>storage</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>tidb</tag>
        <tag>notes</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>vsftpd的简介和使用</title>
    <url>/2013/11/13/apps/vsftpd/</url>
    <content><![CDATA[<h2 id="VSFTPD-一个强大的FTP服务软件"><a href="#VSFTPD-一个强大的FTP服务软件" class="headerlink" title="VSFTPD - 一个强大的FTP服务软件"></a>VSFTPD - 一个强大的FTP服务软件</h2><hr>
<p>vsftpd是一个非常好用的ftp软件，它非常的安全高效， 可配置性特别高，在非Windows系统很受个人和企业的欢迎。<br>当然本文主要关注的还是教大家如何使用它， 我们下面将从以下几个方面详细讲述vsftpd的安装与使用。  </p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装其实是非常简单的事情， 我见过的大部分主流发行版中， 都可以一句命令安装。  </p>
<h3 id="Ubuntu-系列"><a href="#Ubuntu-系列" class="headerlink" title="Ubuntu 系列"></a><code>Ubuntu</code> 系列</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vsftp</span><br></pre></td></tr></table></figure>

<h3 id="Fedora-Redhat-系列"><a href="#Fedora-Redhat-系列" class="headerlink" title="Fedora/Redhat 系列"></a><code>Fedora/Redhat</code> 系列</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install vsftp</span><br></pre></td></tr></table></figure>

<h3 id="Archlinux-系列"><a href="#Archlinux-系列" class="headerlink" title="Archlinux 系列"></a><code>Archlinux</code> 系列</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S vsftp</span><br></pre></td></tr></table></figure>

<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启 vsftpd 服务开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> vsftpd.service</span><br><span class="line"><span class="comment"># 开启 (修改配置完毕， 请使用  `restart` 来确保配置生效)</span></span><br><span class="line">systemctl start vsftpd.service</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>vsftp 配置对于喜欢GUI的人来讲可能不是那么友好， 但其实配置内容是非常易读的。 而且几乎所有配置项均有详细的注释。</p>
<h3 id="配置文件位置：-etc-vsftpd-conf"><a href="#配置文件位置：-etc-vsftpd-conf" class="headerlink" title="配置文件位置：/etc/vsftpd.conf"></a>配置文件位置：<code>/etc/vsftpd.conf</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>

<h3 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 是否监听IPV6端口，开启后可以用IPV6的方式访问ftp站点</span></span><br><span class="line"><span class="attr">listen_ipv6</span>=<span class="string">YES</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否开启FTP目录消息</span></span><br><span class="line"><span class="attr">dirmessage_enable</span>=<span class="string">YES</span></span><br><span class="line"><span class="comment"># 欢迎消息</span></span><br><span class="line"><span class="attr">ftpd_banner</span>=<span class="string">Welcome to blah FTP service.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否使用本地时间， 如不使用，默认为GMT</span></span><br><span class="line"><span class="attr">use_localtime</span>=<span class="string">YES</span></span><br><span class="line"><span class="comment"># 推荐使用一个独立的用户来运行ftp服务</span></span><br><span class="line"><span class="attr">nopriv_user</span>=<span class="string">ftpsecure</span></span><br><span class="line"><span class="comment"># 是否允许递归列出</span></span><br><span class="line"><span class="attr">ls_recurse_enable</span>=<span class="string">YES</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否允许本地用户切换到本地目录</span></span><br><span class="line"><span class="attr">chroot_local_user</span>=<span class="string">YES</span></span><br><span class="line"><span class="attr">chroot_local_user</span>=<span class="string">YES</span></span><br><span class="line"><span class="attr">chroot_list_enable</span>=<span class="string">YES</span></span><br><span class="line"><span class="comment"># (default follows)</span></span><br><span class="line"><span class="attr">chroot_list_file</span>=<span class="string">/etc/vsftpd.chroot_list</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># SSL相关的配置</span></span><br><span class="line"><span class="attr">rsa_cert_file</span>=<span class="string">/etc/ssl/certs/ssl-cert-snakeoil.pem</span></span><br><span class="line"><span class="attr">rsa_private_key_file</span>=<span class="string">/etc/ssl/private/ssl-cert-snakeoil.key</span></span><br><span class="line"><span class="attr">ssl_enable</span>=<span class="string">NO</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 禁止一些邮件地址</span></span><br><span class="line"><span class="attr">deny_email_enable</span>=<span class="string">YES</span></span><br><span class="line"><span class="comment"># (default follows)</span></span><br><span class="line"><span class="attr">banned_email_file</span>=<span class="string">/etc/vsftpd.banned_emails</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ascii 方式上传下载</span></span><br><span class="line"><span class="attr">ascii_upload_enable</span>=<span class="string">YES</span></span><br><span class="line"><span class="attr">ascii_download_enable</span>=<span class="string">YES</span></span><br><span class="line"></span><br><span class="line"><span class="attr">local_enable</span>=<span class="string">YES</span></span><br><span class="line"><span class="comment"># 是否允许任意形式的写命令</span></span><br><span class="line"><span class="attr">write_enable</span>=<span class="string">YES</span></span><br><span class="line"><span class="comment"># 设置本地权限 （022 是Linux基础常识，不知道什么意思可以自行搜索）</span></span><br><span class="line"><span class="attr">local_umask</span>=<span class="string">022</span></span><br><span class="line"><span class="comment"># 是否允许匿名用户上传， 只在全局写开启的情况下才有效，另外Linux中也要设置好相应路径的权限</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 匿名访问相关</span></span><br><span class="line"><span class="attr">anonymous_enable</span>=<span class="string">NO</span></span><br><span class="line"><span class="comment"># 是否允许本地用户登录</span></span><br><span class="line"><span class="attr">anon_upload_enable</span>=<span class="string">YES</span></span><br><span class="line"><span class="comment"># 是否允许匿名用户创建目录</span></span><br><span class="line"><span class="attr">anon_mkdir_write_enable</span>=<span class="string">YES</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 超时时间</span></span><br><span class="line"><span class="comment"># 会话</span></span><br><span class="line"><span class="attr">idle_session_timeout</span>=<span class="string">600</span></span><br><span class="line"><span class="comment"># 数据连接</span></span><br><span class="line"><span class="attr">data_connection_timeout</span>=<span class="string">120</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 开启上传下载日志 (下一行为日志位置)</span></span><br><span class="line"><span class="attr">xferlog_enable</span>=<span class="string">YES</span></span><br><span class="line"><span class="attr">xferlog_file</span>=<span class="string">/var/log/vsftpd.log</span></span><br><span class="line"><span class="attr">xferlog_std_format</span>=<span class="string">YES</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 使用20端口连接</span></span><br><span class="line"><span class="attr">connect_from_port_20</span>=<span class="string">YES</span></span><br><span class="line"><span class="comment"># 是否把上传的文件更改所有者 （下一行为所有者）</span></span><br><span class="line"><span class="attr">chown_uploads</span>=<span class="string">YES</span></span><br><span class="line"><span class="attr">chown_username</span>=<span class="string">whoever</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><p>vsftpd的用户权限其实是跟Linux的权限是紧密相关的， <code>chmod</code> 等基础linux指令会直接影响ftp的读写权限等, 所以他会有很多有趣的应用场景：</p>
<ol>
<li>老师收作业， 权限设置成只能写不能读，学生可以上传， 但下载不到其他学生的结果</li>
<li>下载站点， 只能读不能写， 防止内容被别人篡改</li>
<li>个人文件管理器， 可以多端访问， 读写权限都开放即可</li>
</ol>
<p>希望大家读完此文能对Linux下的 <code>vsftpd</code> 有一个基本的认知， 知道它怎么配置， 怎么使用。</p>
]]></content>
      <categories>
        <category>application</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ftp</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 简易笔记</title>
    <url>/2018/04/13/container/docker/</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>三个基本概念： Image, Contrainer, Repository</p>
<h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><p>只读模板，预装一些东西</p>
<h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p>启动、开始、停止、删除 – 隔离<br>启动时，在镜像上层创建一层可写层</p>
<h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h3><p>用来存放images</p>
<h2 id="Docker-命令"><a href="#Docker-命令" class="headerlink" title="Docker 命令"></a>Docker 命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo </span><br><span class="line"></span><br><span class="line"># 启动docker服务</span><br><span class="line">systemctl start docker.service</span><br><span class="line"></span><br><span class="line"># 列出本地镜像</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"># 搜索镜像</span><br><span class="line">docker search +name</span><br><span class="line"></span><br><span class="line">docker run -t -i centos /bin/bash</span><br><span class="line"></span><br><span class="line">docker rm </span><br><span class="line">docker rmi</span><br><span class="line">docker ps</span><br><span class="line">docker save filename</span><br><span class="line">docker load --input filename</span><br><span class="line">docker logs 查看容器的输出信息</span><br><span class="line">docker ps   查看容器的状态信息</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="Docker-file"><a href="#Docker-file" class="headerlink" title="Docker file"></a>Docker file</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 以centos latest 作为基础</span><br><span class="line">FROM  centos:latest</span><br><span class="line"></span><br><span class="line"># 维护者</span><br><span class="line">MAINTAINER wenwen</span><br><span class="line"></span><br><span class="line"># 执行命令</span><br><span class="line">RUN yum install vi</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">ADD /home/wenwen/1.txt</span><br><span class="line"></span><br><span class="line">EXPOSE port</span><br><span class="line"></span><br><span class="line">CMD nano</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">docker build -t &quot;&quot; &#123;dir&#125;</span><br></pre></td></tr></table></figure>

<h2 id="docker-registry"><a href="#docker-registry" class="headerlink" title="docker-registry"></a>docker-registry</h2>]]></content>
      <categories>
        <category>container</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>container</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s 常用命令笔记</title>
    <url>/2018/04/13/container/k8s_commands/</url>
    <content><![CDATA[<h3 id="k8s-常用命令"><a href="#k8s-常用命令" class="headerlink" title="k8s 常用命令"></a>k8s 常用命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl version</span><br><span class="line">kubectl cluster-info</span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line">kubectl run kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1 --port=8080</span><br><span class="line"># 当完成run的时候就相当于部署了一个应用</span><br><span class="line">kubectl get deployments</span><br><span class="line"># expose 后相当于  service</span><br><span class="line">kubectl expose deployment hello-node --type=LoadBalancer</span><br><span class="line">kubectl get services</span><br><span class="line"></span><br><span class="line">kubectl describe pods</span><br><span class="line">kubectl get pods -o wide</span><br><span class="line"></span><br><span class="line">kubectl logs $POD_NAME</span><br><span class="line">kubectl exec -ti $POD_NAME bash</span><br><span class="line">kubectl exec $POD_NAME env</span><br><span class="line">kubectl describe services/kubernetes-bootcamp</span><br><span class="line">export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template=&#x27;&#123;&#123;(index .spec.ports 0).nodePort&#125;&#125;&#x27;)</span><br><span class="line">echo NODE_PORT=$NODE_PORT</span><br><span class="line">kubectl scale deployments/kubernetes-bootcamp --replicas=2</span><br><span class="line">kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2</span><br><span class="line"></span><br><span class="line"># 看是否更新完</span><br><span class="line">kubectl rollout status deployments/kubernetes-bootcamp</span><br><span class="line">kubectl rollout undo deployments/kubernetes-bootcamp</span><br><span class="line">kubectl get events</span><br><span class="line">kubectl config view</span><br><span class="line">kubectl delete service hello-node</span><br><span class="line">kubectl delete deployment hello-node</span><br><span class="line"></span><br><span class="line">kubectl create -f https://k8s.io/docs/user-guide/walkthrough/pod-nginx-with-label.yaml</span><br><span class="line">kubectl apply -f https://k8s.io/docs/user-guide/walkthrough//deployment-update.yaml</span><br><span class="line"></span><br><span class="line">kubectl get pods -l app=nginx</span><br><span class="line">kubectl delete pod -l app=nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kubectl create configmap example-redis-config --from-file=https://k8s.io/docs/tutorials/configuration/configmap/redis/redis-config</span><br><span class="line">kubectl get configmap example-redis-config -o yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="在一个k8s集群内部各个pod默认跟其他服务与pod是可见的"><a href="#在一个k8s集群内部各个pod默认跟其他服务与pod是可见的" class="headerlink" title="在一个k8s集群内部各个pod默认跟其他服务与pod是可见的"></a>在一个k8s集群内部各个pod默认跟其他服务与pod是可见的</h3><p>一个Pod可以包含多个应用， 但一个pod里面的应用应该是强绑定的，共享存储网络，跟一些容器信息</p>
]]></content>
      <categories>
        <category>container</category>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>container</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>混沌工程实践笔记</title>
    <url>/2021/11/10/devops/chaos/</url>
    <content><![CDATA[<h2 id="混沌工程实践笔记"><a href="#混沌工程实践笔记" class="headerlink" title="混沌工程实践笔记"></a>混沌工程实践笔记</h2><h2 id="混沌工程简介"><a href="#混沌工程简介" class="headerlink" title="混沌工程简介"></a>混沌工程简介</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>混沌工程起始于2008年，现在混沌工程的概念与之前有了很大的区别， 经过多年的沉淀和总结，混沌工程越来越趋向如下定义，混沌工程是软件工程的一部分，旨在通过工程化的手段， 帮助软件开发获得更好的质量和稳定性，通过有计划科学的实验计划，提前对生产环境可能出现的各种问题和情况进行预演，通过对实验结果进行分析和总结，得出对软件质量和软件架构非常有帮助的结论。通过不断的迭代，使得软件质量和稳定性得到更好的保障。</p>
<p><img src="https://user-images.githubusercontent.com/7270177/141088399-6038c6db-15ba-4d48-a4d1-d81b3a7ed74f.png" alt="DD"></p>
<p>混沌工程发展历史<br>混沌工程诞生的契机<br>企业服务队稳定性的迫切需求<br>规模的增长和系统的复杂性<br>快速迭代与稳定性的冲突<br>稳定性测试遇到的难题<br>排障追踪的困境<br>混沌工程的原则<br>image<br>image</p>
<h3 id="建立一个围绕稳定状态行为的假说"><a href="#建立一个围绕稳定状态行为的假说" class="headerlink" title="建立一个围绕稳定状态行为的假说"></a>建立一个围绕稳定状态行为的假说</h3><p>要关注系统的可测量输出, 而不是系统的属性。对这些输出在短时间内的度量构成了系统稳定状态的一个代理。 整个系统的吞吐量、错误率、延迟百分点等都可能是表示稳态行为的指标。 通过在实验中的系统性行为模式上的关注, 混沌工程验证了系统是否正常工作, 而不是试图验证它是如何工作的。<br>通俗的来讲就是你的服务在什么的状态下（用什么样的数据说明）是正常服务的，稳定的。<br>这也是将来我们进行混沌试验验证的一个非常重要的参考。</p>
<h3 id="多样化真实世界的事件"><a href="#多样化真实世界的事件" class="headerlink" title="多样化真实世界的事件"></a>多样化真实世界的事件</h3><p>混沌变量反映了现实世界中的事件。 我们可以通过潜在影响或估计频率排定这些事件的优先级。考虑与硬件故障类似的事件, 如服务器宕机、软件故障 (如错误响应) 和非故障事件 (如流量激增或伸缩事件)。 任何能够破坏稳态的事件都是混沌实验中的一个潜在变量。<br><img src="https://user-images.githubusercontent.com/7270177/141089200-04642d5e-10a4-4c13-99eb-5c12024c7599.png" alt="xx"></p>
<h3 id="在生产环境中运行实验"><a href="#在生产环境中运行实验" class="headerlink" title="在生产环境中运行实验"></a>在生产环境中运行实验</h3><p>系统的行为会依据环境和流量模式都会有所不同。 由于资源使用率变化的随时可能发生, 因此通过采集实际流量是捕获请求路径的唯一可靠方法。 为了保证系统执行方式的真实性与当前部署系统的相关性, 混沌工程强烈推荐直接采用生产环境流量进行实验。</p>
<h3 id="持续自动化运行实验"><a href="#持续自动化运行实验" class="headerlink" title="持续自动化运行实验"></a>持续自动化运行实验</h3><p>手动运行实验是劳动密集型的, 最终是不可持续的。所以我们要把实验自动化并持续运行，混沌工程要在系统中构建自动化的编排和分析。 一般公司会构建自己公司专用的混沌平台， 用以解决混沌工程中处处的人工操作，解决效率低下的问题。 最终平台可以作为软件工程中必要的环节集成到公司的研发流程中去。</p>
<h3 id="最小化爆炸半径"><a href="#最小化爆炸半径" class="headerlink" title="最小化爆炸半径"></a>最小化爆炸半径</h3><p>在生产中进行试验可能会造成不必要的客户投诉。虽然对一些短期负面影响必须有一个补偿, 但混沌工程师的责任和义务是确保这些后续影响最小化且被考虑到。<br>混沌工程是一个强大的实践, 它已经在世界上一些规模最大的业务系统上改变了软件是如何设计和工程化的。 相较于其他方法解决了速度和灵活性, 混沌工程专门处理这些分布式系统中的系统不确定性。 混沌工程的原则为我们大规模的创新和给予客户他们应得的高质量的体验提供了信心。</p>
<h3 id="混沌工程实践流程"><a href="#混沌工程实践流程" class="headerlink" title="混沌工程实践流程"></a>混沌工程实践流程</h3><p>业界关于混沌工程的标准实践流程没有一个明确标准的定义。但大部分实践过混沌工程的大致流程都一致, 下图是IBM的实践流程：<br><img src="https://user-images.githubusercontent.com/7270177/141087306-09bb61b2-a971-4b42-a7f3-fdac9f38df16.png" alt="DKK"></p>
<p>总结来说，主要分为如下几个步骤:</p>
<h3 id="1-对将要进行混沌工程的软件项目进行一个彻底的了解，获得组织上的认可"><a href="#1-对将要进行混沌工程的软件项目进行一个彻底的了解，获得组织上的认可" class="headerlink" title="1. 对将要进行混沌工程的软件项目进行一个彻底的了解，获得组织上的认可"></a>1. 对将要进行混沌工程的软件项目进行一个彻底的了解，获得组织上的认可</h3><p>对于将被实验覆盖的软件系统，我们需要有个端对端的了解，我们要知道这个软件系统的架构，软件的运行环境，软件服务的客户等等。 在了解这些基本信息之后， 我们要对此软件系统做故障注入还需要做组织上的认可和准备。</p>
<h3 id="2-创建对此软件项目专门针对性的实验假设-实验过程可观测"><a href="#2-创建对此软件项目专门针对性的实验假设-实验过程可观测" class="headerlink" title="2. 创建对此软件项目专门针对性的实验假设, 实验过程可观测"></a>2. 创建对此软件项目专门针对性的实验假设, 实验过程可观测</h3><p>通过第一步的积累， 我们需要建立一些可观测的指标，系统的运行稳健与否，需要有相关的指标数据， 通常来说，这些指标数据是由监控系统所承载的。 我们会尝试对此软件系统进行一定的假设， 比如，但个节点崩溃预期服务正常提供， 数据库崩溃服务仍然可用。 有</p>
<h3 id="3-定制设计实验"><a href="#3-定制设计实验" class="headerlink" title="3. 定制设计实验"></a>3. 定制设计实验</h3><p>依赖假设及系统稳定态观测的方法之后， 我们可以针对性的进行实验设计。 针对不同场景，我们可以设定不同的实验内容， 整个试验可以是多种场景混合作用的一个结果， 因此，我们在设计实验的时候，可以根据既有假设，去指定对应的实验计划，证明这个假设是不成立的。 这个过程中可能需要我们的混沌平台具备场景编排的功能，以真实制造可能会出现的事件。</p>
<h3 id="4-执行实验"><a href="#4-执行实验" class="headerlink" title="4. 执行实验"></a>4. 执行实验</h3><p>当实验设计完毕之后， 我们可以手动的或者在平台上自动执行编排好的混沌实验， 执行过程中，把相关的实验数据与试验结果进行详细记录。初期执行的时候通常需要相关人员在场， 后期软件系统成熟之后，也可以做一些突袭实验， 用来验证维护人员发现问题以及解决问题的能力。</p>
<h3 id="5-分析实验结果"><a href="#5-分析实验结果" class="headerlink" title="5. 分析实验结果"></a>5. 分析实验结果</h3><p>对于每一次的实验数据，都是我们宝贵的财富， 我们结合软件系统和架构，对实验数据进行详细的分析， 总结得出实验结果得出的结论，验证之前的假设是否成立， 我们需要把这些结论文档化，并且把这些结论中需要改进的点，记录到今后的优化改进任务中去。</p>
<h3 id="6-交流改进点，并且进行改进"><a href="#6-交流改进点，并且进行改进" class="headerlink" title="6. 交流改进点，并且进行改进"></a>6. 交流改进点，并且进行改进</h3><p>对于每次实验结果，我们都能得出一些结论， 我们需要对这些结论进行相应的分析和执行。<br>对于需要架构调整以及代码问题修复的地方，我们要及时安排任务去修复掉， 这样才能保证软件在将来遇到同样的场景，不会出现相应的问题。对于不能修复解决的，我们也要有一个可以迅速执行落地的应急预案， 这样，当这样的情况发生时， 我们可以迅速采取行动，最大可能的降低对软件服务的影响。</p>
<h3 id="7-扩大实验范围，继续进行实验迭代"><a href="#7-扩大实验范围，继续进行实验迭代" class="headerlink" title="7. 扩大实验范围，继续进行实验迭代"></a>7. 扩大实验范围，继续进行实验迭代</h3><p>经过软件的优化和修复之后， 我们会把原来的范围进行扩大，这里的范围含义比较广， 比如机器集群范围的扩大， 再比如服务依赖范围的扩大等等， 为了尽可能的验证极端情况下，我们能够正确应对突发问题的效率和可靠性， 我们需要扩大实验范围，继续迭代这个实验流程。</p>
<h2 id="混沌工程的收益"><a href="#混沌工程的收益" class="headerlink" title="混沌工程的收益"></a>混沌工程的收益</h2><p>未雨绸缪， 在问题发生前，提前解决可能出现的问题<br>提升软件质量，保障软件服务可用性<br>提升迭代效率， 一定程度上降低团队为稳定性所花费的额外时间。<br>沉淀和总结经验，为将来软件系统的设计和实施提供有益的参考</p>
]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>devops</tag>
        <tag>chaos</tag>
      </tags>
  </entry>
  <entry>
    <title>CICD 笔记</title>
    <url>/2019/07/30/devops/cicd/</url>
    <content><![CDATA[<h2 id="CICD-笔录、-想法记录"><a href="#CICD-笔录、-想法记录" class="headerlink" title="CICD 笔录、 想法记录"></a>CICD 笔录、 想法记录</h2><h3 id="CICD是什么"><a href="#CICD是什么" class="headerlink" title="CICD是什么"></a>CICD是什么</h3><p>什么是CICD呢， 按我理解， CICD 应该做应用生命周期管理的一整套解决方案， 而非仅仅关注与持续集成和持续发布，CICD是应用生命周期的重要组成部分， 但它不是全部。<br>更有一些组织会把CICD强行隔离， 部署和编译没有任何的整合， 我认为这是不科学的。<br>按照个人理解，应用除了自己要关注的业务逻辑部分， 各其他点（中间件， 运维， 甚至中台）等都应该被CICD所关注，最终能达到的效果就是应用可以放心的去写应用， 大家能再这个生命周期里各司其职。<br>虽然这样，我也不得不关注，当下意义上的CI和CD， 因为他们确实是前辈们抽象的最重要的两个概念了。 如果这两个概念没有， 其实这个体系也许就不存在，甚至是有另外一个体系会存在，现在应用交付的方式会发生质的变化。</p>
<h3 id="CI-持续集成"><a href="#CI-持续集成" class="headerlink" title="CI - 持续集成"></a>CI - 持续集成</h3><p>应该是从代码写之前就开始关注， 从项目的创建，业务逻辑的编写， 到打成可部署的包，包的版本管理。<br>我们知道很多公司不仅仅会有一种类型的项目结构，也不止一种的单测或者其他代码质量工具，甚至一些公司可能用多种语言进行开发。 做到通用的同时，又能做到可版本化、代码化、幂等化、简单化那就是一种艺术。</p>
<h4 id="项目生成"><a href="#项目生成" class="headerlink" title="项目生成"></a>项目生成</h4><p>项目的生成主要是指项目的初始化， 项目初始化其实是非常重要的，它影响了我们以怎么样的模板去部署它。 让业务方去专注于业务， 就必须由基础设施来承担项目生成的职责。<br>当然基础设施方生成项目，也能够使得项目更好的匹配我们的自动化集成与部署。<br>Spring的 <code>initializer</code> 仅仅提供了一个生成非常通用的Java <code>Spring Boot</code> 项目的工具， 但这些还不够， 我们不仅仅需要把项目生成， 更要与公司的规范和基础设相结合， 保证生成的项目可以直接与基础设施无缝衔接， 这样才能赋能业务仅仅需要关注业务开发。</p>
<h4 id="业务逻辑编写"><a href="#业务逻辑编写" class="headerlink" title="业务逻辑编写"></a>业务逻辑编写</h4><p>在项目生成的基础上，假设项目生成这一步， 我们已经选择了我们所需要的所有的基础设施， 所有的中间件与存储设施等等， 剩下的只有业务架构设计，以及业务逻辑编写了。<br>我们甚至可以规定生成的项目结构， 让公司某一类项目都遵循同一个项目结构标准， 这对公司的快速迭代及基础设施都是有非常大的好处的。</p>
<h4 id="打包-（Packaging）"><a href="#打包-（Packaging）" class="headerlink" title="打包 （Packaging）"></a>打包 （Packaging）</h4><p>打包其实只是个步骤而已，它主要关注两件事情：  </p>
<ol>
<li>执行打包命令， 生成可以部署的文件</li>
<li>打包过程可复制化， 或者把打成的包存到历史包集里</li>
</ol>
<p>不同的程序来讲， 打包命令是不一样的，如maven项目的常用打包命令是 <code>mvn clean package</code>, C&#x2F;C++ 则更多的使用 <code>make</code> 来生成它所需要的文件。<br>打包过程可复制化要求其实还是有一些的， </p>
<ul>
<li>代版本跟可以用来发布的包关联</li>
<li>总是使用<code>release</code> 版本的依赖(这里我们假定这个release版本的依赖是不会改变的)</li>
</ul>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol>
<li>SONAR 等代码规范检测</li>
<li>单元测试</li>
<li>性能测试</li>
</ol>
<h4 id="CI-应该具备的特点"><a href="#CI-应该具备的特点" class="headerlink" title="CI 应该具备的特点"></a>CI 应该具备的特点</h4><ol>
<li>任务清单化&#x2F;模板化</li>
<li>CI节点无状态，任务随时来随时完成。</li>
<li>基础依赖镜像化， 固化。</li>
<li>打包过程可知化</li>
<li>包与代码对应，幂等性</li>
</ol>
<p>gitlab的runner 和travis-ci， 等都是比较优秀的一些平台， 而jenkins 更像一个任务平台，而非部署平台。</p>
<h3 id="CD-持续发布"><a href="#CD-持续发布" class="headerlink" title="CD - 持续发布"></a>CD - 持续发布</h3><h4 id="版本控制与回滚"><a href="#版本控制与回滚" class="headerlink" title="版本控制与回滚"></a>版本控制与回滚</h4><p>一般版本控制会跟代码的版本控制去走， 建立映射关系， 也有一些版本控制会维护自己单独的生命线。<br>无论哪一种无非是想具备出错迅速纠正的能力。 当然能与代码建立关系是最好的， 最好能够具备某个版本打出来的包不论打几次是等价的。</p>
<h4 id="部署前准备"><a href="#部署前准备" class="headerlink" title="部署前准备"></a>部署前准备</h4><p>部署前的准备主要则是把程序的依赖， 机器的初始化设置等都一一设置好。</p>
<h4 id="顺序部署"><a href="#顺序部署" class="headerlink" title="顺序部署"></a>顺序部署</h4><p>顺序部署主要为了平滑上线，而不至于服务中断， 也是必须的。</p>
<ol>
<li>分批部署</li>
<li>健康监测</li>
<li>部署预热</li>
</ol>
<h4 id="部分部署"><a href="#部分部署" class="headerlink" title="部分部署"></a>部分部署</h4><p>部署一部分进行功能点验证， 这对业务逻辑有一定要求。</p>
<h4 id="混合部署"><a href="#混合部署" class="headerlink" title="混合部署"></a>混合部署</h4><p>在容器化时期是不需要的， 因为大家都可以根据自己的资源需求量来安排资源。<br>但在非容器化时期， 能混合部署会节省大量的IT成本。</p>
<h4 id="弹性伸缩"><a href="#弹性伸缩" class="headerlink" title="弹性伸缩"></a>弹性伸缩</h4><ol>
<li>手动弹性伸缩</li>
<li>自动弹性伸缩</li>
</ol>
]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>devops</tag>
        <tag>cicd</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 下常用的应用软件</title>
    <url>/2015/03/13/linux/apps/</url>
    <content><![CDATA[<h2 id="ssh-相关"><a href="#ssh-相关" class="headerlink" title="ssh 相关"></a>ssh 相关</h2><p>ssh 是linux下最为广泛使用的远程连接工具， 也是每个linux学习者必备的技能<br>ssh最常用的一些操作包括 <a href="./apps/ssh.md">ssh key转换、免密登录，连接管理</a> 也是使用者最应该知悉的内容</p>
<p>免密码ssh登录的设置 </p>
<p>1.确保你有公钥私钥对，确保安装了ssh<br>如果没有可以用下面的命令生成<br>ssh-keygen<br>如果有私钥可以用下面的命令生成公钥<br>ssh-keygen -y -f id_rsa &gt; id_rsa.pub </p>
<p>2.要把自己的公钥添加至目标机的<br>.ssh&#x2F;authorized_keys<br>文件中去，authorized_keys的权限是600 </p>
<p>open ssh与  windows ppk相互转换<br>关键工具 puttygen<br>由私钥生成公钥如上</p>
<p>ssh 连接 linux<br>自动补全需要bash_completion<br>还需要在 .ssh&#x2F;config 文件中记录 host user ip三个字段<br>另外，如果仅需要补全自己</p>
<p>ssh-copy-id 会自动加免密到目标机器</p>
<h2 id="设置hostname"><a href="#设置hostname" class="headerlink" title="设置hostname"></a>设置hostname</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># setting up hostenv</span><br><span class="line"># @author winjeg@qq.com</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">### setting hostname now</span><br><span class="line">hostname $1</span><br><span class="line">echo $1 &gt; /etc/hostname</span><br><span class="line">echo -e &quot;127.0.0.1\t$1$2\t$1&quot; &gt;&gt; /etc/hosts</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="openvpn"><a href="#openvpn" class="headerlink" title="openvpn"></a>openvpn</h2><p>openvpn </p>
<p>添加  &#x2F;etc&#x2F;openvpn&#x2F;client&#x2F;xxxx.conf</p>
<p>systemctl enable <a href="mailto:&#x6f;&#x70;&#101;&#110;&#x76;&#x70;&#x6e;&#45;&#99;&#108;&#x69;&#101;&#x6e;&#x74;&#x40;&#106;&#105;&#x61;&#120;&#105;&#x6e;&#x67;&#x2e;&#115;&#101;&#x72;&#x76;&#x69;&#x63;&#x65;">&#x6f;&#x70;&#101;&#110;&#x76;&#x70;&#x6e;&#45;&#99;&#108;&#x69;&#101;&#x6e;&#x74;&#x40;&#106;&#105;&#x61;&#120;&#105;&#x6e;&#x67;&#x2e;&#115;&#101;&#x72;&#x76;&#x69;&#x63;&#x65;</a></p>
<p>设置免密<br>在conf中<br>auth-user-pass  xxx.txt</p>
<p>xxx.txt 中第一行用户名，第二行密码</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 快速入门</title>
    <url>/2014/01/10/linux/linux/</url>
    <content><![CDATA[<h1 id="Linux-学习之路"><a href="#Linux-学习之路" class="headerlink" title="Linux 学习之路"></a>Linux 学习之路</h1><h2 id="Linux-Logo"><a href="#Linux-Logo" class="headerlink" title="Linux Logo"></a>Linux Logo</h2><p><img src="https://www.kernel.org/theme/images/logos/tux.png" alt="Linux logo"></p>
<p>Linux 的LOGO是一只可爱的小企鹅，选择这个Logo也是有一段奇闻轶事的，有兴趣的读者不妨自行去搜索引擎上了解。关于Linux本身的介绍也不必多说， 相信能看到这篇文章的读者肯定是知道一二。</p>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>相信大家读到这个文章的前提是大家对Linux是有一定兴趣爱好的， 能在这里与读者进行沟通我也是非常感激的。相遇即是缘分，无论是面对面，还是在字里行间。因为网上看到很多系列的教程都是教大家如何去系统的学习Linux的，但是文章长的话，很少人愿意花时间去看， 文章短的话，有很难带大家入门， 因此我写了这个系列的一些文章来帮助大家在1-5个小时之内完成Linux的入门。如果大家不能在这么短的时间入门，也不要来打我，觉得有写的不好的地方欢迎 email我 <a href="mailto:winjeg@qq.com">winjeg@qq.com</a>, 并提出宝贵的建议。</p>
<p>本系列的文章会尽量少的介绍自己的价值观的同时会尽可能多的给出初学者最多的能省掉很多弯路的建议。 所以次系列的文章中我会注重列一些客观事实， 而所有的选择权都在读者， 文章全系手码，有些错误在所难免， 欢迎指正。</p>
<h3 id="关于修改"><a href="#关于修改" class="headerlink" title="关于修改"></a>关于修改</h3><p>本系列文章欢迎任何形式的修改， 但修改完毕后请让笔者有机会使用大家的修改来完善此文， 大家可以通过发邮件的方式，来告知本文的修改， 本文的目的在于让更多的人更小代价的入门Linux，而非营利性目的。</p>
<h3 id="关于使用与版权"><a href="#关于使用与版权" class="headerlink" title="关于使用与版权"></a>关于使用与版权</h3><p>本系列的文章没有什么特殊的版权要求，如果大家不是很忌讳，请大家在使用本文的时候尽量注明来源，也能让笔者了解到笔者的文章确确实实的帮助到了什么人， 让笔者默默感动一下。</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux BootLoader Grub</title>
    <url>/2014/05/13/linux/linux_bootloader/</url>
    <content><![CDATA[<p>   前段时间修复移动硬盘分区表的时候，把本本的分区也重新弄了下，导致ubuntu的grub找不到linux分区（由于root分区uuid改变造成的不能正常启动），切换到Linux系统时，提示错误“unknown filesystem”，进入grub rescue模式。<br>在Google上搜了一下，终于解决了，方法如下：</p>
<ol>
<li>首先使用set命令，查看当前配置信息；</li>
<li>然后再使用ls命令，遍历一下所有的磁盘；<br>3.查找Linux操作系统的”&#x2F;”分区所在的磁盘，可以使用“ls (hdx,x)&#x2F;”，这里的hdx代表你的物理磁盘，如果只有一块硬盘，则x的值为0，后面一个x（也肯呢个是msdosx,是具体情况而定）代表“&#x2F;”分区的编号。<br>执行该命令（注意，ls命令后的“&#x2F;”不能少，否则会出现“bad filename”错误）后，如果结果为“unknown filesystem”，则说明不是Linux分区，继续查找，知道返回带有“ &#x2F;boot”目录的分区。</li>
<li>找到“&#x2F;”挂载点所在的分区后，就可以修改启动分区了：<br> grub rescue &gt;root&#x3D;(hdx,msdosx)<br> grub rescue &gt;prefix&#x3D;(hdx,msdosx)&#x2F;boot&#x2F;grub<br> grub rescue &gt;insmod normal<br> grub rescue &gt;normal<br>执行完normal命令后，如果normal模块加载成功，那我们就可以看到久违的grub引导菜单了。此时，按“c”切换到grub的命令行模式,修改grub菜单：<br>grub &gt;root&#x3D;(hdx,msdosx) &#x2F;&#x2F;设置系统启动分区，在这里指向内核所在分区<br>grub &gt;prefix&#x3D;(hdx,msdosx)<br>接下来加载Linux.mod模块，并将新的启动信息写入grub：<br>grub &gt;insmod (hdx,msdosx)&#x2F;boot&#x2F;gurb&#x2F;linux.mod<br>grub &gt;linux &#x2F;boot&#x2F;vmlinuz-xxx-xxx root&#x3D;&#x2F;dev&#x2F;sdax &#x2F;&#x2F;里边的xxxx可以按Tab键<br>grub &gt;initrd &#x2F;boot&#x2F;initrd.img-xxx-xxx<br>5.执行boot命令，启动系统（如果系统不能启动，可以重复1-4步，多试几次）：<br>grub &gt;boot<br>6.正常启动系统后，在终端中输入“sudo update-grub”命令，重新生成“grub.ccfg”文件，更新grub信息，屏幕会出现“generating…”的信息。<br>如果没有安装grub-pc软件包，或者grub-legacy，会出现无法找到命令的错误。这时，只需安装一下grub-pc软件包即可。（注意：安装过程中会出现提示要不要新建grub到第一分区，由于我的本本第一分区是Windows系统，所以在此我选择“NO”，而是将grub建立在“&#x2F;”挂载点所在的分区）<br>7.更新完毕之后，重启，问题解决了。如果问题还没解决，重复1-6步的同时，重新建立grub到第一硬盘mbr：<br>sudo grub-install &#x2F;dev&#x2F;sda</li>
</ol>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 与主流的操作系统对比</title>
    <url>/2014/05/13/linux/linux_compare/</url>
    <content><![CDATA[<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><h2 id="对比表格"><a href="#对比表格" class="headerlink" title="对比表格"></a>对比表格</h2>]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>打造属于自己的Linux个性化界面</title>
    <url>/2014/09/13/linux/linux_customize/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>极力外观爱好者浏览这一页内容， 因为这一页会详细的讲述如何自定义一个适合自己使用的Linux系统， 包括外观，也包括一些界面美化软件。</p>
<p>#外观定制</p>
<h2 id="选择一种桌面环境（Gnome）"><a href="#选择一种桌面环境（Gnome）" class="headerlink" title="选择一种桌面环境（Gnome）"></a>选择一种桌面环境（Gnome）</h2><h2 id="设置壁纸与锁屏界面"><a href="#设置壁纸与锁屏界面" class="headerlink" title="设置壁纸与锁屏界面"></a>设置壁纸与锁屏界面</h2><h2 id="选择自己喜欢的图标-icon"><a href="#选择自己喜欢的图标-icon" class="headerlink" title="选择自己喜欢的图标 (icon)"></a>选择自己喜欢的图标 (icon)</h2><h2 id="选择自己喜欢主题-theme"><a href="#选择自己喜欢主题-theme" class="headerlink" title="选择自己喜欢主题 (theme)"></a>选择自己喜欢主题 (theme)</h2><h2 id="选择一个Dock软件-docky-x2F-plank-x2F-cairodock"><a href="#选择一个Dock软件-docky-x2F-plank-x2F-cairodock" class="headerlink" title="选择一个Dock软件 (docky&#x2F;plank&#x2F;cairodock)"></a>选择一个Dock软件 (docky&#x2F;plank&#x2F;cairodock)</h2><h2 id="选择一个桌面显示软件-（Conky）"><a href="#选择一个桌面显示软件-（Conky）" class="headerlink" title="选择一个桌面显示软件 （Conky）"></a>选择一个桌面显示软件 （Conky）</h2><h1 id="操作习惯定制"><a href="#操作习惯定制" class="headerlink" title="操作习惯定制"></a>操作习惯定制</h1><h2 id="快捷键定制"><a href="#快捷键定制" class="headerlink" title="快捷键定制"></a>快捷键定制</h2><h2 id="鼠标行为定制"><a href="#鼠标行为定制" class="headerlink" title="鼠标行为定制"></a>鼠标行为定制</h2><h2 id="定制完成后的效果图"><a href="#定制完成后的效果图" class="headerlink" title="定制完成后的效果图"></a>定制完成后的效果图</h2>]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux桌面环境对比与介绍</title>
    <url>/2014/09/13/linux/linux_des/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>桌面环境是什么， 常见的有哪些</p>
<h2 id="桌面环境列表"><a href="#桌面环境列表" class="headerlink" title="桌面环境列表"></a>桌面环境列表</h2><h3 id="Gnome"><a href="#Gnome" class="headerlink" title="Gnome"></a>Gnome</h3><h3 id="Kde"><a href="#Kde" class="headerlink" title="Kde"></a>Kde</h3><h3 id="Xfce"><a href="#Xfce" class="headerlink" title="Xfce"></a>Xfce</h3><h3 id="i3"><a href="#i3" class="headerlink" title="i3"></a>i3</h3><h3 id="lxde"><a href="#lxde" class="headerlink" title="lxde"></a>lxde</h3><h3 id="awesome"><a href="#awesome" class="headerlink" title="awesome"></a>awesome</h3><h3 id="flux"><a href="#flux" class="headerlink" title="flux"></a>flux</h3><h3 id="…-桌面环境也是百花齐放，-萝卜白菜"><a href="#…-桌面环境也是百花齐放，-萝卜白菜" class="headerlink" title="… 桌面环境也是百花齐放， 萝卜白菜"></a>… 桌面环境也是百花齐放， 萝卜白菜</h3><h2 id="构成桌面环境的要素"><a href="#构成桌面环境的要素" class="headerlink" title="构成桌面环境的要素"></a>构成桌面环境的要素</h2><h3 id="窗口管理器-（Windows-Manager）"><a href="#窗口管理器-（Windows-Manager）" class="headerlink" title="窗口管理器 （Windows Manager）"></a>窗口管理器 （Windows Manager）</h3><h3 id="设置管理器-（Settings-Manager）"><a href="#设置管理器-（Settings-Manager）" class="headerlink" title="设置管理器 （Settings Manager）"></a>设置管理器 （Settings Manager）</h3><h3 id="登陆管理器-（Login-Manager）"><a href="#登陆管理器-（Login-Manager）" class="headerlink" title="登陆管理器 （Login Manager）"></a>登陆管理器 （Login Manager）</h3><h3 id="文件管理器"><a href="#文件管理器" class="headerlink" title="文件管理器"></a>文件管理器</h3>]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Linux 发行版</title>
    <url>/2014/08/13/linux/linux_distros/</url>
    <content><![CDATA[<h2 id="发行版是什么"><a href="#发行版是什么" class="headerlink" title="发行版是什么"></a>发行版是什么</h2><p>这里我就不去用搜索引擎搜索答案来告诉大家发行版是什么了， 我就谈谈自己对发行版的理解与定义。所有Linux发行版本是同源（使用Linux内核）， 不同发行版只是在内核上构建的软件的包管理器与上层的其他软件不同罢了。不同的发行版的侧重点可能不同， 有的发行版侧重于稳定与安全， 有的发行版侧重于外观， 有的发行版侧重于多媒体功能，有的发行版侧重于滚动更新。</p>
<h2 id="发行版简介"><a href="#发行版简介" class="headerlink" title="发行版简介"></a>发行版简介</h2><p>学习Linux 发行版选择是一个绕不过的槛， 尤其是你熟悉了Linux之后， 必然会选择一个自己喜爱的发行版， 当然此文不会帮你决定你应该使用哪个发行版， 大家应该各有所爱，选择合适自己的发行版即可。如果不嫌笔者话多，我在后面会推荐几个发行版，同时会说出这些发行版的一些特点。<br>常见的几个发行版如下：如果我没列出其他的，请不要不开心，因为太多我列不完</p>
<table>
<thead>
<tr>
<th>Archlinux</th>
<th>Debian</th>
<th>Fedora</th>
<th>Redhat</th>
<th>Ubuntu</th>
</tr>
</thead>
<tbody><tr>
<td><img src="/./imgs/archlinux.png" alt="Archlinux"></td>
<td><img src="/./imgs/debian.png" alt="Debian"></td>
<td><img src="/./imgs/fedora.png" alt="Fedora"></td>
<td><img src="/./imgs/redhat.png" alt="Redhat"></td>
<td><img src="/./imgs/ubuntu.png" alt="Ubuntu"></td>
</tr>
</tbody></table>
<h2 id="知名发行版排行榜（按排行来划分）"><a href="#知名发行版排行榜（按排行来划分）" class="headerlink" title="知名发行版排行榜（按排行来划分）"></a>知名发行版排行榜（按排行来划分）</h2><h3 id="Distro-Watch-前15（2017-10）"><a href="#Distro-Watch-前15（2017-10）" class="headerlink" title="Distro Watch 前15（2017-10）"></a>Distro Watch 前15（2017-10）</h3><ol>
<li>Mint</li>
<li>Debian</li>
<li>Manjaro</li>
<li>Ubuntu</li>
<li>Antergos</li>
<li>openSUSE</li>
<li>Solus</li>
<li>Fedora</li>
<li>elementary</li>
<li>Zorin</li>
<li>TrueOS</li>
<li>deepin</li>
<li>CentOS</li>
<li>Arch</li>
<li>PCLinuxOS</li>
</ol>
<p>为什么要看这个发行版的排行榜的数据呢？ 发行版排行榜往往是在学习Linux初期就应该去关注的一个东西。因为如果这一步你关注了它能帮你省下不少麻烦，比如你在一开始选择了比较小众的一个发行版， 这个发行版在世界范围内使用用户不足千人，那么你很难及时得到业界其他Linux爱好者，或者其他技术人员的技术支持， 因为不同发行版的DIff还是比较大的， 往往一些发行版有的问题，另一些没有，无法重现。所以在这一步，还是推荐大家去看看发行版这个东西。<br>当然发行版也不是看完排行榜之后直接去选择排名第一的就好，因为风水轮流转，明年指不定是哪个发行版排第一， 所以按笔者的愚见，只要选一个排名前20的总是没错。一个排名靠前的发行版往往会有一些活跃的社区， 或者维护完备的Wiki文档，尤其是那些最近活跃的发行版。</p>
<p>如果你比较重视外观， 或者性能，或者稳定性，或者实时性, 你可以去搜索引擎里搜索这些发行版，最好去他们官网去看相关的介绍， 排行前10的发行版官网一般都是很正式的， 官网一般都会给出许多发行版的相关截图，及一些发行版的特性介绍，这些都可以作为你选择发行版的参考条件。</p>
<h2 id="按系列与来源进行划分"><a href="#按系列与来源进行划分" class="headerlink" title="按系列与来源进行划分"></a>按系列与来源进行划分</h2><p>这里的系列是指包管理器相同，其他软件有些差异的发行版。个人认为写一个优秀的包管理器还是很花费时间与精力的， 而且很难得到开源社区的认同，这也是很少人会去写包管理器的原因，如果我们假定同一个包管理器是一种发行版， 那么发行版的数量会锐减到10倍不止， 下面我列出了主流的一些发行版（按包管理器来分）。</p>
<h3 id="Debian-系列"><a href="#Debian-系列" class="headerlink" title="Debian 系列"></a>Debian 系列</h3><ol>
<li>Ubuntu</li>
<li>Mint</li>
<li>Debian</li>
<li>Elemantary Os</li>
<li>Zorin Os</li>
<li>Deepin Os</li>
</ol>
<h3 id="Redhat-系列"><a href="#Redhat-系列" class="headerlink" title="Redhat 系列"></a>Redhat 系列</h3><ol>
<li>Redhat</li>
<li>Centos</li>
<li>Fedora</li>
</ol>
<h3 id="Slackware-系列"><a href="#Slackware-系列" class="headerlink" title="Slackware 系列"></a>Slackware 系列</h3><ol>
<li>Slackware</li>
<li>Opensuse</li>
<li>Slax</li>
</ol>
<h3 id="ArchLinux系列"><a href="#ArchLinux系列" class="headerlink" title="ArchLinux系列"></a>ArchLinux系列</h3><ol>
<li>Manjaro</li>
<li>Archlinux</li>
<li>Liri Os</li>
</ol>
<h3 id="Gentoo系列"><a href="#Gentoo系列" class="headerlink" title="Gentoo系列"></a>Gentoo系列</h3><ol>
<li>Getoo</li>
<li>Funtoo</li>
<li>Chrome OS</li>
</ol>
<h3 id="其他系列"><a href="#其他系列" class="headerlink" title="其他系列"></a>其他系列</h3><p>其他系列的发行版比较少, LFS 不算一个发行版只是一本书<br>简单列一下比较有名的发行版</p>
<ol>
<li>Android</li>
<li>Puppy</li>
<li>Solus</li>
</ol>
<p>为什么我会按照这个维度去再进行一次划分，有些人会认为笔者的文章是为了凑字数，其实恰恰相反， 这个维度去划分，是为了让大家明白包管理器的重要性。一个包管理器下的发行版，往往安装、删除、更新软件、设定软件仓库地址等都大同小异， 比如如果你是个Ubuntu的用户，让你切换到Mint你基本是无感的，因为安装方式都基本相同，使用方式也无太多差异。 当然在使用体验上回造成很大差别的还有一个因素， 就是桌面环境（DE）, 我们会在后续的章节里面详细介绍桌面环境的差异。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通过本章的学习，希望大家能对Linux的发行版能有一个大体的概念，能够自主的通过搜索引擎查看官网介绍，来决定自己去选择哪个发行版。不要再选择发行版上浪费过多时间， 如果你是为了外观的话更没有必要。因为Linux是非常自由的，你完全可以使用不同的发行版定义一模一样的界面（UI）。需要强调的一点是，人生苦短，选定一个发行版就好，不用每个发行版都去学，完全没有意义的。</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 常见问题</title>
    <url>/2014/07/13/linux/linux_faq/</url>
    <content><![CDATA[<h2 id="软件安装问题"><a href="#软件安装问题" class="headerlink" title="软件安装问题"></a>软件安装问题</h2><h2 id="驱动问题"><a href="#驱动问题" class="headerlink" title="驱动问题"></a>驱动问题</h2><h2 id="配置问题"><a href="#配置问题" class="headerlink" title="配置问题"></a>配置问题</h2><h2 id="时间问题"><a href="#时间问题" class="headerlink" title="时间问题"></a>时间问题</h2><h2 id="语言问题"><a href="#语言问题" class="headerlink" title="语言问题"></a>语言问题</h2><h2 id="字体问题"><a href="#字体问题" class="headerlink" title="字体问题"></a>字体问题</h2><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2>]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 1号进程</title>
    <url>/2014/06/13/linux/linux_init/</url>
    <content><![CDATA[<h3 id="sysinit"><a href="#sysinit" class="headerlink" title="sysinit"></a>sysinit</h3><h3 id="systemd"><a href="#systemd" class="headerlink" title="systemd"></a>systemd</h3><h2 id="Linux系的软件的一些设计理念"><a href="#Linux系的软件的一些设计理念" class="headerlink" title="Linux系的软件的一些设计理念"></a>Linux系的软件的一些设计理念</h2>]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 系统的安装</title>
    <url>/2014/02/13/linux/linux_install/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>多言无益， 不迈过安装系统这个坎你是永远都学习不会Linux的， 更不可能成为它的爱好者。<br>Linux的系统安装并不比Widnows的安装难，也并不比Windows系统的安装简单，选择何种方式安装也是可以</p>
<h2 id="通用安装步骤"><a href="#通用安装步骤" class="headerlink" title="通用安装步骤"></a>通用安装步骤</h2><p>本文中我会通过使用Virtualbox 这款软件，来演示Majaro Linux系统的安装步骤。<br>VirtualBox 的下载地址我就不贴了，自己去搜索下载就行了。Manjaro Linux 的下载地址也一样， 不过两个都推荐去官网下载，以免中毒找我麻烦。</p>
<ol start="0">
<li><p>VirtualBox安装与设置<br> 如果你想直接装Linux到你的电脑上可以从第一节开始看起</p>
<ol>
<li>下载virtualbox</li>
<li>安装virtualbox</li>
<li>创建Linux虚拟机，在创建虚拟机之前，请在BIOS里面确保开启了Intel VT-X的支持，否则只能安装32位的Linux<br> 创建步骤：如下<br> 由于是Manjaro，是基于Archlinux的，VirtualBox未列出，可以选择Archlinux<br> <img src="/./imgs/vbox1.png" alt="新建"><br> 如果这个虚拟机你要用起来流畅，请至少设置 2048M内存<br> <img src="/./imgs/vbox2.png" alt="选择内存"><br> 创建虚拟硬盘时候选择任何格式都可以，但容量推荐20GB以上<br> <img src="/./imgs/vbox3.png" alt="新建虚拟硬盘"><br> <img src="/./imgs/vbox4.png" alt="d"><br> <img src="/./imgs/vbox5.png" alt="d"><br> <img src="/./imgs/vbox6.png" alt="d"><br> 至此新建虚拟机完成，下面需要进行一些设置，大家按图索骥<br> <img src="/./imgs/vbox7.png" alt="d"><br> <img src="/./imgs/vbox8.png" alt="d"><br> <img src="/./imgs/vbox9.png" alt="d"><br> <img src="/./imgs/vbox10.png" alt="d"><br> 设置完虚拟机，大家需要设置一下你的安装文件的位置，如下图<br> <img src="/./imgs/vbox11.png" alt="d"><br> <img src="/./imgs/vbox12.png" alt="d"></li>
</ol>
</li>
<li><p>准备 U盘， Linux发行版镜像<br>推荐使用一些工具如Rufus等把自己要装的系统DD到U盘上， 具体很简单这里就不给图示了。<br>制作好U盘启动盘之后，可以把U盘插入电脑的USB口，开机按F2&#x2F;Delete 进入BIOS设置从U盘启动， 具体的型号可能按键不一样，大家如果不清楚可以看开机时的提示语或者自行搜索。</p>
</li>
<li><p>电脑<br> 你要有一个硬件完好的电脑，如果你幻想使用Linux来拯救硬件本身就是坏的电脑，就别想了, 软件是不能修复硬件的，物理的硬件需要用物理的方法解决。</p>
</li>
<li><p>硬盘分区，挂载分区</p>
</li>
<li><p>选定键盘与区域和语言</p>
</li>
<li><p>创建用户</p>
</li>
<li><p>安装Bootloader</p>
</li>
<li><p>安装Xserver</p>
</li>
<li><p>安装桌面环境</p>
</li>
<li><p>安装登陆管理器</p>
</li>
<li><p>安装其他应用软件</p>
</li>
</ol>
<h2 id="图形界面-GUI-安装的例子"><a href="#图形界面-GUI-安装的例子" class="headerlink" title="图形界面(GUI) 安装的例子"></a>图形界面(GUI) 安装的例子</h2><h2 id="命令行（CLI）安装的例子"><a href="#命令行（CLI）安装的例子" class="headerlink" title="命令行（CLI）安装的例子"></a>命令行（CLI）安装的例子</h2>]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 包管理器简介</title>
    <url>/2014/03/13/linux/linux_pack_mgr/</url>
    <content><![CDATA[<h2 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a>apt-get</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h3 id="源（软件仓库）设置"><a href="#源（软件仓库）设置" class="headerlink" title="源（软件仓库）设置"></a>源（软件仓库）设置</h3><h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><h3 id="源（软件仓库）设置-1"><a href="#源（软件仓库）设置-1" class="headerlink" title="源（软件仓库）设置"></a>源（软件仓库）设置</h3><h2 id="pacman"><a href="#pacman" class="headerlink" title="pacman"></a>pacman</h2><h3 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h3><h3 id="源（软件仓库）设置-2"><a href="#源（软件仓库）设置-2" class="headerlink" title="源（软件仓库）设置"></a>源（软件仓库）设置</h3><h2 id="emerge"><a href="#emerge" class="headerlink" title="emerge"></a>emerge</h2><h3 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h3><h3 id="源（软件仓库）设置-3"><a href="#源（软件仓库）设置-3" class="headerlink" title="源（软件仓库）设置"></a>源（软件仓库）设置</h3><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>简介</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Shell简介</title>
    <url>/2014/05/13/linux/linux_shell/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><p>Linux 的Shell 是Linux入门者必须绕不过的一个坎，对于很多初学者Shell是一个噩梦， 但对于很多有经验的用户，一个没有Shell的系统是最不好用的系统。 Linux、Windows、Mac这三个主流操作系统都是由Shell的存在的不管是Windows的Cmd， PowerShell， 或者是Mac的Terminal， 异或是Linux的各种Terminal。但在Linux的Terminal上你几乎可以无所不能，你可以几乎修改任何系统的设置， 也可以完成一系列复杂的操作， 比如处理图片，处理视频，也可以唤起任何图形界面的程序，只要你系统配置好了， 可以这么说，Linux可以没有图形界面（GUI）， 但不能没有Shell。个人理解Linux的Shell只要配置得当可以甩Windows一大截。</p>
<h2 id="shell-的作用"><a href="#shell-的作用" class="headerlink" title="shell 的作用"></a>shell 的作用</h2><p>用一句话来概括，就是Shell是你与Linux进行交互的主要渠道之一，主要用来操作Linux系统的方方面面。</p>
<p>另外Shell有着自己的一套脚本语言， 有了这个语言，你也几乎可以做任何自动化的事情， 当然此文不会详细讲Shell编程，因为笔者认为你就算不会Shell编程也可以使用Linux， 完全没有什么问题。</p>
<h2 id="常见的Shell"><a href="#常见的Shell" class="headerlink" title="常见的Shell"></a>常见的Shell</h2><h3 id="sh"><a href="#sh" class="headerlink" title="sh"></a>sh</h3><p>sh是几乎所有发行版必备的一个Shell, 但它可能不是默认的Shell， 但你总能唤起它。</p>
<h3 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h3><p>bash是几乎所有Linux发行版都会默认的Shell， 是笔者自己会用的Shell</p>
<h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><p>zsh 是对Shell期望比较高的一帮人搞出来的一个东西， 它有着自动补全，自动纠错，还有一些自动目录跳转的功能，当然他的功能也不仅仅于此， 当你熟悉了Linux你也会对这个Shell工具十分感兴趣</p>
<h2 id="常见的Shell软件"><a href="#常见的Shell软件" class="headerlink" title="常见的Shell软件"></a>常见的Shell软件</h2><h3 id="gnome-terminal"><a href="#gnome-terminal" class="headerlink" title="gnome-terminal"></a>gnome-terminal</h3><p>gnome-terminal 是Gnome桌面环境默认自带的terminal，一般的功能都具有，比如支持多彩显示，主题设置，cursor设置， 背景，前景，字体，粗细，字符集等等</p>
<h3 id="xfce4-terminal"><a href="#xfce4-terminal" class="headerlink" title="xfce4-terminal"></a>xfce4-terminal</h3><p>xfce4-terminal 是xfce4桌面环境自带的terminal， 一般情况下你只要装了xfce4桌面环境套装，这个terminal 就存在了。它的功能与Gnome的termianl很类似</p>
<h3 id="xterm"><a href="#xterm" class="headerlink" title="xterm"></a>xterm</h3><p>xterm 的历史比较悠久，很多发行版都自带Xterm，作为一个默认的terminal</p>
<h3 id="其他发行版terminal"><a href="#其他发行版terminal" class="headerlink" title="其他发行版terminal"></a>其他发行版terminal</h3><p>因为Terminal 的软件实在是数不胜数，因此我也在这里无法列出全部的详细的Terminal， 更没有能力进行一一点评， 选择Terminal也是要按照个人的喜好进行选择，主流发行版&#x2F;桌面环境里面的Terminal一般都还是不错的，功能也都类似， 也不必刻意去找一个更好的取代品。</p>
<h3 id="TODO-Gnome-terminal-的配置"><a href="#TODO-Gnome-terminal-的配置" class="headerlink" title="TODO Gnome terminal 的配置"></a>TODO Gnome terminal 的配置</h3><h3 id="在shell中嵌入二进制文件-TODO-fix"><a href="#在shell中嵌入二进制文件-TODO-fix" class="headerlink" title="在shell中嵌入二进制文件 (TODO, fix )"></a>在shell中嵌入二进制文件 (TODO, fix )</h3><p>将二进制文件打包到shell脚本<br>之前因为要用支付宝更新浏览器插件,直接下载了一个aliedit.sh脚本,直接执行脚本,便搞定了插件的安装,正要称赞阿里的开发人员人性化了,转念一下,一个shell脚本就能搞定的安装,岂不是可以直接cat脚本就可得知支付宝监控工具的代码啦.<br>直接cat结果如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123456789101112131415161718192021222324 main()&#123;SetStringsMkdirARCHIVE=`awk &#x27;/^__ARCHIVE_BELOW__/ &#123;print NR + 1; exit 0; &#125;&#x27; &quot;$0&quot;`tail -n+$ARCHIVE &quot;$0&quot; | tar xzvm -C $TMP_DIR &gt; /dev/null 2&gt;&amp;1 3&gt;&amp;1if [ $? -ne 0 ]thenecho $PACKAGE_BADQuitfiCUR_DIR=`pwd`cd $TMP_DIR./install.sh#cd &quot;$CUR_DIR&quot;rm -rf $TMP_DIRexit 0&#125;main#This line must be the last line of the file__ARCHIVE_BELOW__2�^��^M�.�Ɠ��jz���Y�Zi(�#;S4#C^��?*oX#���`����jW�u��_���#p��#�`&lt;span style=&quot;font-family: &#x27;Lohit Hindi&#x27;;&quot;&gt;י��#n�UY������,c���d��II���</span><br></pre></td></tr></table></figure>

<p>shell脚本后面跟了一些乱码,莫非是直接加密了shell,通过阅读代码可以看出脚本后的乱码其实一个tar.gz的二进制:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ARCHIVE=&lt;code&gt;awk &#x27;/^__ARCHIVE_BELOW__/ &#123;print NR + 1; exit 0; &#125;&#x27; &quot;$0&quot;tail -n+$ARCHIVE &quot;$0&quot; | tar xzvm -C $TMP_DIR &gt; /dev/null 2&gt;&amp;1 3&gt;&amp;1</span><br></pre></td></tr></table></figure>
<p>首先是用awk获取脚本代码的开始行号,使用tail获取所有二进制码(所以脚本才会有如此注释:#This line must be the last line of the file),通过管道传给tar命令解压到制定目录.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">oen@oen ~/code/shell/aliedit/install $ du -a4 ./README12 ./install.sh268 ./lib/libaliedit64.so244 ./lib/libaliedit32.so516 ./lib536 .</span><br></pre></td></tr></table></figure>
<p>如上可以看到,真正执行是通过解压到临时目录的install.sh 实现的,同时真正玄机在libaliedit64下,是看不到了.<br>不得不说的一个偶然出现的问题：脚本执行完成之后会把临时目录删除,通过vi注释掉删除语句,结果提示包错误,但是怀疑是难道是有脚本校验,但脚本包错误提示是因为tar失败发出的,原来是二进制的乱码通过vi编辑后保存,二进制便彻底变成乱码了,所以tar解包失败.<br>具体使用方式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">12345678 oen@oen ~/code/shell/aliedit/install/lib $ echo &quot;oenhan.com blog code&quot; &gt; example.shoen@oen ~/code/shell/aliedit/install/lib $ tar -zcvm * &gt;&gt; example.shexample.shlibaliedit32.solibaliedit64.sooen@oen ~/code/shell/aliedit/install/lib $ cat example.sh | head -n 3oenhan.com blog code#A#3Q#��ePO�����-@p�#��kpw��5�#�&lt;span style=&quot;font-family: &#x27;Lohit Hindi&#x27;;&quot;&gt;ݝ#����u</span><br></pre></td></tr></table></figure>
<p>其实这个脚本就是一个自解压包,同理你可以把很多文件的二进制搞出来,脚本中找个命令接受转义即可.<br>当然还有专门的命令可以搞定在脚本嵌入二进制文件: uuencode<br>1 uuencode &#x2F;home&#x2F;oenhan.com.1.tar &#x2F;home&#x2F;oenhan.com.2.tar  &gt; &#x2F;home&#x2F;oenhan.com.txt<br>将 oenhan.com.1.tar编码到 oenhan.com.txt,将来解码到 oenhan.com.2.tar.<br>具体实现:<br>首先需要写一个脚本example.sh的头:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">12345 #!/bin/bashuudecode $0cd /home/tar xvf  oenhan.com.2.tarexit</span><br></pre></td></tr></table></figure>
<p>然后将自解压代码编码到脚本中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 uuencode /home/oenhan.com.1.tar /home/oenhan.com.2.tar &gt;&gt; /home/example.sh</span><br></pre></td></tr></table></figure>
<p>如此一个自解压脚本做成了, uuencode和tar解压没有本质区别,uudecode 自己完成了tar找寻二进制代码的过程,看似很自动化却需要用户安装一个包sharutils,从简易度上得不偿失,不如用tar的方式搞定shell的二进制代码嵌入.</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>一些Linux系统知识</title>
    <url>/2014/03/13/linux/linux_sys/</url>
    <content><![CDATA[<h2 id="启动进程"><a href="#启动进程" class="headerlink" title="启动进程"></a>启动进程</h2><h3 id="sysinit"><a href="#sysinit" class="headerlink" title="sysinit"></a>sysinit</h3><h3 id="systemd"><a href="#systemd" class="headerlink" title="systemd"></a>systemd</h3><h2 id="Linux系的软件的一些设计理念"><a href="#Linux系的软件的一些设计理念" class="headerlink" title="Linux系的软件的一些设计理念"></a>Linux系的软件的一些设计理念</h2><h2 id="一些基本概念"><a href="#一些基本概念" class="headerlink" title="一些基本概念"></a>一些基本概念</h2><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>sudo</p>
<h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>用户管理</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 用户相关的一些知识</title>
    <url>/2014/03/13/linux/linux_user/</url>
    <content><![CDATA[<p>主要问题都是安全</p>
<p>譬如专门为 mysql tomcat 创建一个用户名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo groupadd mysql</span><br><span class="line">sudo useradd -r -g mysql mysql</span><br></pre></td></tr></table></figure>

<p>好控制权限，只给相关文件的权限</p>
<p>隔离</p>
<p>万一有 bug&#x2F;被入侵 运气好也许还能靠权限控制避免进一步的恶劣影响。有些服务用户还设置了 nologin。</p>
<p>话说，搭车问下 windows 上面怎么以其他用户身份运行服务啊，现在是 system 身份运行 ftp 服务感觉很有压力</p>
<p>我司（截至 2017 年 6 月）的某个 linux 生产环境上因 struts2 远程执行漏洞种了 DDOS 木马,由于 tomcat 以 root 运行，导致无法清除木马，后直接迁移。</p>
<p>组策略设定允许某用户以服务身份登陆</p>
<p>在服务里面可以自己改服务启动所属的用户<br>不过首先你要自己新建一个，要不是就用 nt 自有的</p>
<p>命令好像也可以改，明天上班去试试</p>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Linux的一些思考</title>
    <url>/2014/11/13/linux/summary/</url>
    <content><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果你能看到这里， 我想再次表达自己的感激与感动。山不在高，有仙则灵，此系列的文章也不再多，说清就行。看完本系列的文章，我相信大家都能够独立的安装自己喜欢的Linux操作系统，能够没有太大障碍的使用Linux系统，能够自行利用搜索引擎切切实实的去解决自己遇到的问题，接触到很多开源社区。如果是这样，恭喜你，你已经成功入门。 如果你对我的任何一个章节比较感兴趣，仍然， 搜索引擎是你最大的帮助，当然如果你的理解力比较好，或者我的表述足够通俗易懂的话， 你也不需要去专门去挨个查。有很多东西不一定需要当场学会，而是在以后的日积月累中慢慢学会， 知识是一种累计的过程，而非一蹴而就的。</p>
<p>另外笔者相信大家有耐心，也有信心去逐渐更加深入的学习和了解Linux系统。开源世界的用户体验有时候是不比闭源世界的操作系统做的好， 但<code>开源世界给你提供了做的更好的可能性</code>。</p>
<h2 id="路向何方"><a href="#路向何方" class="headerlink" title="路向何方"></a>路向何方</h2><p>如果你看完本文还是觉得自己对Linux的兴趣有增无减， 那么恭喜你，你是一名Linux爱好者，也是一个爱好自由的人。看完这些， 最多只能够你安装并使用Linux，但不能带你精通Linux，因为笔者水平也是有限，因此更长的路还是需要读者自己去走完。</p>
<h3 id="这里笔者推荐几个精通Linux必备的技能"><a href="#这里笔者推荐几个精通Linux必备的技能" class="headerlink" title="这里笔者推荐几个精通Linux必备的技能."></a>这里笔者推荐几个精通Linux必备的技能.</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. shell 编程</span><br><span class="line"></span><br><span class="line">2. python 编程</span><br><span class="line"></span><br><span class="line">3. 常用Linux命令学习 find, sed, grep, awk, ssh, vim/emacs, ls, cat等的学习</span><br><span class="line"></span><br><span class="line">4. linux 管道</span><br><span class="line"></span><br><span class="line">5. linux的用户、组与权限设计</span><br><span class="line"></span><br><span class="line">6. linux的初始化工具了解 systemd/sysinit</span><br><span class="line"></span><br><span class="line">7. linux 网络</span><br><span class="line"></span><br><span class="line">8. linux 内核*</span><br></pre></td></tr></table></figure>
<p>有人会问笔者为什么笔者不去自己去写完精通相关的文章，其原因有二:</p>
<ol>
<li>第一笔者自认为水平有限， 不是那种精通的类型， 笔者最多敢说自己是熟悉Linux, 因为Linux是一篇森林， 我所知道的只是深林里的一颗小草。</li>
<li>以上推荐的每一块，有很多人会专门出书或者质量更高的文章来教学，希望此文更多的目的在于指明一些方向，让大家少走弯路， 而非如何交大家如何去走路。</li>
</ol>
]]></content>
      <categories>
        <category>os</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Git提交规范</title>
    <url>/2021/11/12/others/git/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Git是使用最广的代码管理工具，版本控制工具，也是大家最熟知的，如果不了解Git是什么以及怎么使用的，请参考临近的一些文档。<br>本文档主要讨论Git提交代码的一些推荐规范。</p>
<h2 id="一、分支选择"><a href="#一、分支选择" class="headerlink" title="一、分支选择"></a>一、分支选择</h2><p>一个分支一般对应一个比较明确的版本， 大家需要在这个分支上开发，继承各种功能点， 是许多Commit的集合。<br>为了能够更好的适应Git的特点与企业级的分支管理策略， 分支的命名就显得尤为重要。 比如Gitlab可以根据分支名称特点进行设置权限级别， 有些CICD工具根据分支工具进行约束部署行为， 所以合理的分支名称，是一个合格的代码开发者的基本素质要求。<br>推荐的分支名称</p>
<p>feature 功能点分支<br>release&#x2F;production 发布分支<br>test&#x2F;benchmark 测试分支<br>比较典型的用法如：feature&#x2F;weixin_register 作为微信注册的一个功能点， feature&#x2F;email_register 作为邮件注册的一个功能点。<br>而上线的时候可以用 release&#x2F;user_register 作为用户注册的功能，集成之前的微信注册与邮件注册的功能点。</p>
<p>而在分支保护的时候，我们也可以轻松的将 release&#x2F;* 设置为保护分支，仅仅允许固定的工具或者固定的人去提交和merge, 这样就能很好的控制线上在运行的代码的质量。</p>
<h2 id="二、标签选择"><a href="#二、标签选择" class="headerlink" title="二、标签选择"></a>二、标签选择</h2><p>git tag 也是一个比较重要的功能，往往用作一个比较长周期的，例如中间件的迭代，如java代码， 可以用 git tag 与maven版本号保持一致， 可以很方便的回溯代码。<br>这里推荐的tag命名方式为：vx.x.x 其中 v 代表版本的意思， 第一个 x 代表大版本号， 第二个代表小版本， 第三个代表小的修订版本, 这种命名方式，对于一些语言，如golang，就比较友好，golang是根据 tag来读取软件的版本的。</p>
<h2 id="三、Commit-规范"><a href="#三、Commit-规范" class="headerlink" title="三、Commit 规范"></a>三、Commit 规范</h2><ol>
<li>一个Commit只做一件事情</li>
</ol>
<p>这是为了可以在出现问题的情况下可以随时对不同commit进行操作，且同时最大程度的降低对其他地方造成的影响。<br>同时这也是非常知名的一些仓库的一些普遍做法，如 linux kernel的维护方式就是这样的。<br>2. commit （标签）</p>
<p>commit 标签是为了更好的识别与分类commit的内容， 更好的组织commit本身. 常见的commit标签如下：</p>
<ul>
<li>bugfix 如<code> bugfix:fix user name not long enough problem.</code></li>
<li>doc 如 <code>doc: update user related api doc</code></li>
<li>improvement 如 <code>improvement: change the implementation of the - algrithm reduce exec time to 1/10</code></li>
<li>hotfix 用于紧急修复</li>
<li>task 任务</li>
<li>feature 功能特点</li>
</ul>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT 基本原理笔记</title>
    <url>/2021/11/12/others/jwt/</url>
    <content><![CDATA[<h2 id="jwt-简介："><a href="#jwt-简介：" class="headerlink" title="jwt 简介："></a>jwt 简介：</h2><p>jwt 是json web token 的缩写， 主要用来做用户授权或者session登录的事情。<br>JWT 是一种比较流程的协议， 它是由三段式组成的</p>
<ol>
<li>header</li>
<li>body</li>
<li>sign</li>
</ol>
<hr>
<ol>
<li>header 包含了此JWT用的加密算法， body 则为具体的payload.</li>
<li>签名则是由body header经过base64 加密后再进行生成的类似hash&#x2F;md5 值的东西, 主要是为了防止jwt被串改， 保证请求的合法性</li>
</ol>
<h2 id="安全相关"><a href="#安全相关" class="headerlink" title="安全相关"></a>安全相关</h2><p>由于JWT的信息并非经过加密的信息，因此JWT本身不适合存一些比较敏感的信息，比如密码或者secret之类的东西。<br>JWT 存储的信息是确定用户身份而用的， 一般不应该被浏览器中的其他JS读取到， 因此我们可以设置JWT cookie 的 httpOnly 属性为true这样一些基于JS的攻击对TOKEN的窃取就不会生效。</p>
<h2 id="jwt浏览器与服务端的交互流程"><a href="#jwt浏览器与服务端的交互流程" class="headerlink" title="jwt浏览器与服务端的交互流程"></a>jwt浏览器与服务端的交互流程</h2><p>jwt信息一般会被放在浏览器的cookie中， 设置一定的有效日期， 每次客户端发起请求的时候都会吧这个cookie信息发给服务端， 服务端本身可以获取到这个cookie信息，并经过签名校验和解密，可以得到用户信息。</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 接入LDAP小知识</title>
    <url>/2018/12/13/others/ldap/</url>
    <content><![CDATA[<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">ldap.url</span>=ldap://<span class="number">10.1</span>.<span class="number">3.129</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--ldap configuration--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;contextSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.ldap.core.support.LdapContextSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;ldap.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;base&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ou=people,dc=qunhe,dc=cc&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;baseEnvironmentProperties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;com.sun.jndi.ldap.connect.timeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ldapTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.ldap.core.LdapTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;contextSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>biz</category>
      </categories>
      <tags>
        <tag>ldap</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>开放接口的一些小知识</title>
    <url>/2018/12/13/others/openapi/</url>
    <content><![CDATA[<h2 id="open-简介"><a href="#open-简介" class="headerlink" title="open 简介"></a>open 简介</h2><p>open api 是什么？<br>Open API即开放API,也称开放接口 所谓的开放API（OpenAPI）是服务型网站常见的一种应用，网站的服务商将自己的网站服务封装成一系列API（Application Programming Interface，应用编程接口）开放出去，供第三方开发者使用，这种行为就叫做开放网站的API，所开放的API就被称作OpenAPI（开放API）。 （摘自百科，主要为了说一下概念）</p>
<h2 id="open-api-设计常见问题"><a href="#open-api-设计常见问题" class="headerlink" title="open api 设计常见问题"></a>open api 设计常见问题</h2><h3 id="服务提供"><a href="#服务提供" class="headerlink" title="服务提供"></a>服务提供</h3><h4 id="通信方式设计"><a href="#通信方式设计" class="headerlink" title="通信方式设计"></a>通信方式设计</h4><p>常见的设计是：<br>必备的有：app key 与 app secret 签名<br>可选的有： 企业ID， 业务ID。 这些可选的东西一般用来区分业务领域或者权限而存在，确保不同调用者领域与权限的隔离。</p>
<p>app key 与app secret 是我见过最常见，也是必然会出现的一个设计， 在我对接过的十多种API（阿里、腾讯、小米）中， 这这些都是必备的。</p>
<h5 id="app-key-的作用"><a href="#app-key-的作用" class="headerlink" title="app key 的作用"></a>app key 的作用</h5><p>主要是为了防止请求被篡改以及用户识别。一般一个 app key 是用于做用户识别的， 服务提供方一般会存放调用方的一些信息， 并可以通过这个App key 检索到。</p>
<h5 id="app-secret-的作用"><a href="#app-secret-的作用" class="headerlink" title="app secret 的作用"></a>app secret 的作用</h5><p>app secret 主要是用来签名请求的， 签名过的请求如果被修改之后， 则签名就会发生变化，攻击者是不可能知道这个变化的结果的，这样可以有效防止攻击者的攻击。</p>
<p>一般来讲，会对如下领域进行签名：</p>
<ol>
<li>parameter （url 参数）</li>
<li>header （请求头）</li>
</ol>
<p>一般的流程如下：</p>
<ol>
<li>用户在请求参数信息中加入时间信息</li>
<li>用户使用自己的 app secret 对请求进行签名</li>
<li>用户把签名的结果， app key 与其他参数一起放到请求里面传到服务提供方</li>
<li>服务方根据 app key找到自己存放的 app secret， 并对请求进行签名</li>
<li>比对签名信息是否一致， 不一致，则认认为请求受到了非法修改，直接拒绝服务。</li>
<li>校验时间信息， 确保时间信息是在允许的范围内， 否则拒绝提供服务。</li>
</ol>
<p>如何颁发？<br>一般是由服务提供方生成这样的一个键值对， 并把键值对安全的递给调用方。<br>以后 app secret 不会出现在网络传输中，只会用于双方的签名校验。</p>
<h4 id="数据格式与文档"><a href="#数据格式与文档" class="headerlink" title="数据格式与文档"></a>数据格式与文档</h4><ol>
<li>服务地址， 需要准确无误的告诉服务提供方的调用地址</li>
<li>环境设置 （一般API提供方会提供线上与线下两种途径一个用来线上使用，一个用来调试）</li>
<li>参数规定 （对于一个Open API一般来讲参数都是固定的， 不能随意变动，否则会引起双方不小的争执）</li>
<li>结果格式 （结果格式，要写清楚所有出现的结果格式的可能性， 让调用者有办法可以提前对任何可能的结果进行处理）</li>
<li>示例代码 （一段示例代码， 对于开发者是很友好的，大部分开发者喜欢看到这个）</li>
</ol>
<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol>
<li>安全防范</li>
<li>限流</li>
</ol>
<h4 id="秘钥对设计"><a href="#秘钥对设计" class="headerlink" title="秘钥对设计"></a>秘钥对设计</h4><h3 id="安全防范"><a href="#安全防范" class="headerlink" title="安全防范"></a>安全防范</h3><h4 id="1-存放攻击"><a href="#1-存放攻击" class="headerlink" title="1. 存放攻击"></a>1. 存放攻击</h4><p>这个是最常见的一种， 它不需要知道服务提供方与三方的秘钥， 只需要知道，双方的通信方式， 通过分析这种通信方式，来达到窃取信息，或者造成攻击的目的。<br>这种行为的防范方法也是有一些的：<br>在请求里面加上时间信息，对时间信息进行加密签名， 对时间设置可用时间段， 比如1分钟， 过了一分钟，攻击者获取到的信息就不能再用了。</p>
<h4 id="2-秘钥泄露"><a href="#2-秘钥泄露" class="headerlink" title="2. 秘钥泄露"></a>2. 秘钥泄露</h4><p>秘钥泄露对于很多企业来说并不陌生， 一旦泄露对于双方的危害都很大， 而且如果不能及时发现会带来不小的损失， 这种人为泄漏， 很多时候并没有太好的办法。 可以做的事情比较现实的就是更换秘钥。</p>
<h4 id="3-穿透攻击"><a href="#3-穿透攻击" class="headerlink" title="3. 穿透攻击"></a>3. 穿透攻击</h4><p>调用服务方提供的Open API的三方合作者， 有可能对服务提供方造成压力过大的攻击， 这种攻击主要来源于两种途径：</p>
<ol>
<li>三方合作者应用程序问题导致请求放大， 导致的调用次数过高</li>
<li>三方合作者把相关接口直接暴露到外部， 这样会带来潜在的问题， 在攻击者识别这样的接口之后，疯狂发起攻击， 服务提供方的服务器会承受巨大压力，甚至crash</li>
</ol>
<p>对于穿透的攻击： 服务提供方能做的最常见的方案就是限流， 另外就是流量识别，<br>在流量异常的时候对API接口本身做一些限制</p>
<p>当然安全防范确实还有很多需要考虑的点，一般都会结合攻击的特点， 对于攻击类型进行定制防范， 对于业界常见的防范措施，一般都是要默认加入的。</p>
<h2 id="个人的开源项目"><a href="#个人的开源项目" class="headerlink" title="个人的开源项目"></a>个人的开源项目</h2><p><a href="https://github.com/winjeg/openapi">openapi</a><br>它主要解决的问题是： 简化服务端提供API的流程</p>
<ol>
<li>封装服务端API签名流程</li>
<li>封装服务端颁发键值对的流程</li>
<li>封装服务端签名校验机制</li>
<li>提供简单的安全防范</li>
</ol>
<p>这个工具是用golang设计的， 因此只适用于golang的项目。<br>由于这个工具是基于 <code>http.Request</code> 进行设计的， 因此理论上讲兼容所有的web框架， 如 <code>gin</code>, <code>iris</code>, <code>beego</code>等， 我在readme里面提供了<code>iris</code>的示例代码</p>
<p> 如果使用mysql来存放app key 和secret信息， 可以建如下的一个表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `app` (</span><br><span class="line">  `app_key` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `app_secret` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `created` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `updated` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`app_key`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<p>如果已经存在这样一个类似的表也可以不用建立，在代码中指定即可</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r, err := openapi.CheckValid(req,</span><br><span class="line"><span class="comment">// default implementation is via sql, to fetch the secrect</span></span><br><span class="line">    openapi.SqlSecretKeeper&#123;</span><br><span class="line">           Db:        store.GetDb(),   <span class="comment">// 可以使用的 mysql 连接</span></span><br><span class="line">           TableName: <span class="string">&quot;app&quot;</span>,       <span class="comment">// 存放app key 和secrets的表名</span></span><br><span class="line">           KeyCol:    <span class="string">&quot;app_key&quot;</span>,   <span class="comment">// app key 的列名</span></span><br><span class="line">           SecretCol: <span class="string">&quot;app_secret&quot;</span>, <span class="comment">// app secret的列名</span></span><br><span class="line">           AppKey:    k,           <span class="comment">// 用户使用的 app key</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当然如果您已经封装好了app key 与secret的逻辑， 也可以自己实现如下接口</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// the interface to get the secret</span></span><br><span class="line"><span class="keyword">type</span> SecretKeeper <span class="keyword">interface</span> &#123;</span><br><span class="line">	GetSecret() (<span class="type">string</span>, <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>对于使用了web 框架的，只需要写一个middleware， 并启用就行了， 示例代码如下：</p>
<p>创建middleware</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// create a middle ware for iris</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OpenApiHandler</span><span class="params">(ctx iris.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sign header? to prevent header being modified by others</span></span><br><span class="line">    <span class="comment">// openapi.SignHeader(true)</span></span><br><span class="line"></span><br><span class="line">	req := ctx.Request()</span><br><span class="line">	<span class="comment">// you can put the key somewhere in the header or url params</span></span><br><span class="line">	k := ctx.URLParam(<span class="string">&quot;app_key&quot;</span>)</span><br><span class="line">	r, err := openapi.CheckValid(req,</span><br><span class="line">	<span class="comment">// default implementation is via sql, to fetch the secrect</span></span><br><span class="line">	    openapi.SqlSecretKeeper&#123;</span><br><span class="line">            Db:        store.GetDb(),</span><br><span class="line">            TableName: <span class="string">&quot;app&quot;</span>,       <span class="comment">// the name of table where you store all your app  keys and  secretcs</span></span><br><span class="line">            KeyCol:    <span class="string">&quot;app_key&quot;</span>,   <span class="comment">// the column name of the app keys</span></span><br><span class="line">            SecretCol: <span class="string">&quot;app_secret&quot;</span>, <span class="comment">// the column name of the app secrets</span></span><br><span class="line">            AppKey:    k,           <span class="comment">// the app key that the client used</span></span><br><span class="line">	&#125;)</span><br><span class="line">	logError(err)</span><br><span class="line">	<span class="keyword">if</span> r &#123;</span><br><span class="line">	    <span class="comment">// verfy success, continue the request</span></span><br><span class="line">		ctx.Next()</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	    <span class="comment">// verify fail, stop the request and return</span></span><br><span class="line">		ctx.Text(err.Error())</span><br><span class="line">		ctx.StopExecution()</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>启用middleware</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// use the middle ware somewhere</span></span><br><span class="line"><span class="comment">// so all the apis under this group should be</span></span><br><span class="line"><span class="comment">// called with signed result and app key</span></span><br><span class="line">	openApiGroup := app.Party(<span class="string">&quot;/open&quot;</span>)</span><br><span class="line">	openApiGroup.Use(OpenApiHandler)</span><br><span class="line">	&#123;</span><br><span class="line">		openApiGroup.Get(<span class="string">&quot;/app&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx iris.Context)</span></span> &#123;</span><br><span class="line">			ctx.Text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>是不是很简单，如果文中有误，或者缺失的内容欢迎各种批评教育。</p>
<p>如果您能读到这里， 我会感觉到十分荣幸，谢谢您的关注。</p>
]]></content>
      <categories>
        <category>biz</category>
      </categories>
      <tags>
        <tag>biz</tag>
        <tag>openapi</tag>
      </tags>
  </entry>
  <entry>
    <title>双拼输入法是什么</title>
    <url>/2018/12/13/others/shuangpin/</url>
    <content><![CDATA[<h2 id="双拼输入法是什么"><a href="#双拼输入法是什么" class="headerlink" title="双拼输入法是什么"></a>双拼输入法是什么</h2><p>在了解双拼输入法的时候我们先了解下一拼音输入法，目前所有的拼音输入法的基础都是拼音， 根据一个字的读音来确定这个字怎么在键盘上输入。<br>如: 你好 为 “nihao”， 这就是拼音输入法。 顾名思义， 双拼输入法就是打一个字（拼音）的时候最多最少都是需要至少按下两次键盘， 他是拼音输入法的一种。<br>每种双拼输入法，都是使用一定的码表的， 如果您使用双拼输入法, 必然会涉及到码表的选择，如果你少输入 双拼 这个词语， 那么按照自然码码表， 你输入的<br>内容为：udpn， 如果使用全拼则输入的内容为： shuangpin 相较于全拼，双拼输入法只需要键入4次，而全拼则需要键入9次， 这就是双拼的明显优势。</p>
<h2 id="双拼相较于全拼的优劣势"><a href="#双拼相较于全拼的优劣势" class="headerlink" title="双拼相较于全拼的优劣势"></a>双拼相较于全拼的优劣势</h2><p>凡事都有两面性，虽然双拼较晚被发现，并且使用，但是双拼本身并非毫无缺点，双拼本身会具备所有拼音输入法的缺点，就是对于重音字而言，都是可能需要经过翻页才能找到字本身的，而且一般都有这种候选项这种概念，要用户自己去选择是第几个候选项的字。相对而言五笔编码可以唯一确定一个字，就不需要选择候选项这一步了。</p>
<p>由于双拼出现时机较晚， 因此，它的出现肯定是为了解决全拼中存在的一些既定问题而出现的，下面我们来详细谈一下双拼与全拼的优劣势。</p>
<h3 id="相较于全拼的优势"><a href="#相较于全拼的优势" class="headerlink" title="相较于全拼的优势"></a>相较于全拼的优势</h3><ol>
<li>双拼整体而言，每个单独的拼音只需要最多键入两次，对于平均情况而言可以减少至少 50%的键入， 这样可以大大提高打字速度。</li>
<li>双拼输入法打字节奏明朗，每个字都是单独的两次按键，比较顺手节奏感好。</li>
<li>相较于大部分人不会双拼而言，学会双拼，别人可以减少对你隐私的窥探，常用词频率不会被不用双拼的人监测到。</li>
</ol>
<h3 id="相较于全拼的劣势"><a href="#相较于全拼的劣势" class="headerlink" title="相较于全拼的劣势"></a>相较于全拼的劣势</h3><ol>
<li>全拼输入法基本上是所有人入门使用手机或者电脑都使用的输入法, 学习成本极低，而双拼输入法则有一定的学习成本</li>
<li>全拼输入法有超级简拼，而双拼输入法则没有，但超级简拼应用的场景似乎有限。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总体而言， 双拼是优于全拼的，如果您对打字速度有追求，又不想投入太多精力去学习其他输入法的话，双拼无疑是您最好的选择。</span><br></pre></td></tr></table></figure>

<h2 id="双拼的规则"><a href="#双拼的规则" class="headerlink" title="双拼的规则"></a>双拼的规则</h2><h3 id="双拼的拆拼音规则"><a href="#双拼的拆拼音规则" class="headerlink" title="双拼的拆拼音规则"></a>双拼的拆拼音规则</h3><p>双拼双拼， 自然每个拼音只需要按两次键，双拼输入法的主要规则是声母+韵母，即声母按一次键，韵母按一次键盘。 这跟我们在小学的时候学习的拼音规则是一模一样的。所以对于一般人而言，记忆这个规则应该是没有代价的。<br>但是这不意味着在享受双拼输入的同时，是没有代价的。我们知道键盘上的键几乎覆盖了所有的声母，维度三个声母是没有覆盖的，即 zh, ch, sh。<br>这三个生母在键盘上都对应着双键， 如果再加上韵母至少会按下三次键， 这显然是不符合双拼之道的。所以，这三个字母肯定都有相应的对应关系， 只需要一次按键即可按出三个声母中的任意一个。韵母与声母一样在字母数超过1的时候， 必然需要把这个整体的韵母对应到其中一个键上去。 比如 装 这个词语，它的全拼是 zhuang, 其中装的声母是zh 韵母是uang, 这显然是都超过一个字母的， 所以 zh 一定在某个键上， uang, 也一定在某个键上，这些生母与韵母对应的键的对应关系的表， 我们称之为码表。<br>通常而言，流行的有十多种码表， 你可以选择其中的一种去使用。当然至少你遵守这个规则，很多输入法都可以支持你自定义自己的码表。</p>
<h2 id="常见的双拼的码表"><a href="#常见的双拼的码表" class="headerlink" title="常见的双拼的码表"></a>常见的双拼的码表</h2><p>对于双拼而言，并没有组织来定义一个统一的码表， 这也是为什么双拼码表方案有很多的原因，选择码表的时候， 大家可以根据自己的喜好以及记忆的难易程度，来确定自己选择哪个码表，码表之间并没有优劣势而言， 下面是一些常见的码表：</p>
<h3 id="1-小鹤双拼"><a href="#1-小鹤双拼" class="headerlink" title="1. 小鹤双拼"></a>1. 小鹤双拼</h3><p><img src="https://user-images.githubusercontent.com/7270177/86505478-bafdfa00-bdf7-11ea-81ed-cba619307445.png" alt="xiaohe"></p>
<h3 id="2-搜狗双拼"><a href="#2-搜狗双拼" class="headerlink" title="2. 搜狗双拼"></a>2. 搜狗双拼</h3><p><img src="https://user-images.githubusercontent.com/7270177/86505513-247e0880-bdf8-11ea-9007-fd1b0234c6da.png" alt="sougou"></p>
<h3 id="3-微软双拼"><a href="#3-微软双拼" class="headerlink" title="3. 微软双拼"></a>3. 微软双拼</h3><p><img src="https://user-images.githubusercontent.com/7270177/86505521-45def480-bdf8-11ea-9c39-4e9109f95654.png" alt="ms"></p>
<h3 id="4-自然码"><a href="#4-自然码" class="headerlink" title="4. 自然码"></a>4. 自然码</h3><p><img src="https://user-images.githubusercontent.com/7270177/86505485-da952280-bdf7-11ea-84b7-26e732485417.png" alt="ims"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学习双拼一定要下决心，自从决定的那一刻起，自己的手机、电脑上的输入法一定要调整成双拼的方式， 这样，您最快可以在半小时内掌握，最慢也就三天就掌握了。<br>如果您不痛下决心， 那么您是不可能轻松就学会的， 在信息时代这是一门非常有用的技能， 尤其你身为一个中国人，这个就更有用了。</p>
<p>对于大部分人而言，全拼输入肯定是能满足需求的， 如果你觉得自己还有一定的输入速度的追求， 还想在键入上偷个懒， 而有不想付出太多的精力去学习输入法的情况下。<br>双拼是您最好的选择。</p>
]]></content>
      <categories>
        <category>biz</category>
      </categories>
      <tags>
        <tag>ldap</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>关于音频文件的一些小知识</title>
    <url>/2013/03/13/others/sound/</url>
    <content><![CDATA[<h1 id="音频相关知识"><a href="#音频相关知识" class="headerlink" title="音频相关知识"></a>音频相关知识</h1><p>我们常用的音频格式，大部分都是基于音频CD（采样率44.1khz、采样精度16bit，2通道）的<br>192k是一个分水岭那个，192K以下的，音质损伤比较大</p>
<h2 id="比特率"><a href="#比特率" class="headerlink" title="比特率"></a>比特率</h2><ol>
<li><code>CBR</code> Constants Bit Rate，恒定比特率</li>
<li><code>VBR</code> Variable Bit Rate，动态比特率<br>VBR的方式是根据音频源文件中声音的具体频率，自动修正一些比特率，以达到在同样比特率效果中，达到更小的文件</li>
</ol>
<h2 id="采样率"><a href="#采样率" class="headerlink" title="采样率"></a>采样率</h2><h3 id="中高低品质的采样率与比特率"><a href="#中高低品质的采样率与比特率" class="headerlink" title="中高低品质的采样率与比特率"></a>中高低品质的采样率与比特率</h3><table>
<thead>
<tr>
<th>项目</th>
<th>低品质</th>
<th>高品质</th>
<th>无损品质</th>
</tr>
</thead>
<tbody><tr>
<td>Bitrate</td>
<td>128KBit&#x2F;s</td>
<td>320KBit&#x2F;s</td>
<td>916KBit&#x2F;s</td>
</tr>
<tr>
<td>采样率</td>
<td>44100Hz</td>
<td>44100Hz</td>
<td>44100Hz</td>
</tr>
</tbody></table>
<h2 id="音频文件中的各种格式的对比"><a href="#音频文件中的各种格式的对比" class="headerlink" title="音频文件中的各种格式的对比"></a>音频文件中的各种格式的对比</h2><h3 id="无损与有损"><a href="#无损与有损" class="headerlink" title="无损与有损"></a>无损与有损</h3><p>简单的来说，有损压缩就是通过删除一些已有数据中不太重要的数据来达到压缩目的；无损压缩就是通过优化排列方式来达到压缩目的</p>
<h3 id="无损格式"><a href="#无损格式" class="headerlink" title="无损格式"></a>无损格式</h3><p>APE(Monkey’s audio)、FLAC(Free Lossless<br>Audio Codec)两种。前者拥有更小的比特率，后者则更容易传播，其区别就是，FLAC可以在传播中断后，已传播的数据就可以直接使用。</p>
<h2 id="格式中的转换"><a href="#格式中的转换" class="headerlink" title="格式中的转换"></a>格式中的转换</h2>]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>multi-media</tag>
      </tags>
  </entry>
  <entry>
    <title>Wifi DISPLAY 与Miracast那些事</title>
    <url>/2021/12/13/others/wifi_disp/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Miracast本质就是一个基于Wi-Fi的网络应用。这个应用包括服务端和客户端。服务端和客户端必须支持RTP&#x2F;RTSP等网络协议和相应的编解码技术。<br>Wi-Fi Display经常和Miracast联系在一起。实际上，Miracast是Wi-Fi联盟（Wi-Fi Alliance）对支持Wi-Fi Display功能的设备的认证名称。<br>通过Miracast认证的设备将在最大程度内保持对Wi-Fi Display功能的支持和兼容。</p>
<h2 id="Mircast-依赖的无线网卡的技术特性"><a href="#Mircast-依赖的无线网卡的技术特性" class="headerlink" title="Mircast 依赖的无线网卡的技术特性"></a>Mircast 依赖的无线网卡的技术特性</h2><ol>
<li>Wi-Fi Direct，也就是Wi-Fi P2P。它支持在没有AP（Access Point, 热点， 即没有连接）的情况下，两个Wi-Fi设备直连并通信。</li>
<li>Wi-Fi Protected Setup：用于帮助用户自动配置Wi-Fi网络、添加Wi-Fi设备等。</li>
<li>11n&#x2F;WMM&#x2F;WPA2：<ul>
<li>11n就是802.11n协议，它将11a和11g提供的Wi-Fi传输速率从56Mbps提升到300甚至600Mbps。</li>
<li>WMM是Wi-Fi Multimedia的缩写，是一种针对实时视音频数据的QoS服务。</li>
<li>WPA2意为Wi-Fi Protected Acess第二版，主要用来给传输的数据进行加密保护。</li>
</ul>
</li>
</ol>
<ul>
<li>Miracast一个重要功能就是支持Wi-Fi Direct。但它也考虑了无线网络环境中存在AP设备的情况下，设备之间的互联问题。读者可参考如图2所示的四种拓扑结构。</li>
<li>Wi-Fi Direct：该功能由Android中的WifiP2pService来管理和控制。Wi-Fi Multimedia：为了支持Miracast，Android 4.2对MultiMedia系统也进行了修改。</li>
</ul>
<p>发送端(Wifi Display, WFD)<br>只要网卡支持， 找个发送端应用就可以投屏</p>
<p>接收端(Wifi Sink Function)<br>只要网卡支持， 找个接收端应用打开，就可以设置<br>linux 里面甚至有可以打开的选项</p>
<p>参考资料<br><a href="https://www.21ic.com/tougao/article/2883.html">https://www.21ic.com/tougao/article/2883.html</a><br><a href="https://www.pianshen.com/article/3595659134/">https://www.pianshen.com/article/3595659134/</a><br><a href="https://blog.csdn.net/shenghuo59/article/details/81981377">https://blog.csdn.net/shenghuo59/article/details/81981377</a></p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>multi-media</tag>
      </tags>
  </entry>
  <entry>
    <title>Happy Year 2020 (2020快乐)</title>
    <url>/2020/01/01/others/year2020/</url>
    <content><![CDATA[<h1 id="2-0-2-0-–-快-乐"><a href="#2-0-2-0-–-快-乐" class="headerlink" title="2 0 2 0 – 快 乐 : )     ; )"></a>2 0 2 0 – 快 乐 : )     ; )</h1><p><img src="https://user-images.githubusercontent.com/7270177/71637837-94fd6e80-2c89-11ea-86b8-b5dc6636d00b.png" alt="image"></p>
<hr>
<h1 id="每一个清晨，都是一个美好的开始，每一个清晨，都意味着前进的脚步，不管昨天怎么样，今天我们只做最好的自己，带着微笑，带着善良，带着梦想起航。再见，2019！你好，2020！"><a href="#每一个清晨，都是一个美好的开始，每一个清晨，都意味着前进的脚步，不管昨天怎么样，今天我们只做最好的自己，带着微笑，带着善良，带着梦想起航。再见，2019！你好，2020！" class="headerlink" title="每一个清晨，都是一个美好的开始，每一个清晨，都意味着前进的脚步，不管昨天怎么样，今天我们只做最好的自己，带着微笑，带着善良，带着梦想起航。再见，2019！你好，2020！"></a>每一个清晨，都是一个美好的开始，每一个清晨，都意味着前进的脚步，不管昨天怎么样，今天我们只做最好的自己，带着微笑，带着善良，带着梦想起航。再见，2019！你好，2020！</h1><hr>
<p><img src="https://user-images.githubusercontent.com/7270177/71637861-55835200-2c8a-11ea-8a2e-938e3c13df35.png" alt="image"></p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>Year2020</tag>
      </tags>
  </entry>
  <entry>
    <title>简而美的 国产MySQL GUI 工具 Tables+</title>
    <url>/2022/11/19/software/table_plus/</url>
    <content><![CDATA[<p>Tables+ 是一款面向大众程序员开放的， 一款MySQL客户端， 它使用electron编写， 以保证此软件的跨平台可用， 另外，它是一款纯个人打造软件， 也希望大家多予以支持，以便此软件能够更好的发展下去。</p>
<p> MySQL已经毫无疑问的成为了中小网站的首选存储方案，MySQL的工具，市面上现有的MySQL客户端还是比较多的。市面上现有的一些MySQL工具想必大家也不陌生。但毫无疑问，这些都是几十年的老工具了。很少会给人焕然一新的感觉，而且很多都已经与现在流行的界面元素脱节， Tables+ 的出现，无疑是弥补了这些缺失， 更重要的是它是一款相对完整的国产 MySQL客户端软件。</p>
<h2 id="功能列表"><a href="#功能列表" class="headerlink" title="功能列表"></a>功能列表</h2><p>下面通过一些典型的软件界面截图，来介绍此软件的功能, 附软件<a href="https://github.com/gridsx/gridsx.github.io/releases/tag/v1.0.0">下载地址</a><br><a href="https://github.com/gridsx/gridsx.github.io/releases/tag/v1.0.0">备用下载地址</a></p>
<h3 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2bd8ab64a35f4af982773cb269bc1ce8~tplv-k3u1fbpfcp-watermark.image" alt="conn_mgr.png"><br>您可以通过连接管理-&gt;添加MySQL连接，进行MySQL连接信息的录入。</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e9e4454702c4d61b1471def4d2140c3~tplv-k3u1fbpfcp-watermark.image" alt="home.png"><br> 录入完毕后，如果您需要删除或者修改，可以在软件首页，去删除这些已经录入的连接信息。<br> 如果您录入了非常多的连接信息， 您可以通过首页右上角的搜索按钮，对您录入的连接进行搜索过滤。</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/be0bcaa8a1b34206a620a9f58a280bd6~tplv-k3u1fbpfcp-watermark.image" alt="query.png"><br>点击首页卡片， 可以轻松进入数据库查询界面， 这里您可以输入SQL进行查询，查看执行计划， 也可以保存和格式化您的SQL。</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d92473e2b59e4cffb14ee2cc62511e42~tplv-k3u1fbpfcp-watermark.image" alt="tables.png"><br>点击左侧表列表，您将看到此库下面的所有的表， 如果您的表数量过多，还可以进行分组管理哦，这是一个非常方便的功能， 这里可以进行常见的双击查看表数据，删除表， 新建表等操作， 也可以对打开的表的数据进行修改保存。</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3644067fe88345d1952fb53b6e3b1d1e~tplv-k3u1fbpfcp-watermark.image" alt="design.png"></p>
<p>在设计表界面， 您可以随意的修改表的列， 索引， 以及其他表选项， 以便满足您的表设计需求。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/811d94f3b6754106bd7459a282afca62~tplv-k3u1fbpfcp-watermark.image" alt="user_sql.png"><br>最后， 如果您想查看自己保存的SQL在哪，可以点击用户SQL，查看自己保存的SQL。<br>如果您想查看SQL内容，可以直接点击这里的卡片，进入查询页面，即可查看和查询。</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9bb421d847546df87604c2681706262~tplv-k3u1fbpfcp-watermark.image" alt="lang.png"><br>最后， 如果您想对此软件的外观，和语言进行一定的修改，您可以通过文件-&gt; 设置， 找到您能设置的一些选项。</p>
<h2 id="设计理念：简单和美"><a href="#设计理念：简单和美" class="headerlink" title="设计理念：简单和美"></a>设计理念：简单和美</h2><p>Tables+ 对于多余的功能，绝对不设计， 比如不常用的函数， 不常用的存储过程， 以及触发器等等。<br>这些已经被很多互联网公司弃用， 因此，在此软件中不会特别的支持这些已经过时了的功能。 软件本身采用了比较现代的界面设计语言， 很多功能都经过精心调试和设计。</p>
<h2 id="软件-RoadMap"><a href="#软件-RoadMap" class="headerlink" title="软件 RoadMap:"></a>软件 RoadMap:</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7bdde8cb2f164dd0a73481ce44be1921~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><p>如果您对此软件有疑问，或者有兴趣， 可以 <a href="mailto://winjeg@qq.com">邮件</a> 我，说明您的意向。</p>
]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title>Big table 笔记</title>
    <url>/2015/09/13/storage/big_table/</url>
    <content><![CDATA[<p>Big Table 是一种稀疏的多维分布式的有序Map</p>
<p>Big Table 的基本数据结构<br><img src="https://user-images.githubusercontent.com/7270177/59737028-a56e6e80-928e-11e9-8509-18415344cfcc.png" alt="image"></p>
<p>Tablet Server 的服务方式<br><img src="https://user-images.githubusercontent.com/7270177/59737043-b4552100-928e-11e9-9da6-85a4d186ebc6.png" alt="image"><br>Compaction 往往发生是为了合并一些数据，节省内存空间(memtable)， 与Log文件的空间需要进行Compation</p>
<p>其他一些基础组件<br><img src="https://user-images.githubusercontent.com/7270177/59737081-d0f15900-928e-11e9-9e8f-8715a5742311.png" alt="image"></p>
<p>当一些基础的SSTable分开或者合并的时候， 读写仍然可以同步进行</p>
]]></content>
      <categories>
        <category>storage</category>
        <category>bigtable</category>
      </categories>
      <tags>
        <tag>bigtable</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDb 草记</title>
    <url>/2016/07/13/storage/mongodb/</url>
    <content><![CDATA[<p>备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongodump -h dbhost -d dbname -o dbdirectory</span><br></pre></td></tr></table></figure>
<p>恢复</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mongorestore -h host --db database --<span class="built_in">dir</span> mongodata/database</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>storage</category>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL笔记</title>
    <url>/2015/09/13/storage/mysql/</url>
    <content><![CDATA[<h1 id="Mysql-笔记"><a href="#Mysql-笔记" class="headerlink" title="Mysql 笔记"></a>Mysql 笔记</h1><p>此文档下将会放mysql 运维， 使用，应用等相关的文档， 也包括一些高级应用的知识</p>
<h2 id="mysql-使用"><a href="#mysql-使用" class="headerlink" title="mysql 使用"></a>mysql 使用</h2><p><a href="./mysql/catlog.md">MySQL 应用速成入门</a></p>
<h2 id="mysql-运维"><a href="#mysql-运维" class="headerlink" title="mysql 运维"></a>mysql 运维</h2><h3 id="Centos7-安装Mysql"><a href="#Centos7-安装Mysql" class="headerlink" title="Centos7 安装Mysql"></a>Centos7 安装Mysql</h3><p><a href="./mysql/install.md">Centos7 安装配置 mysql5.6</a></p>
<h3 id="Mysql-忘记Root密码"><a href="#Mysql-忘记Root密码" class="headerlink" title="Mysql 忘记Root密码"></a>Mysql 忘记Root密码</h3><p><a href="./mysql/passwd.md">MySQL密码找回</a></p>
<h2 id="mysql-规范"><a href="#mysql-规范" class="headerlink" title="mysql 规范"></a>mysql 规范</h2><p><a href="./mysql/standards.md">MySQL使用规范</a></p>
<h2 id="mysql-优化"><a href="#mysql-优化" class="headerlink" title="mysql 优化"></a>mysql 优化</h2><h2 id="mysql-应用"><a href="#mysql-应用" class="headerlink" title="mysql 应用"></a>mysql 应用</h2><h3 id="如何做数据库分库分表"><a href="#如何做数据库分库分表" class="headerlink" title="如何做数据库分库分表"></a>如何做数据库分库分表</h3><h4 id="1-基于客户端路由"><a href="#1-基于客户端路由" class="headerlink" title="1. 基于客户端路由"></a>1. 基于客户端路由</h4><h4 id="2-基于代理和HA的服务的路由"><a href="#2-基于代理和HA的服务的路由" class="headerlink" title="2. 基于代理和HA的服务的路由"></a>2. 基于代理和HA的服务的路由</h4><h3 id="常见的分库分表的场景"><a href="#常见的分库分表的场景" class="headerlink" title="常见的分库分表的场景"></a>常见的分库分表的场景</h3>]]></content>
      <categories>
        <category>storage</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>gorocksdb 的安装与使用</title>
    <url>/2018/08/13/storage/rocksdb/</url>
    <content><![CDATA[<h2 id="安装rocksdb"><a href="#安装rocksdb" class="headerlink" title="安装rocksdb"></a>安装rocksdb</h2><p><a href="https://github.com/facebook/rocksdb">官方参考安装方法</a></p>
<p>去下载 rocksdb <a href="https://github.com/facebook/rocksdb/releases">最新的发行版</a><br>如下代码:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/facebook/rocksdb/archive/v5.14.2.tar.gz</span><br><span class="line">tar xpf  v5.14.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> rocksdb-5.14.2/</span><br><span class="line">make shared_lib -j9</span><br></pre></td></tr></table></figure>
<p>如果编译过程中出错如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">util/status.cc: In static member function ‘static const char* rocksdb::Status::CopyState(const char*)’:</span><br><span class="line">util/status.cc:28:15: error: ‘char* strncpy(char*, const char*, size_t)’ output truncated before terminating nul copying as many bytes from a string as its length [-Werror=stringop-truncation]</span><br><span class="line">   std::strncpy(result, state, cch - 1);</span><br><span class="line">   ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">util/status.cc:19:18: note: length computed here</span><br><span class="line">       std::strlen(state) + 1; // +1 for the null terminator</span><br><span class="line">       ~~~~~~~~~~~^~~~~~~</span><br><span class="line">cc1plus: all warnings being treated as errors</span><br><span class="line">make: *** [Makefile:650: shared-objects/util/status.o] Error 1</span><br></pre></td></tr></table></figure>
<p>需要打开<code>util/status.cc</code>修改第 28行改为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">std::<span class="built_in">strncpy</span>(result, state, cch);</span><br></pre></td></tr></table></figure>
<p>然后继续编译完成<br>然后执行如下命令进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> includes</span><br><span class="line"><span class="comment"># 拷贝头文件到 include目录</span></span><br><span class="line"><span class="built_in">cp</span> -r rocksdb /usr/lib/</span><br><span class="line">sudo su</span><br><span class="line"><span class="built_in">cp</span> librocksdb.so.5.14.2 /usr/lib/</span><br><span class="line"><span class="built_in">cd</span> /usr/lib</span><br><span class="line"><span class="built_in">ln</span> -sf librocksdb.so.5.14.2 librocksdb.so</span><br><span class="line"><span class="built_in">ln</span> -sf librocksdb.so.5.14.2 librocksdb.so.5</span><br><span class="line"><span class="built_in">ln</span> -sf librocksdb.so.5.14.2 librocksdb.so.5.14</span><br></pre></td></tr></table></figure>

<h2 id="安装其他依赖"><a href="#安装其他依赖" class="headerlink" title="安装其他依赖"></a>安装其他依赖</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zlib - a library for data compression.</span><br><span class="line">bzip2 - a library for data compression.</span><br><span class="line">lz4 - a library for extremely fast data compression.</span><br><span class="line">snappy - a library for fast data compression.</span><br><span class="line">zstandard - Fast real-time compression algorithm.</span><br></pre></td></tr></table></figure>

<h2 id="安装-gorocksdb"><a href="#安装-gorocksdb" class="headerlink" title="安装 gorocksdb"></a>安装 gorocksdb</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CGO_CFLAGS=&quot;-I/path/to/rocksdb/include&quot; \</span><br><span class="line">CGO_LDFLAGS=&quot;-L/path/to/rocksdb -lrocksdb -lstdc++ -lm -lz -lbz2 -lsnappy -llz4 -lzstd&quot; \</span><br><span class="line">  go get github.com/tecbot/gorocksdb</span><br></pre></td></tr></table></figure>

<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/tecbot/gorocksdb&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    opts := gorocksdb.NewDefaultOptions()</span><br><span class="line">    opts.SetCreateIfMissing(<span class="literal">true</span>)</span><br><span class="line">    opts.SetCompression(gorocksdb.NoCompression)</span><br><span class="line">    opts.SetWriteBufferSize(<span class="number">671088640</span>)</span><br><span class="line">    db, err := gorocksdb.OpenDb(opts, <span class="string">&quot;test&quot;</span>)</span><br><span class="line">    wopt := gorocksdb.NewDefaultWriteOptions()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Printf(<span class="string">&quot;%v\n&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> db.Close()</span><br><span class="line">    db.Put(wopt, []<span class="type">byte</span>(<span class="string">&quot;data&quot;</span>), []<span class="type">byte</span>(<span class="string">&quot;value&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>storage</category>
        <category>rocksdb</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>rocksdb</tag>
      </tags>
  </entry>
  <entry>
    <title>TDDL 简介及入门使用</title>
    <url>/2016/08/13/storage/tddl/</url>
    <content><![CDATA[<h2 id="TDDL简介"><a href="#TDDL简介" class="headerlink" title="TDDL简介"></a>TDDL简介</h2><p>TDDL 是淘宝开源的一个用于访问数据库的中间件， 它集成了分库分表， 读写分离，权重调配，动态数据源配置等功能。封装 <code>jdbc </code> 的 <code>DataSource</code>给用户提供统一的基于客户端的使用。它只是一组Jar包， 并不是单独的服务，目前已经被一些公司默默使用， 因为官方至今为止没有维护这一块的开源社区， 大多数使用也停留在各个公司自己研究的阶段。</p>
<p>TDDL 最新的版本是个<a href="https://github.com/loye168/tddl5">泄露的版本</a>, 有兴趣的同学可以下载源代码研究一下。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.taobao.tddl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tddl-matrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.taobao.tddl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tddl-config-diamond<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.taobao.tddl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tddl-parser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.taobao.tddl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tddl-sequence<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="注册bean"><a href="#注册bean" class="headerlink" title="注册bean"></a>注册bean</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span> <span class="keyword">throws</span> TddlException &#123;</span><br><span class="line">    <span class="type">TDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TDataSource</span>();</span><br><span class="line">    dataSource.setAppName(<span class="string">&quot;appName&quot;</span>);</span><br><span class="line">    dataSource.init();</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完成以上两步之后，它的使用是跟普通的 <code>Datasource</code> 是一样的, 可以很方便的与各种ORM框架集成。</p>
<h2 id="三层架构（可独立使用）："><a href="#三层架构（可独立使用）：" class="headerlink" title="三层架构（可独立使用）："></a>三层架构（可独立使用）：</h2><h3 id="Matrix（TDataSource）"><a href="#Matrix（TDataSource）" class="headerlink" title="Matrix（TDataSource）"></a>Matrix（TDataSource）</h3><p><code>matrix</code> 是整个 <code>datasource</code>的入口， 用户使用的入口。它是一种标准接口的多数据源多功能的实现。<br>这里控制了一个数据源所有的对应的数据库的信息， 下面可以持有多个 <code>group</code>, 而 <code>group</code>下面有可以有多个 <code>atom</code>。<br>它也是唯一支持分库分表实现的一层， 用户一般使用的是这一层， 如果不需要其他规则和功能也可以使用这一层。</p>
<h3 id="Group（TGroupDataSource）"><a href="#Group（TGroupDataSource）" class="headerlink" title="Group（TGroupDataSource）"></a>Group（TGroupDataSource）</h3><p><code>group</code> 是逻辑数据分组的概念， 一个 <code>group</code> 下的数据一般都是相同的， 不同的是对数据源的配置， 不同实际数据源， 对应不同的读写属性， 优先级， 权重等</p>
<h3 id="Atom（TAtomDataSource）"><a href="#Atom（TAtomDataSource）" class="headerlink" title="Atom（TAtomDataSource）"></a>Atom（TAtomDataSource）</h3><p><code>atom</code>  是对实际物理数据库的一种抽象。 它持有的是实际的物理数据库的信息，以及这个物理数据库所相关的 <code>druid</code> 连接池的配置信息。<br>它隶属于 <code>group</code>。</p>
<h2 id="不支持的点"><a href="#不支持的点" class="headerlink" title="不支持的点"></a>不支持的点</h2><ol>
<li>不支持跨库事务</li>
<li>不支持很奇怪的SQL</li>
<li>不推荐使用跨库JOIN的功能</li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li><code>tddl-manager</code> 模块是一个管理TDDL数据源的界面UI</li>
<li><code>tddl-server</code> 是mysql协议的一个实现， 底层使用TDDL数据源</li>
</ol>
]]></content>
      <categories>
        <category>storage</category>
        <category>middleware</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>middleware</tag>
      </tags>
  </entry>
  <entry>
    <title>TDDL 常见配置详解</title>
    <url>/2016/09/13/storage/tddl_config/</url>
    <content><![CDATA[<h2 id="TDDL-简介"><a href="#TDDL-简介" class="headerlink" title="TDDL 简介"></a>TDDL 简介</h2><p>TDDL 是淘宝开源的一个基于Client做的， 用于如下特性的一个中间件：</p>
<ol>
<li>读写分离</li>
<li>权重调配</li>
<li>分库分表</li>
<li>流控&#x2F;限速</li>
<li>数据库信息配置化</li>
<li>查询重写与优化<br>TDDL 最新的版本是个<a href="https://github.com/loye168/tddl5">泄露的版本</a>, 有兴趣的同学可以下载源代码研究一下。</li>
</ol>
<p>TDDL的配置均以Key-Value 形式存储， 拥有 内存-磁盘-远程 三级降级措施, 官方默认存储配置的地方为<code>Diamond</code>服务器。<br>由于TDDL的配置规则相对复杂， 也许很多人并不能入门， 此文档就是给大家一个配置入门的方案。</p>
<h2 id="变量列表说明"><a href="#变量列表说明" class="headerlink" title="变量列表说明"></a>变量列表说明</h2><ol>
<li><code>$&#123;dbName&#125;</code> 数据库名称</li>
<li><code>$&#123;envName&#125;</code> 环境名称</li>
<li><code>$&#123;userName&#125;</code> 访问数据库使用的用户名</li>
<li><code>$&#123;ip&#125;</code> mysql 服务器的IP地址</li>
<li><code>$&#123;appName&#125;</code> appName，数据源名称</li>
<li><code>$&#123;groupName&#125;</code> 分组名称</li>
<li><code>$&#123;atomName&#125;</code> 物理数据库别名</li>
</ol>
<h2 id="数据源的拓扑结构"><a href="#数据源的拓扑结构" class="headerlink" title="数据源的拓扑结构"></a>数据源的拓扑结构</h2><h3 id="com-taobao-tddl-v1-ds-appName-topology"><a href="#com-taobao-tddl-v1-ds-appName-topology" class="headerlink" title="com.taobao.tddl.v1_ds-${appName}_topology"></a>com.taobao.tddl.v1_ds-${appName}_topology</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">matrix</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://github.com/tddl/tddl/schema/matrix&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://github.com/tddl/tddl/schema/matrix https://raw.github.com/tddl/tddl/master/tddl-common/src/main/resources/META-INF/matrix.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appName</span>&gt;</span>$&#123;appName&#125;<span class="tag">&lt;/<span class="name">appName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">group</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;groupName&#125;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;mysql_jdbc&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">atom</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;atomName&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">matrix</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这份key-value 对， 配置的是数据源的整体的拓扑结构信息， 这里会想尽的写清楚有哪些 数据分组， 哪些物理数据库会被用到.<br>其中  <code>appName</code> 元素只允许存在一个， 但 <code>group</code> 元素允许存在多个， 也允许非mysql段的存在， <code>atom</code>元素只能存在于<code>group</code> 元素之中，但可以存在多个， 每个<code>group</code> 下面的 <code>atom</code> 都是在数据上是等价的（数据集合相同， 可能读写属性不同）</p>
<h2 id="数据源的规则集合"><a href="#数据源的规则集合" class="headerlink" title="数据源的规则集合"></a>数据源的规则集合</h2><h3 id="com-taobao-tddl-rule-le-appName"><a href="#com-taobao-tddl-rule-le-appName" class="headerlink" title="com.taobao.tddl.rule.le.${appName}"></a>com.taobao.tddl.rule.le.${appName}</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;designsnapshot_bean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.taobao.tddl.rule.TableRule&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dbNamePattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;designsnapshot_&#123;0000&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dbRuleArray&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">value</span>&gt;</span>(#designid,1,64#.longValue() % 256).intdiv(64)<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;tbNamePattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;designsnapshot_&#123;0000&#125;&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;tbRuleArray&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">value</span>&gt;</span>#designid,1,64#.longValue() % 64<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;allowFullTableScan&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;vtabroot&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.taobao.tddl.rule.VirtualTableRoot&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;tableRules&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;design_snapshot&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;designsnapshot_bean&quot;</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dbIndexMap&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;designsnapshot_sequence&quot;</span> <span class="attr">value</span>=<span class="string">&quot;designsnapshot_0000&quot;</span> /&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultDbIndex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tms-db-dev&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这是一个表明整个数据源拓扑结构的规则文件， 也是分库分表规则配置的地方. <code>vtabroot</code> 是总的规则入口的<code>bean</code>。下面有几个概念需要详细解释一下。</p>
<ol>
<li><code>defaultDbIndex</code> 是默认的数据分组的设定， 当一个数据源（逻辑）有多个数据库（不同的数据库）的时候， 一个查询分发需要知道这个查询所涉及的表在哪个库上， 如果没有特殊指定， 那就会分发到这个东西指定的 <code>group</code>上。</li>
<li><code>dbIndexMap</code> 用于指定哪些表在哪 <code>group</code>， 具体来说就是表库的映射关系， 优先级比 <code>defaultDbIndex</code> 高， 同样是在用于配置多个不同数据的数据库的时候使用的。</li>
<li><code>tableRules</code> 用于定义虚拟表与虚拟表对应的分库分表规则的实际物理数据库关系。 key 是虚拟表名， 可以直接 SELECT FROM , value-ref 是 分库分表规则对应的bean</li>
<li><code>分库分表的bean</code> 用于设置分库分表的规则<br><code>dbRuleArra</code> 是分库规则。如例所示， 以 designid列 进行分库， 每个库64张表， 共分为 256&#x2F;64个库，比如designid &#x3D; 500,  244 &#x2F; 64  &#x3D; 3 分到第四个库上。<br><code>tbRuleArray</code> 是分表规则。进入到每个库上的ID再进行取余64决定最后落到哪个表里。 这两个字段写法并非固定， 都是支持TDDL内置的一些表达式语法的， 具体得去看代码，此处只列出了最常用的取模的表达式。</li>
</ol>
<h2 id="数据源的读写分离权重优先级等配置"><a href="#数据源的读写分离权重优先级等配置" class="headerlink" title="数据源的读写分离权重优先级等配置"></a>数据源的读写分离权重优先级等配置</h2><h3 id="com-taobao-tddl-jdbc-group-V2-4-1-groupName"><a href="#com-taobao-tddl-jdbc-group-V2-4-1-groupName" class="headerlink" title="com.taobao.tddl.jdbc.group_V2.4.1_${groupName}"></a>com.taobao.tddl.jdbc.group_V2.4.1_${groupName}</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;atomName&#125;:rwp0i0,$&#123;atomName&#125;:rp1i1</span><br></pre></td></tr></table></figure>
<p>逗号是各个数据库原的分隔符，冒号前面的是<code>atom</code>的名字。<code>rw</code> 是指读写, <code>r</code> 是指只读, <code>p</code> 是优先级的意思， p越大则越优先分配到。<code>i</code> index， 是指各个数据源的一个index， 此外还有个权重配置的<code>w</code>可以写在 <code>p</code> 后面 </p>
<h2 id="数据库本身的配置"><a href="#数据库本身的配置" class="headerlink" title="数据库本身的配置"></a>数据库本身的配置</h2><h3 id="com-taobao-tddl-atom-global-atomName"><a href="#com-taobao-tddl-atom-global-atomName" class="headerlink" title="com.taobao.tddl.atom.global.${atomName}"></a>com.taobao.tddl.atom.global.${atomName}</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dbName=$&#123;dbName&#125;</span><br><span class="line">dbType=mysql</span><br><span class="line">dbStatus=RW</span><br><span class="line">ip=$&#123;ip&#125;</span><br><span class="line">port=3306</span><br></pre></td></tr></table></figure>
<p>数据库自身的配置， 与TDDL 无关， 需要让TDDL知道数据库的地址， 端口， 数据库名称等基本信息</p>
<h2 id="连接池的配置"><a href="#连接池的配置" class="headerlink" title="连接池的配置"></a>连接池的配置</h2><h1 id="com-taobao-tddl-atom-app-appName-atomName"><a href="#com-taobao-tddl-atom-app-appName-atomName" class="headerlink" title="com.taobao.tddl.atom.app.${appName}.${atomName}"></a>com.taobao.tddl.atom.app.${appName}.${atomName}</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">userName=$&#123;userName&#125;</span><br><span class="line">maxPoolSize=100</span><br><span class="line">minPoolSize=5</span><br><span class="line">idleTimeout=1</span><br><span class="line">testOnBorrow=1</span><br><span class="line">abandonedTimeout=60</span><br><span class="line">connectionProperties=charset=utf-8</span><br></pre></td></tr></table></figure>
<p>由于TDDL底层使用<code>Driud</code>连接池， 因此， 这里主要用于配置 <code>druid</code> 连接池</p>
<h2 id="数据库账号与密码指定"><a href="#数据库账号与密码指定" class="headerlink" title="数据库账号与密码指定"></a>数据库账号与密码指定</h2><h3 id="com-taobao-tddl-atom-passwd-dbName-mysql-userName"><a href="#com-taobao-tddl-atom-passwd-dbName-mysql-userName" class="headerlink" title="com.taobao.tddl.atom.passwd.${dbName}.mysql.${userName}"></a>com.taobao.tddl.atom.passwd.${dbName}.mysql.${userName}</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">encPasswd=$&#123;password&#125;</span><br></pre></td></tr></table></figure>
<p>此处用于配置数据库用的密码。 由于开源出来的版本好像是没有对应的加密逻辑实现的， 因此， 这里的密码并不是加密的密码，而是明文的密码。<br>不过用户可以自行实现加密方法， 此处的接口TDDL是有留出来的。</p>
]]></content>
      <categories>
        <category>storage</category>
        <category>middleware</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>middleware</tag>
      </tags>
  </entry>
  <entry>
    <title>tidis 笔记</title>
    <url>/2016/08/13/storage/tidis/</url>
    <content><![CDATA[<h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><ol>
<li>懒删除</li>
<li>用线程去扫所有的key以便删除该删的</li>
<li>如果启用过期机制，则需要多一个key用来存过期时间</li>
<li>不启用过期则比较快</li>
</ol>
<h2 id="缺少"><a href="#缺少" class="headerlink" title="缺少"></a>缺少</h2><ol>
<li>监控与统计信息</li>
<li>充足的压测信息</li>
<li>单测不够</li>
<li>key分析， 可以在扫描的时候做掉</li>
</ol>
]]></content>
      <categories>
        <category>storage</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>tidis</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>react+ts+webpack+antd 实战</title>
    <url>/2019/06/18/langs/fe/new_project/</url>
    <content><![CDATA[<h2 id="1-安装react项目创建程序"><a href="#1-安装react项目创建程序" class="headerlink" title="1. 安装react项目创建程序"></a>1. 安装react项目创建程序</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g create-react-app yarn</span><br></pre></td></tr></table></figure>
<h2 id="2-创建react-ts项目"><a href="#2-创建react-ts项目" class="headerlink" title="2. 创建react + ts项目"></a>2. 创建react + ts项目</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create-react-app my-app --scripts-version=react-scripts-ts</span><br></pre></td></tr></table></figure>

<p>react-scripts-ts是一些调整的组合，使得你可以使用标准create-react-app项目流程并且加入TypeScript。<br>现在你的项目应该是下面这个样子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my-app/</span><br><span class="line">├─ .gitignore</span><br><span class="line">├─ node_modules/</span><br><span class="line">├─ public/</span><br><span class="line">├─ src/</span><br><span class="line">│  └─ ...</span><br><span class="line">├─ package.json</span><br><span class="line">├─ tsconfig.json</span><br><span class="line">└─ tslint.json</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<p><code>tsconfig.json</code>包含我们项目中的TypeScript的配置信息</p>
<p><code>tslint.json</code>是我们的代码规范工具TSLint相关的配置</p>
<p><code>package.json</code>包含我们的依赖项，以及一些用于测试、预览、部署等的快捷命令。</p>
<p><code>public</code>包含静态资源，比如我们要部署的HTML页面和图片。你们可以删除除了index.html以外的任何文件。</p>
<p><code>src</code> 包含了我们TypeScript和CSS的代码。index.tsx是我们的文件的入口。</p>
<p>在<code>package.json</code> 中<code>scripts</code>中 分别有</p>
<p>start 开发命令 执行 npm run start<br>build 部署命令 执行 npm run build<br>test 测试命令允许Jest</p>
<h2 id="3-集成antd（不需要UI库可以跳过这里）"><a href="#3-集成antd（不需要UI库可以跳过这里）" class="headerlink" title="3. 集成antd（不需要UI库可以跳过这里）"></a>3. 集成antd（不需要UI库可以跳过这里）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add antd  ts-import-plugin --dev</span><br></pre></td></tr></table></figure>



<h2 id="4-配置-config-overrides-js"><a href="#4-配置-config-overrides-js" class="headerlink" title="4.配置 config-overrides.js"></a>4.配置 <code>config-overrides.js</code></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*jshint esversion: 6 */</span><br><span class="line">const tsImportPluginFactory = require(&#x27;ts-import-plugin&#x27;);</span><br><span class="line">const &#123;</span><br><span class="line">    getLoader</span><br><span class="line">&#125; = require(&quot;react-app-rewired&quot;);</span><br><span class="line">const rewireLess = require(&#x27;react-app-rewire-less&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = function override(config) &#123;</span><br><span class="line">    const tsLoader = getLoader(</span><br><span class="line">        config.module.rules,</span><br><span class="line">        rule =&gt;</span><br><span class="line">        rule.loader &amp;&amp;</span><br><span class="line">        typeof rule.loader === &#x27;string&#x27; &amp;&amp;</span><br><span class="line">        rule.loader.includes(&#x27;ts-loader&#x27;)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    tsLoader.options = &#123;</span><br><span class="line">        getCustomTransformers: () =&gt; (&#123;</span><br><span class="line">            before: [tsImportPluginFactory(&#123;</span><br><span class="line">                libraryDirectory: &#x27;es&#x27;,</span><br><span class="line">                libraryName: &#x27;antd&#x27;,</span><br><span class="line">                style: &#x27;css&#x27;,</span><br><span class="line">            &#125;)]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    config = rewireLess.withLoaderOptions(&#123;</span><br><span class="line">        modifyVars: &#123;</span><br><span class="line">            &quot;@primary-color&quot;: &quot;#1DA57A&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)(config, env);</span><br><span class="line"></span><br><span class="line">    config.resolve = &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            &#x27;@&#x27;: path.resolve(&quot;./&quot;, &#x27;src&#x27;)</span><br><span class="line">        &#125;,</span><br><span class="line">        extensions: [&#x27;.tsx&#x27;, &#x27;.ts&#x27;, &#x27;.js&#x27;, &#x27;.jsx&#x27;, &#x27;css&#x27;]</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return config;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="5-配置-tsconfig-json"><a href="#5-配置-tsconfig-json" class="headerlink" title="5.配置 tsconfig.json"></a>5.配置 <code>tsconfig.json</code></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">complierOptionsu加入</span><br><span class="line">    &quot;paths&quot;: &#123;</span><br><span class="line">      &quot;@/*&quot;: [&quot;src/*&quot;]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/u010377383/article/details/79014405">https://blog.csdn.net/u010377383/article/details/79014405</a></p>
]]></content>
      <categories>
        <category>lang</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>react</tag>
        <tag>antd</tag>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>web 前端一些基本知识</title>
    <url>/2019/06/18/langs/fe/project/</url>
    <content><![CDATA[<h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><p>vscode 是开发前段不二的IDE, 也是近年来维护最活跃的一个编辑器</p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ol>
<li>Auto Close Tag</li>
<li>Auto Rename Tag</li>
<li>Beautify</li>
<li>Bracket Pair Colorizer</li>
<li>Class autocomplete for HTML</li>
<li>Code Runner</li>
<li>Css peek</li>
<li>Document this</li>
<li>Eslint</li>
<li>TsLint</li>
<li>Image Preview</li>
<li>Node.js Module Intellisense</li>
<li>Path Intellisense</li>
</ol>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ol>
<li>ctrl+shift+b  构建项目</li>
<li>F5 run</li>
<li>F10 Step over</li>
<li>F11 step into</li>
<li>Shift F11 step out.</li>
<li>Alt+Shift+F format</li>
</ol>
<h2 id="node与nmp"><a href="#node与nmp" class="headerlink" title="node与nmp"></a>node与nmp</h2><h3 id="包安装与管理工具yarn-与npm"><a href="#包安装与管理工具yarn-与npm" class="headerlink" title="包安装与管理工具yarn 与npm"></a>包安装与管理工具yarn 与npm</h3><h3 id="淘宝npm-镜像"><a href="#淘宝npm-镜像" class="headerlink" title="淘宝npm 镜像"></a>淘宝npm 镜像</h3><h4 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h4 id="别名的方式"><a href="#别名的方式" class="headerlink" title="别名的方式"></a>别名的方式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias cnpm=&quot;npm --registry=https://registry.npm.taobao.org \</span><br><span class="line">--cache=$HOME/.npm/.cache/cnpm \</span><br><span class="line">--disturl=https://npm.taobao.org/dist \</span><br><span class="line">--userconfig=$HOME/.cnpmrc&quot;</span><br><span class="line"></span><br><span class="line"># Or alias it in .bashrc or .zshrc</span><br><span class="line">$ echo &#x27;\n#alias for cnpm\nalias cnpm=&quot;npm --registry=https://registry.npm.taobao.org \</span><br><span class="line">  --cache=$HOME/.npm/.cache/cnpm \</span><br><span class="line">  --disturl=https://npm.taobao.org/dist \</span><br><span class="line">  --userconfig=$HOME/.cnpmrc&quot;&#x27; &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc</span><br></pre></td></tr></table></figure>


<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><h4 id="文件介绍"><a href="#文件介绍" class="headerlink" title="文件介绍"></a>文件介绍</h4><p>package.json 是项目的总的一个配置文件， 它定义了这个项目所需要的各种模块， 以及项目的基本配置信息。<br>可以自动生成或者手动编写， 自动生成的方法是用node</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node init</span><br></pre></td></tr></table></figure>
<h4 id="scripts-段"><a href="#scripts-段" class="headerlink" title="scripts 段"></a>scripts 段</h4><p>scripts 段制定了运行脚本命令的npm命令行缩写， 比如start指定了运行npm run start 的时候所需要执行的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;dev&quot;: &quot;node build/dev-server.js&quot;,</span><br><span class="line">    &quot;lint&quot;:&quot;eslint --ext .js,.vue src test/unit/specs&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h4><p>depencies and devDependencies 分别指定了项目在运行时候依赖的模块与项目开发的时候需要的一些模块， 它们都指向同一个对象， 用来管理各种依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;vue&quot;: &quot;^2.2.2&quot;,</span><br><span class="line">    &quot;vue-router&quot;: &quot;^2.2.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;autoprefixer&quot;: &quot;^6.7.2&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="config-字段"><a href="#config-字段" class="headerlink" title="config 字段"></a>config 字段</h4><p>config 字段用于向环境变量输出值</p>
<h4 id="engines-字段"><a href="#engines-字段" class="headerlink" title="engines 字段"></a>engines 字段</h4><p>engines 字段主要声明node 与 npm的版本</p>
<h4 id="bin-字段"><a href="#bin-字段" class="headerlink" title="bin 字段"></a>bin 字段</h4><p>bin字段 主要是为了让一个可执行命令安装到系统的路径， 可以直接调用,<br>比如，要使用hello作为命令时可以这么做：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; &quot;bin&quot; : &#123; &quot;hello&quot; : &quot;./cli.js&quot; &#125; &#125;</span><br></pre></td></tr></table></figure>
<p>这么一来，当你安装hello程序，npm会从cli.js文件创建一个到&#x2F;usr&#x2F;local&#x2F;bin&#x2F;myapp的符号链接(这使你可以直接在命令行执行hello脚本)。</p>
]]></content>
      <categories>
        <category>lang</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 简易笔记</title>
    <url>/2019/05/18/langs/fe/typescript/</url>
    <content><![CDATA[<h2 id="typescript-介绍"><a href="#typescript-介绍" class="headerlink" title="typescript 介绍"></a>typescript 介绍</h2><p>type script 是Javascript 的一种超集， 引入了JavaScript所欠缺的继承抽象与封装等</p>
<h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">isDone</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
<h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">decLiteral</span>: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">hexLiteral</span>: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">binaryLiteral</span>: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">octalLiteral</span>: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br></pre></td></tr></table></figure>
<h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>模版字符串，它可以定义多行文本和内嵌表达式。 这种字符串是被反引号包围（ &#96;），并且以${ expr }这种形式嵌入表达式</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">`Gene`</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sentence</span>: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123; name &#125;</span>.</span></span><br><span class="line"><span class="string">I&#x27;ll be <span class="subst">$&#123; age + <span class="number">1</span> &#125;</span> years old next month.`</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="array"><a href="#array" class="headerlink" title="array  []"></a>array  []</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<h3 id="Tuple-number-string"><a href="#Tuple-number-string" class="headerlink" title="Tuple [number, string]"></a>Tuple [number, string]</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Declare a tuple type</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"><span class="comment">// Initialize it</span></span><br><span class="line">x = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">10</span>]; <span class="comment">// OK</span></span><br><span class="line"><span class="comment">// Initialize it incorrectly</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">&#x27;hello&#x27;</span>]; <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>
<h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;<span class="title class_">Red</span> = <span class="number">1</span>, <span class="title class_">Green</span>, <span class="title class_">Blue</span>&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">colorName</span>: <span class="built_in">string</span> = <span class="title class_">Color</span>[<span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colorName);  <span class="comment">// 显示&#x27;Green&#x27;因为上面代码里它的值是2</span></span><br></pre></td></tr></table></figure>
<h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><p>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 any类型来标记这些变量</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">notSure</span>: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">notSure.<span class="title function_">ifItExists</span>(); <span class="comment">// okay, ifItExists might exist at runtime</span></span><br><span class="line">notSure.<span class="title function_">toFixed</span>(); <span class="comment">// okay, toFixed exists (but the compiler doesn&#x27;t check)</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">prettySure</span>: <span class="title class_">Object</span> = <span class="number">4</span>;</span><br><span class="line">prettySure.<span class="title function_">toFixed</span>(); <span class="comment">// Error: Property &#x27;toFixed&#x27; doesn&#x27;t exist on type &#x27;Object&#x27;.</span></span><br></pre></td></tr></table></figure>
<h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><p>某种程度上来说，void类型像是与any类型相反，它表示没有任何类型。声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined和null：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function warnUser(): void &#123;</span><br><span class="line">    console.log(&quot;This is my warning message&quot;);</span><br><span class="line">&#125;</span><br><span class="line">let unusable: void = undefined;</span><br></pre></td></tr></table></figure>
<h3 id="null-x2F-undefined"><a href="#null-x2F-undefined" class="headerlink" title="null &#x2F; undefined"></a>null &#x2F; undefined</h3><p>默认情况下null和undefined是所有类型的子类型。 就是说你可以把 null和undefined赋值给number类型的变量。当你指定了–strictNullChecks标记，null和undefined只能赋值给void和它们各自</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Not much else we can assign to these variables!</span><br><span class="line">let u: undefined = undefined;</span><br><span class="line">let n: null = null;</span><br></pre></td></tr></table></figure>

<h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><p>never 表示永远不存在的类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 返回never的函数必须存在无法达到的终点</span><br><span class="line">function error(message: string): never &#123;</span><br><span class="line">    throw new Error(message);</span><br><span class="line">&#125;</span><br><span class="line">// 推断的返回值类型为never</span><br><span class="line">function fail() &#123;</span><br><span class="line">    return error(&quot;Something failed&quot;);</span><br><span class="line">&#125;</span><br><span class="line">// 返回never的函数必须存在无法达到的终点</span><br><span class="line">function infiniteLoop(): never &#123;</span><br><span class="line">    while (true) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p>object 表示非原始类型，即除number, boolean, string, symbol, null, undefined之外的类型</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">o: <span class="built_in">object</span> | <span class="literal">null</span></span>): <span class="built_in">void</span>;</span><br><span class="line"><span class="title function_">create</span>(&#123; <span class="attr">prop</span>: <span class="number">0</span> &#125;); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">create</span>(<span class="literal">null</span>); <span class="comment">// OK</span></span><br><span class="line"><span class="title function_">create</span>(<span class="number">42</span>); <span class="comment">// Error</span></span><br><span class="line"><span class="title function_">create</span>(<span class="string">&quot;string&quot;</span>); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure>

<h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">any</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="comment">// 以下两种方法等价</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).<span class="property">length</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br></pre></td></tr></table></figure>

<h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><ol>
<li>let  比较正常的作用域与范围</li>
<li>var  奇怪的作用域与范围</li>
<li>const 不可修改</li>
</ol>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>接口是TS 的一个重要的概念，可以用于结构类型检查.</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printLabel</span>(<span class="params">labelledObj: &#123; label: <span class="built_in">string</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(labelledObj.<span class="property">label</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123; <span class="attr">size</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">&quot;Size 10 Object&quot;</span> &#125;;</span><br><span class="line"><span class="title function_">printLabel</span>(myObj);</span><br></pre></td></tr></table></figure>
<p>接口与go的差不多， 只要包含即可</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">LabelledValue</span> &#123;</span><br><span class="line">  <span class="attr">label</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><p>带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个?符号。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SquareConfig</span> &#123;</span><br><span class="line">  color?: <span class="built_in">string</span>;</span><br><span class="line">  width?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误。 比如，我们故意将 createSquare里的color属性名拼错，就会得到一个错误提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface SquareConfig &#123;</span><br><span class="line">  color?: string;</span><br><span class="line">  width?: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function createSquare(config: SquareConfig): &#123; color: string; area: number &#125; &#123;</span><br><span class="line">  let newSquare = &#123;color: &quot;white&quot;, area: 100&#125;;</span><br><span class="line">  if (config.clor) &#123;</span><br><span class="line">    // Error: Property &#x27;clor&#x27; does not exist on type &#x27;SquareConfig&#x27;</span><br><span class="line">    newSquare.color = config.clor;</span><br><span class="line">  &#125;</span><br><span class="line">  return newSquare;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let mySquare = createSquare(&#123;color: &quot;black&quot;&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface Point &#123;</span><br><span class="line">    readonly x: number;</span><br><span class="line">    readonly y: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let p1: Point = &#123; x: 10, y: 20 &#125;;</span><br><span class="line">p1.x = 5; // error!</span><br><span class="line"></span><br><span class="line">let a: number[] = [1, 2, 3, 4];</span><br><span class="line">let ro: ReadonlyArray&lt;number&gt; = a;</span><br><span class="line">ro[0] = 12; // error!</span><br><span class="line">ro.push(5); // error!</span><br><span class="line">ro.length = 100; // error!</span><br><span class="line">a = ro; // error!</span><br><span class="line"></span><br><span class="line">a = ro as number[];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">interface SquareConfig &#123;</span><br><span class="line">    color?: string;</span><br><span class="line">    width?: number;</span><br><span class="line">    [propName: string]: any;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SearchFunc</span> &#123;</span><br><span class="line">  (<span class="attr">source</span>: <span class="built_in">string</span>, <span class="attr">subString</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">mySearch</span>: <span class="title class_">SearchFunc</span>;</span><br><span class="line">mySearch = <span class="keyword">function</span>(<span class="params">src: <span class="built_in">string</span>, sub: <span class="built_in">string</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = src.<span class="title function_">search</span>(sub);</span><br><span class="line">  <span class="keyword">return</span> result &gt; -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h3><p>TypeScript支持两种索引签名：字符串和数字。 可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型。 这是因为当使用 number来索引时，JavaScript会将它转换成string然后再去索引对象。 也就是说用 100（一个number）去索引等同于使用”100”（一个string）去索引，因此两者需要保持一致。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">StringArray</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myArray</span>: <span class="title class_">StringArray</span>;</span><br><span class="line">myArray = [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Fred&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myStr</span>: <span class="built_in">string</span> = myArray[<span class="number">0</span>];<span class="keyword">interface</span> <span class="title class_">StringArray</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myArray</span>: <span class="title class_">StringArray</span>;</span><br><span class="line">myArray = [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Fred&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myStr</span>: <span class="built_in">string</span> = myArray[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>
<p>最后，你可以将索引签名设置为只读，这样就防止了给索引赋值</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ReadonlyStringArray</span> &#123;</span><br><span class="line">    <span class="keyword">readonly</span> [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">myArray</span>: <span class="title class_">ReadonlyStringArray</span> = [<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>];</span><br><span class="line">myArray[<span class="number">2</span>] = <span class="string">&quot;Mallory&quot;</span>; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure>

<h3 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">    <span class="attr">currentTime</span>: <span class="title class_">Date</span>;</span><br><span class="line">    <span class="title function_">setTime</span>(<span class="attr">d</span>: <span class="title class_">Date</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">implements</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">    <span class="attr">currentTime</span>: <span class="title class_">Date</span>;</span><br><span class="line">    <span class="title function_">setTime</span>(<span class="params">d: <span class="built_in">Date</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentTime</span> = d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> constructor存在于类的静态部分，所以不在检查的范围内</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ClockConstructor</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> (<span class="attr">hour</span>: <span class="built_in">number</span>, <span class="attr">minute</span>: <span class="built_in">number</span>): <span class="title class_">ClockInterface</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">    <span class="title function_">tick</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createClock</span>(<span class="params">ctor: ClockConstructor, hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span></span>): <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">ctor</span>(hour, minute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DigitalClock</span> <span class="keyword">implements</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">    <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beep beep&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnalogClock</span> <span class="keyword">implements</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">    <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tick tock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> digital = <span class="title function_">createClock</span>(<span class="title class_">DigitalClock</span>, <span class="number">12</span>, <span class="number">17</span>);</span><br><span class="line"><span class="keyword">let</span> analog = <span class="title function_">createClock</span>(<span class="title class_">AnalogClock</span>, <span class="number">7</span>, <span class="number">32</span>);</span><br></pre></td></tr></table></figure>

<h3 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="attr">sideLength</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = &lt;<span class="title class_">Square</span>&gt;&#123;&#125;;</span><br><span class="line">square.<span class="property">color</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">square.<span class="property">sideLength</span> = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h3 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h3><p>当接口继承了一个类类型时，它会继承类的成员但不包括其实现。 就好像接口声明了所有类中存在的成员，但并没有提供具体实现一样。 接口同样会继承到类的private和protected成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现 </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Control</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">state</span>: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SelectableControl</span> <span class="keyword">extends</span> <span class="title class_">Control</span> &#123;</span><br><span class="line">    <span class="title function_">select</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Control</span> <span class="keyword">implements</span> <span class="title class_">SelectableControl</span> &#123;</span><br><span class="line">    <span class="title function_">select</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextBox</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Control</span> &#123;</span><br><span class="line">    <span class="title function_">select</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误：“Image”类型缺少“state”属性。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Image</span> <span class="keyword">implements</span> <span class="title class_">SelectableControl</span> &#123;</span><br><span class="line">    <span class="title function_">select</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Location</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="TypeScript-的类"><a href="#TypeScript-的类" class="headerlink" title="TypeScript 的类"></a>TypeScript 的类</h2><p>typescrpit 的类与java差不多，默认为Public， 有Protcected与private 成员， 也有抽象类，多态与继承<br>readonly关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。<br>我们也可以创建类的静态成员，这些属性存在于类本身上面而不是类的实例上。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point3</span>d <span class="keyword">extends</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="attr">z</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">point3d</span>: <span class="title class_">Point3</span>d = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>类定义会创建两个东西：类的实例类型和一个构造函数。 因为类可以创建出类型，所以你能够在允许使用接口的地方使用类。</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数类型-1"><a href="#函数类型-1" class="headerlink" title="函数类型"></a>函数类型</h3> <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// myAdd has the full function type</span></span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="keyword">function</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The parameters `x` and `y` have the type number</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myAdd</span>: <span class="function">(<span class="params">baseValue: <span class="built_in">number</span>, increment: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> =</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">x, y</span>) &#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure>
<h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p> 可选参数必须跟在必须参数后面。 如果上例我们想让first name是可选的，那么就必须调整它们的位置，把first name放在后面。<br> <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lastName)</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + lastName;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = <span class="title function_">buildName</span>(<span class="string">&quot;Bob&quot;</span>);  <span class="comment">// works correctly now</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="title function_">buildName</span>(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Adams&quot;</span>, <span class="string">&quot;Sr.&quot;</span>);  <span class="comment">// error, too many parameters</span></span><br><span class="line"><span class="keyword">let</span> result3 = <span class="title function_">buildName</span>(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Adams&quot;</span>);  <span class="comment">// ah, just right</span></span><br></pre></td></tr></table></figure></p>
<h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p> 与普通可选参数不同的是，带默认值的参数不需要放在必须参数的后面。 如果带默认值的参数出现在必须参数前面，用户必须明确的传入 undefined值来获得默认值。<br> <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params">firstName = <span class="string">&quot;Will&quot;</span>, lastName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = <span class="title function_">buildName</span>(<span class="string">&quot;Bob&quot;</span>);                  <span class="comment">// error, too few parameters</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="title function_">buildName</span>(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Adams&quot;</span>, <span class="string">&quot;Sr.&quot;</span>);  <span class="comment">// error, too many parameters</span></span><br><span class="line"><span class="keyword">let</span> result3 = <span class="title function_">buildName</span>(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Adams&quot;</span>);         <span class="comment">// okay and returns &quot;Bob Adams&quot;</span></span><br><span class="line"><span class="keyword">let</span> result4 = <span class="title function_">buildName</span>(<span class="literal">undefined</span>, <span class="string">&quot;Adams&quot;</span>);     <span class="comment">// okay and returns &quot;Will Adams&quot;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="可变数量参数（剩余参数）"><a href="#可变数量参数（剩余参数）" class="headerlink" title="可变数量参数（剩余参数）"></a>可变数量参数（剩余参数）</h3><p> 剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个。 编译器创建参数数组，名字是你在省略号（ …）后面给定的名字，你可以在函数体内使用这个数组<br> <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, ...restOfName: <span class="built_in">string</span>[]</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + restOfName.<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">buildNameFun</span>: <span class="function">(<span class="params">fname: <span class="built_in">string</span>, ...rest: <span class="built_in">string</span>[]</span>) =&gt;</span> <span class="built_in">string</span> = buildName;</span><br></pre></td></tr></table></figure></p>
<h3 id="this"><a href="#this" class="headerlink" title="this"></a><code>this</code></h3><p> <em>this和箭头函数</em><br> <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> deck = &#123;</span><br><span class="line">    <span class="attr">suits</span>: [<span class="string">&quot;hearts&quot;</span>, <span class="string">&quot;spades&quot;</span>, <span class="string">&quot;clubs&quot;</span>, <span class="string">&quot;diamonds&quot;</span>],</span><br><span class="line">    <span class="attr">cards</span>: <span class="title class_">Array</span>(<span class="number">52</span>),</span><br><span class="line">    <span class="attr">createCardPicker</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> pickedCard = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">52</span>);</span><br><span class="line">            <span class="keyword">let</span> pickedSuit = <span class="title class_">Math</span>.<span class="title function_">floor</span>(pickedCard / <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">suit</span>: <span class="variable language_">this</span>.<span class="property">suits</span>[pickedSuit], <span class="attr">card</span>: pickedCard % <span class="number">13</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.<span class="title function_">createCardPicker</span>();</span><br><span class="line"><span class="keyword">let</span> pickedCard = <span class="title function_">cardPicker</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;card: &quot;</span> + pickedCard.<span class="property">card</span> + <span class="string">&quot; of &quot;</span> + pickedCard.<span class="property">suit</span>);</span><br></pre></td></tr></table></figure></p>
<p> 可以看到createCardPicker是个函数，并且它又返回了一个函数。 如果我们尝试运行这个程序，会发现它并没有弹出对话框而是报错了。 因为 createCardPicker返回的函数里的this被设置成了window而不是deck对象。 因为我们只是独立的调用了 cardPicker()。 顶级的非方法式调用会将 this视为window。 （注意：在严格模式下， this为undefined而不是window）。</p>
<p> 为了解决这个问题，我们可以在函数被返回时就绑好正确的this。 这样的话，无论之后怎么使用它，都会引用绑定的‘deck’对象。 我们需要改变函数表达式来使用ECMAScript 6箭头语法。 箭头函数能保存函数创建时的 this值，而不是调用时的值：</p>
 <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> deck = &#123;</span><br><span class="line">    <span class="attr">suits</span>: [<span class="string">&quot;hearts&quot;</span>, <span class="string">&quot;spades&quot;</span>, <span class="string">&quot;clubs&quot;</span>, <span class="string">&quot;diamonds&quot;</span>],</span><br><span class="line">    <span class="attr">cards</span>: <span class="title class_">Array</span>(<span class="number">52</span>),</span><br><span class="line">    <span class="attr">createCardPicker</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> the line below is now an arrow function, allowing us to capture &#x27;this&#x27; right here</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> pickedCard = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">52</span>);</span><br><span class="line">            <span class="keyword">let</span> pickedSuit = <span class="title class_">Math</span>.<span class="title function_">floor</span>(pickedCard / <span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">suit</span>: <span class="variable language_">this</span>.<span class="property">suits</span>[pickedSuit], <span class="attr">card</span>: pickedCard % <span class="number">13</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.<span class="title function_">createCardPicker</span>();</span><br><span class="line"><span class="keyword">let</span> pickedCard = <span class="title function_">cardPicker</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;card: &quot;</span> + pickedCard.<span class="property">card</span> + <span class="string">&quot; of &quot;</span> + pickedCard.<span class="property">suit</span>);</span><br></pre></td></tr></table></figure>
<p> 你可以也看到过在回调函数里的this报错，当你将一个函数传递到某个库函数里稍后会被调用时。 因为当回调被调用的时候，它们会被当成一个普通函数调用， this将为undefined。 稍做改动，你就可以通过 this参数来避免错误。首先，库函数的作者要指定 this的类型：</p>
 <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">interface</span> <span class="title class_">UIElement</span> &#123;</span><br><span class="line">    <span class="title function_">addClickListener</span>(<span class="attr">onclick</span>: <span class="function">(<span class="params"><span class="variable language_">this</span>: <span class="built_in">void</span>, e: Event</span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="attr">info</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">onClickGood</span>(<span class="params"><span class="variable language_">this</span>: <span class="built_in">void</span>, e: Event</span>) &#123;</span><br><span class="line">        <span class="comment">// can&#x27;t use this here because it&#x27;s of type void!</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;clicked!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> <span class="title class_">Handler</span>();</span><br><span class="line">uiElement.<span class="title function_">addClickListener</span>(h.<span class="property">onClickGood</span>);</span><br></pre></td></tr></table></figure>
<p> 因为onClickGood指定了this类型为void，因此传递addClickListener是合法的。 当然了，这也意味着不能使用 this.info. 如果你两者都想要，你不得不使用箭头函数了：<br> <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">class</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="attr">info</span>: <span class="built_in">string</span>;</span><br><span class="line">    onClickGood = <span class="function">(<span class="params">e: Event</span>) =&gt;</span> &#123; <span class="variable language_">this</span>.<span class="property">info</span> = e.<span class="property">message</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> 这是可行的因为箭头函数不会捕获this，所以你总是可以把它们传给期望this: void的函数。 缺点是每个 Handler对象都会创建一个箭头函数。 另一方面，方法只会被创建一次，添加到 Handler的原型链上。 它们在不同 Handler对象间是共享的。</p>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2> <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> output = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;myString&quot;</span>);  <span class="comment">// 显式声明</span></span><br><span class="line"><span class="keyword">let</span> output = <span class="title function_">identity</span>(<span class="string">&quot;myString&quot;</span>);  <span class="comment">// 自动推断</span></span><br></pre></td></tr></table></figure>
<h3 id="使用泛型变量"><a href="#使用泛型变量" class="headerlink" title="使用泛型变量"></a>使用泛型变量</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);  <span class="comment">// Error: T doesn&#x27;t have .length</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T&gt;(<span class="attr">arg</span>: T[]): T[] &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);  <span class="comment">// Array has a .length, so no more error</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T&gt;(<span class="attr">arg</span>: <span class="title class_">Array</span>&lt;T&gt;): <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);  <span class="comment">// Array has a .length, so no more error</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h3><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">GenericIdentityFn</span> &#123;</span><br><span class="line">    &lt;T&gt;(<span class="attr">arg</span>: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myIdentity</span>: <span class="title class_">GenericIdentityFn</span> = identity;</span><br></pre></td></tr></table></figure>
<h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GenericNumber</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="attr">zeroValue</span>: T;</span><br><span class="line">    <span class="attr">add</span>: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.<span class="property">zeroValue</span> = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">x, y</span>) &#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BeeKeeper</span> &#123;</span><br><span class="line">    <span class="attr">hasMask</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZooKeeper</span> &#123;</span><br><span class="line">    <span class="attr">nametag</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="attr">numLegs</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="attr">keeper</span>: <span class="title class_">BeeKeeper</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lion</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="attr">keeper</span>: <span class="title class_">ZooKeeper</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> createInstance&lt;A <span class="keyword">extends</span> <span class="title class_">Animal</span>&gt;(<span class="attr">c</span>: <span class="keyword">new</span> () =&gt; A): A &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">c</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createInstance</span>(<span class="title class_">Lion</span>).<span class="property">keeper</span>.<span class="property">nametag</span>;  <span class="comment">// typechecks!</span></span><br><span class="line"><span class="title function_">createInstance</span>(<span class="title class_">Bee</span>).<span class="property">keeper</span>.<span class="property">hasMask</span>;   <span class="comment">// typechecks!</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="交叉类型（Intersection-Types）"><a href="#交叉类型（Intersection-Types）" class="headerlink" title="交叉类型（Intersection Types）"></a>交叉类型（Intersection Types）</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> extend&lt;T, U&gt;(<span class="attr">first</span>: T, <span class="attr">second</span>: U): T &amp; U &#123;</span><br><span class="line">    <span class="keyword">let</span> result = &lt;T &amp; U&gt;&#123;&#125;;</span><br><span class="line">    for (let id in first) &#123;</span><br><span class="line">        (&lt;any&gt;result)[id] = (&lt;any&gt;first)[id];</span><br><span class="line">    &#125;</span><br><span class="line">    for (let id in second) &#123;</span><br><span class="line">        if (!result.hasOwnProperty(id)) &#123;</span><br><span class="line">        // 两个类型如果这个没有就去另外一个</span><br><span class="line">            (&lt;any&gt;result)[id] = (&lt;any&gt;second)[id];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person &#123;</span><br><span class="line">    constructor(public name: string) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line">interface Loggable &#123;</span><br><span class="line">    log(): void;</span><br><span class="line">&#125;</span><br><span class="line">class ConsoleLogger implements Loggable &#123;</span><br><span class="line">    log() &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var jim = extend(new Person(&quot;Jim&quot;), new ConsoleLogger());</span><br><span class="line">var n = jim.name;</span><br><span class="line">jim.log();</span><br></pre></td></tr></table></figure>

<h3 id="联合类型（Union-Types）"><a href="#联合类型（Union-Types）" class="headerlink" title="联合类型（Union Types）"></a>联合类型（Union Types）</h3><p>联合类型与交叉类型很有关联，但是使用上却完全不同。 偶尔你会遇到这种情况，一个代码库希望传入 number或 string类型的参数。 例如下面的函数：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Takes a string and adds &quot;padding&quot; to the left.</span></span><br><span class="line"><span class="comment"> * If &#x27;padding&#x27; is a string, then &#x27;padding&#x27; is appended to the left side.</span></span><br><span class="line"><span class="comment"> * If &#x27;padding&#x27; is a number, then that number of spaces is added to the left side.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">padLeft</span>(<span class="params">value: <span class="built_in">string</span>, padding: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Array</span>(padding + <span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>) + value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> padding + value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Expected string or number, got &#x27;<span class="subst">$&#123;padding&#125;</span>&#x27;.`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">padLeft</span>(<span class="string">&quot;Hello world&quot;</span>, <span class="number">4</span>); <span class="comment">// returns &quot;    Hello world&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h3><p>export default<br>import xxx from </p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ZipCodeValidator</span> <span class="keyword">implements</span> <span class="title class_">StringValidator</span> &#123;</span><br><span class="line">    <span class="title function_">isAcceptable</span>(<span class="params">s: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="property">length</span> === <span class="number">5</span> &amp;&amp; numberRegexp.<span class="title function_">test</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">ZipCodeValidator</span> &#125;;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">ZipCodeValidator</span> <span class="keyword">as</span> mainValidator &#125;;</span><br></pre></td></tr></table></figure>


<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><h2 id="三斜线"><a href="#三斜线" class="headerlink" title="三斜线"></a>三斜线</h2><p>三斜线指令是包含单个XML标签的单行注释。 注释的内容会做为编译器指令使用。</p>
<p>三斜线指令仅可放在包含它的文件的最顶端。 一个三斜线指令的前面只能出现单行或多行注释，这包括其它的三斜线指令。 如果它们出现在一个语句或声明之后，那么它们会被当做普通的单行注释，并且不具有特殊的涵义。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference no-default-lib=&quot;true&quot;/&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个指令把一个文件标记成默认库。 你会在 lib.d.ts文件和它不同的变体的顶端看到这个注释。</p>
<h2 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h2><p>相对 vs. 非相对模块导入</p>
<p>相对导入是以&#x2F;，.&#x2F;或..&#x2F;开头的。 下面是一些例子：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Entry</span> <span class="keyword">from</span> <span class="string">&quot;./components/Entry&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DefaultHeaders</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../constants/http&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;/mod&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>相对导入的模块是相对于导入它的文件进行解析的。 因此 &#x2F;root&#x2F;src&#x2F;folder&#x2F;A.ts文件里的import { b } from “.&#x2F;moduleB”会使用下面的查找流程：</p>
<ol>
<li>&#x2F;root&#x2F;src&#x2F;folder&#x2F;moduleB.ts</li>
<li>&#x2F;root&#x2F;src&#x2F;folder&#x2F;moduleB.d.ts<br>所有其它形式的导入被当作非相对的。 下面是一些例子：<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> $ <span class="keyword">from</span> <span class="string">&quot;jQuery&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@angular/core&quot;</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>有一个对moduleB的非相对导入import { b } from “moduleB”，它是在&#x2F;root&#x2F;src&#x2F;folder&#x2F;A.ts文件里，会以如下的方式来定位”moduleB”：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/root/src/folder/moduleB.ts</span><br><span class="line">/root/src/folder/moduleB.d.ts</span><br><span class="line">/root/src/moduleB.ts</span><br><span class="line">/root/src/moduleB.d.ts</span><br><span class="line">/root/moduleB.ts</span><br><span class="line">/root/moduleB.d.ts</span><br><span class="line">/moduleB.ts</span><br><span class="line">/moduleB.d.ts</span><br></pre></td></tr></table></figure>
<h3 id="TypeScript如何解析模块"><a href="#TypeScript如何解析模块" class="headerlink" title="TypeScript如何解析模块"></a>TypeScript如何解析模块</h3><p>TypeScript是模仿Node.js运行时的解析策略来在编译阶段定位模块定义文件。 因此，TypeScript在Node解析逻辑基础上增加了TypeScript源文件的扩展名（ .ts，.tsx和.d.ts）。 同时，TypeScript在 package.json里使用字段”types”来表示类似”main”的意义 - 编译器会使用它来找到要使用的”main”定义文件。</p>
]]></content>
      <categories>
        <category>lang</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>lang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang的代码风格</title>
    <url>/2020/05/30/langs/golang/code_style/</url>
    <content><![CDATA[<h2 id="一些废话（Some-useless-words）"><a href="#一些废话（Some-useless-words）" class="headerlink" title="一些废话（Some useless words）"></a>一些废话（Some useless words）</h2><p>想必能看到我博客的人，已经对golang有一定的了解了</p>
<h3 id="gofmt-一统天下"><a href="#gofmt-一统天下" class="headerlink" title="gofmt 一统天下"></a>gofmt 一统天下</h3><p>gofmt 是目前golang里面用的最多的用来格式化代码风格的一个命令行工具， 很多知名项目都用它来保证自己的最基本的代码风格与官方和社区推荐的风格一致。<br>使用如下命令就可以轻松格式化一个目录下的所有文件：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gofmt -w .</span><br></pre></td></tr></table></figure>
<ol>
<li><p>gofmt 可以解决的问题</p>
</li>
<li><p>gofmt 不能解决的问题</p>
</li>
</ol>
<h3 id="天下之外"><a href="#天下之外" class="headerlink" title="天下之外"></a>天下之外</h3><p>其实标准gofmt有很多代码风格没有规定的地方比如以下几种场景：  </p>
<ul>
<li>常量命名风格</li>
<li>变量命名风格</li>
<li>函数命名风格</li>
<li>对象字段使用风格</li>
<li>值传递，还是指针传递</li>
</ul>
<h4 id="据库对象："><a href="#据库对象：" class="headerlink" title="据库对象："></a>据库对象：</h4><ol>
<li>可空字段，使用指针，用来表示NULL</li>
<li>对于不可空字段不使用指针类型， 用来表示这个字段一定有值</li>
</ol>
<h3 id="注释风格"><a href="#注释风格" class="headerlink" title="注释风格"></a>注释风格</h3><p>golang 与某Java不同， 不喜欢多行注释，纵观Golang SDK以及 一些非常文明的项目，大部分注释均为单行注释， 虽然golang 支持以下两种注释类型。  </p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  单行注释</span></span><br><span class="line"><span class="keyword">var</span> code = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> someVeryNastyThing = <span class="number">-1</span></span><br></pre></td></tr></table></figure>

<h5 id="特殊指令"><a href="#特殊指令" class="headerlink" title="特殊指令"></a>特殊指令</h5><p>在golang注释里面可以写一些特殊指令， 这个时候编译器就会处理这些指令，而不是仅仅当做注释， 这在很多场景下非常有用。</p>
]]></content>
      <categories>
        <category>lang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang的工程配置</title>
    <url>/2018/12/13/langs/golang/go_project/</url>
    <content><![CDATA[<h1 id="go-module简介"><a href="#go-module简介" class="headerlink" title="go module简介"></a>go module简介</h1><p>Go 1.11 中引入了module 管理的概念，这使得我们终于有一个官方正式支持的模块管理工具了， 但由于官方工具刚出功能还不是十分完善，易用， 很多人还摸索不出来如何使用是最科学的。</p>
<h2 id="为什么要使用-go-module"><a href="#为什么要使用-go-module" class="headerlink" title="为什么要使用 go module?"></a>为什么要使用 go module?</h2><p> 更好的版本管理， 使得项目依赖的module版本都是确定以及稳定的（这是依赖管理的最核心的要求）<br>依赖管理更简单方便<br>dep本身不利于项目中私有仓库的包共享， dep 在拉取依赖的时候， 会把依赖放到 项目目录的vendor下面， 这样也能达到上面说的这个效果，<br>但是dep本身对私有仓库的支持不好，不能很好的配置ssh key拉取私有仓库代码（无论如何配置它就是不用，不是不能用就是不好用）<br>另外，dep对依赖的拉取是相对比较慢， 处理比较复杂的。<br>dep已经进入不维护状态， 而且go module 得到了官方的支持与更新的确认</p>
<h2 id="私有仓库"><a href="#私有仓库" class="headerlink" title="私有仓库"></a>私有仓库</h2><h3 id="通过git命令"><a href="#通过git命令" class="headerlink" title="通过git命令"></a>通过git命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global url.git@github.com:.insteadof=https://github.com</span><br></pre></td></tr></table></figure>

<h3 id="修改git配置文件"><a href="#修改git配置文件" class="headerlink" title="修改git配置文件"></a>修改git配置文件</h3><p>看下 vim ~&#x2F;.gitconfig 是否有生效，否则，就手动改一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[url &quot;git@github.com:&quot;]</span><br><span class="line">        insteadOf = https://github.com/</span><br></pre></td></tr></table></figure>
<p>重启terminal生效</p>
<h2 id="go-module的要求"><a href="#go-module的要求" class="headerlink" title="go module的要求"></a>go module的要求</h2><p><code>golang version &lt; 1.12</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GO111MODULE=on</span><br></pre></td></tr></table></figure>
<p>由于官方没有默认打开 go module 的feature 因此在设置ci的时候需要手动设置一下两个环境变量, 这是唯一的代价</p>
<p><code>golang version &gt;=1.12</code>则不需要进行任何设置</p>
<h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go mod init mod_name</span><br></pre></td></tr></table></figure>

<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go get github.com/demo/xxx</span><br></pre></td></tr></table></figure>
<h2 id="删除依赖"><a href="#删除依赖" class="headerlink" title="删除依赖"></a>删除依赖</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go mod edit -droprequire github.com/demo/test</span><br></pre></td></tr></table></figure>

<h2 id="更新依赖版本"><a href="#更新依赖版本" class="headerlink" title="更新依赖版本"></a>更新依赖版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go mod edit xxx</span><br></pre></td></tr></table></figure>
<p>更新与删除依赖比较难用， 建议直接修改go.mod 文件与go.sum 文件， 更简单直接</p>
<h2 id="整理依赖"><a href="#整理依赖" class="headerlink" title="整理依赖"></a>整理依赖</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go mod tidy</span><br></pre></td></tr></table></figure>
<p>这句命令会自动去除没用的依赖， 添加需要增加的依赖</p>
<h2 id="依赖查询"><a href="#依赖查询" class="headerlink" title="依赖查询"></a>依赖查询</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go mod graph</span><br></pre></td></tr></table></figure>

<h2 id="依赖设置代理"><a href="#依赖设置代理" class="headerlink" title="依赖设置代理"></a>依赖设置代理</h2><p>由于墙的原因， 想要去使用Go， 没有代理还是不行的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> GOPROXY=https://goproxy.io <span class="comment"># windows, 也可以设置环境变量</span></span><br><span class="line"><span class="built_in">export</span> GOPROXY=https://goproxy.io <span class="comment"># windows</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>lang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 简介</title>
    <url>/2017/09/13/langs/golang/goland/</url>
    <content><![CDATA[<h2 id="IDE-选择"><a href="#IDE-选择" class="headerlink" title="IDE 选择"></a>IDE 选择</h2><h3 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h3><h3 id="goland-（收费）"><a href="#goland-（收费）" class="headerlink" title="goland （收费）"></a>goland （收费）</h3><p>需要装的插件列表</p>
<ol>
<li>material theme UI</li>
<li>m</li>
</ol>
<p>jetbrains 出品， 省去了很多的配置麻烦，而且用IDEA的用户可以无缝切换到这个的使用。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="SQL查询的Rows不关闭的时候回造成阻塞的问题"><a href="#SQL查询的Rows不关闭的时候回造成阻塞的问题" class="headerlink" title="SQL查询的Rows不关闭的时候回造成阻塞的问题"></a>SQL查询的Rows不关闭的时候回造成阻塞的问题</h3><p>对此的英文解释大概意思是， 如果不关闭rows， 缓冲区就有未读完的数据， 然后就造成了连接阻塞，影响接下来的查询， 最终会导致连接池的连接全部用满。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.Query(..) returns a rows struct which must be closed or completely iterated (with for rows.Next()). Otherwise there is unread data on the connection stream and the connection blocks.</span><br></pre></td></tr></table></figure>
<p>如果需要执行但不需要结果可以用 <code>db.Exec(..) </code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Simple solution: use db.Exec(..) instead. Does it work then?</span><br></pre></td></tr></table></figure>

<p>gorm 的问题</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Raw.Row()</span><br></pre></td></tr></table></figure>
<p>  如果这个row不被消费则会造成这个问题<br>如果不想消费</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">db.Exec()</span><br></pre></td></tr></table></figure>

<h2 id="golang-初始化顺序"><a href="#golang-初始化顺序" class="headerlink" title="golang 初始化顺序"></a>golang 初始化顺序</h2><p><img src="https://user-images.githubusercontent.com/7270177/59737472-62ad9600-9290-11e9-92e7-54556e4618de.png" alt="image"></p>
]]></content>
      <categories>
        <category>lang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 下的数据库使用</title>
    <url>/2018/12/13/langs/golang/golang_db/</url>
    <content><![CDATA[<p>golang 下使用数据库是几乎每个golang程序员必须经历过的一个环节， 我们在这里专门挑了两个常见的数据库的使用方式来进行简单的科普一下。<br>此文可以用作使用MySQL和Postgres的笔记性的文档， 不做深入分析， 全当给大家记备。</p>
<h2 id="Golang下使用-MySQL"><a href="#Golang下使用-MySQL" class="headerlink" title="Golang下使用 MySQL"></a>Golang下使用 <code>MySQL</code></h2><p>由于golang 官方的SDK中已经定义好了数据库的访问接口， 还内定了连接池连接方式等基本的数据库操作元素， 但Golang并没有实现每种数据库的访问方式。<br>因此如果要正常使用数据库，数据库相关的开发者需要找到定义了数据库具体访问方式与协议的数据库的驱动， 以访问数据库。 下面我们就从驱动讲起。  </p>
<h3 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go get github.com/go-sql-driver/mysql</span><br></pre></td></tr></table></figure>
<h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><h4 id="创建数据库访问对象-sql-DB"><a href="#创建数据库访问对象-sql-DB" class="headerlink" title="创建数据库访问对象 *sql.DB"></a>创建数据库访问对象 <code>*sql.DB</code></h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;database/sql&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">    _ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    USERNAME = <span class="string">&quot;root&quot;</span></span><br><span class="line">    PASSWORD = <span class="string">&quot;*******&quot;</span></span><br><span class="line">    NETWORK  = <span class="string">&quot;tcp&quot;</span></span><br><span class="line">    SERVER   = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">    PORT     = <span class="number">3306</span></span><br><span class="line">    DATABASE = <span class="string">&quot;blog&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getDb</span><span class="params">()</span></span> *sql.DB &#123;</span><br><span class="line">    dsn := fmt.Sprintf(<span class="string">&quot;%s:%s@%s(%s:%d)/%s&quot;</span>,USERNAME,PASSWORD,NETWORK,SERVER,PORT,DATABASE)</span><br><span class="line">    DB,err := sql.Open(<span class="string">&quot;mysql&quot;</span>,dsn)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;Open mysql failed,err:%v\n&quot;</span>,err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    DB.SetConnMaxLifetime(<span class="number">100</span>*time.Second)  <span class="comment">//最大连接周期，超过时间的连接就close</span></span><br><span class="line">    DB.SetMaxOpenConns(<span class="number">100</span>）<span class="comment">//设置最大连接数</span></span><br><span class="line">    DB.SetMaxIdleConns(<span class="number">16</span>) <span class="comment">//设置闲置连接数</span></span><br><span class="line">    <span class="keyword">return</span> db</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mysqlDb = getDb()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用此函数，则为单例， 只在初始化的时候创建一次， 不会多创建无用的连接池</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetDb</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> mysqlDb</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FetchData</span><span class="params">(db *sql.DB)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 查询多行</span></span><br><span class="line">    rows, err := db.Query(<span class="string">&quot;SELECT * FROM user limit 3&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// 如果err不等于nil, 一般row 为nil， 所以你直接close 会抛出空指针异常</span></span><br><span class="line">        log.Error(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注意这个一定要close</span></span><br><span class="line">    <span class="keyword">defer</span> rows.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取数据</span></span><br><span class="line">    <span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">        <span class="keyword">var</span> userId <span class="type">int</span></span><br><span class="line">        <span class="keyword">var</span> username <span class="type">string</span></span><br><span class="line">        <span class="comment">// 如果有多行， 可以把结果放到相应的数据结构中</span></span><br><span class="line">        sErr := rows.Scan(&amp;userId, &amp;username)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查询单行</span></span><br><span class="line">    row := db.QueryRow(<span class="string">&quot;SELECT username FROM user WHERE user_id = ?&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">var</span> username <span class="type">string</span></span><br><span class="line">    sErr := row.Scan(&amp;username)</span><br><span class="line">    <span class="comment">// deal with error and username</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="执行DML"><a href="#执行DML" class="headerlink" title="执行DML"></a>执行DML</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DML</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// INSERT</span></span><br><span class="line">    result, err := db.Exec(<span class="string">&quot;INSERT INTO user(username, user_id) VALUES(?, ?)&quot;</span>, username, userId)</span><br><span class="line">    stmt, err := db.Prepare(<span class="string">&quot;INSERT INTO user(username, user_id) VALUES(?, ?)&quot;</span>)</span><br><span class="line">    sr, err := stmt.Exec(username, userId)</span><br><span class="line">    <span class="comment">// result 和 sr 中都可以拿到自动生成的ID，以及影响的行数    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Golang下使用-Postgres-SQL"><a href="#Golang下使用-Postgres-SQL" class="headerlink" title="Golang下使用 Postgres SQL"></a>Golang下使用 <code>Postgres SQL</code></h2><h3 id="驱动-1"><a href="#驱动-1" class="headerlink" title="驱动"></a>驱动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go get github.com/lib/pq</span><br></pre></td></tr></table></figure>

<h3 id="基础使用-1"><a href="#基础使用-1" class="headerlink" title="基础使用"></a>基础使用</h3><h4 id="创建数据库访问对象-sql-DB-1"><a href="#创建数据库访问对象-sql-DB-1" class="headerlink" title="创建数据库访问对象 *sql.DB"></a>创建数据库访问对象 <code>*sql.DB</code></h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;database/sql&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	_ <span class="string">&quot;github.com/lib/pq&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	host     = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">	port     = <span class="number">1234</span></span><br><span class="line">	user     = <span class="string">&quot;testuser&quot;</span></span><br><span class="line">	password = <span class="string">&quot;testpass&quot;</span></span><br><span class="line">	dbname   = <span class="string">&quot;test_db&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getDb</span><span class="params">()</span></span> *sql.DB &#123;</span><br><span class="line">	psqlInfo := fmt.Sprintf(<span class="string">&quot;host=%s port=%d user=%s &quot;</span>+</span><br><span class="line">		<span class="string">&quot;password=%s dbname=%s sslmode=disable search_path=test_schema&quot;</span>,</span><br><span class="line">		host, port, user, password, dbname)</span><br><span class="line">	db, err := sql.Open(<span class="string">&quot;postgres&quot;</span>, psqlInfo)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line"></span><br><span class="line">	err = db.Ping()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> db</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同样你可以再使用单例模式创建一个访问方式</span></span><br><span class="line"><span class="comment">// 但推荐使用 sync.Once() 进行单例模式的设计</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Postgres-SQL中查询数据"><a href="#Postgres-SQL中查询数据" class="headerlink" title="Postgres SQL中查询数据"></a>Postgres SQL中查询数据</h4><p>由于其他的与MySQL一样， 因此此处实例就简单一点写明：</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QueryPostgres</span><span class="params">(db *sql.DB)</span></span> &#123;</span><br><span class="line">    <span class="comment">// MySQL 使用 &quot;?&quot; Postgres 使用 $num,</span></span><br><span class="line">    <span class="comment">// 使用 ？ postgres 会报错</span></span><br><span class="line">    db.Query(<span class="string">&quot;SELECT * FROM user WHERE user_id = $1&quot;</span>, userId)</span><br><span class="line">    db.QueryRow(<span class="string">&quot;SELECT * FROM user WHERE user_id = $1&quot;</span>, userId)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Postgres-SQL-中进行DML操作"><a href="#Postgres-SQL-中进行DML操作" class="headerlink" title="Postgres SQL 中进行DML操作"></a>Postgres SQL 中进行DML操作</h4><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DML</span><span class="params">(db *sql.DB)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 貌似必须得用stmt 直接使用Exec 会报错</span></span><br><span class="line">    stmt, err := db.Prepare(<span class="string">&quot;UPDATE user SET username= $1 WHERE user_id = $2&quot;</span>)</span><br><span class="line">    stmt.exec(<span class="string">&quot;Lily&quot;</span>, <span class="number">123</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用数据库的注意点"><a href="#使用数据库的注意点" class="headerlink" title="使用数据库的注意点"></a>使用数据库的注意点</h2><p>golang 使用数据库的注意点都基本相同因此不再把postgres跟mysql分开讲述</p>
<h3 id="合理创建连接池"><a href="#合理创建连接池" class="headerlink" title="合理创建连接池"></a>合理创建连接池</h3><ol>
<li>合理设定连接池参数</li>
<li>对于一个数据库仅仅创建一个连接池</li>
</ol>
<h3 id="关闭该关闭的结果集"><a href="#关闭该关闭的结果集" class="headerlink" title="关闭该关闭的结果集"></a>关闭该关闭的结果集</h3><p>主要还是提到的</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果不关闭， 它会慢慢的耗尽连接池的连接， 并且让你无连接可用</span></span><br><span class="line">rows.Close()</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>lang</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>golang 学习笔记</title>
    <url>/2017/03/13/langs/golang/index/</url>
    <content><![CDATA[<h1 id="go-doc"><a href="#go-doc" class="headerlink" title="go-doc"></a>go-doc</h1><p>golang 中文文档<br>本文主要分三部分来帮助初学者能够顺利入坑<code>golang</code>， 第一部分主要是讲golang语法， 第二部分主要是讲golang的工程化的东西，附带会推荐一些常用的三方包。<br>第三部分则主要是介绍这门语言的编程思想，常见的思路。<br>学习一门语言，主要是学习语法、工程化、以及这门语言的编程思想。<br>附录则会讲一些工具的使用</p>
<h2 id="golang-基本语法"><a href="#golang-基本语法" class="headerlink" title="golang 基本语法"></a>golang 基本语法</h2><p>参见<a href="demo">demo</a>下面的， 基本10分钟看完就学会了</p>
<h2 id="golang-工程化"><a href="#golang-工程化" class="headerlink" title="golang 工程化"></a>golang 工程化</h2><p>golang 工程化是教大家如何配置golang项目，如何组织代码结构，以及如何调试分析，进行单元测试与性能测试等等。工程化是一门语言离不开的话题，好的工程化与工具可以令人事半功倍。</p>
<h3 id="golang-开发工具"><a href="#golang-开发工具" class="headerlink" title="golang 开发工具"></a>golang 开发工具</h3><p>常见的golang开发工具有非常多，但有着比较好的代码补全，以及其他提高编程体验的IDE却为数不多。目前市面上比较流行的开发工具主要有如下几个，也可能有些高手手写vim插件使用vim之类的，此类的不做说明了。</p>
<ol>
<li>goland</li>
<li>vscode</li>
<li>lite ide</li>
</ol>
<p>以上三个IDE(集成开发环境) 我更倾向于使用jetbrains 的 goland, 虽然goland目前有成吨的bug, 但由于习惯问题，我还是习惯使用，大家也可以根据自己的习惯来使用相应的IDE。后面会有专门的文章对goland下如何配置golang项目进行详细说明。</p>
<h3 id="golang-项目组织结构"><a href="#golang-项目组织结构" class="headerlink" title="golang 项目组织结构"></a>golang 项目组织结构</h3><p>一般而言一个非库型golang项目会存在一个main.go, 用作程序的主入口。<br>同时也会存在一些模块，跟一些配置文件。这些配置文件与模块的推荐的放置方式如下。后面也会有专题去说明我们这样放置的道理与好处。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module1_dir</span><br><span class="line">module2_dir</span><br><span class="line">others.go</span><br><span class="line">main.go</span><br><span class="line">config_file</span><br><span class="line">readme</span><br></pre></td></tr></table></figure>

<h3 id="dep与-go-module"><a href="#dep与-go-module" class="headerlink" title="dep与 go module"></a><code>dep</code>与 <code>go module</code></h3><p> <code>dep</code> 是 <code>go module</code> 推出之前半官方的一个依赖管理工具，它使用起来非常简单， 它的总体思想是把依赖代码集成到项目中的vendor目录去，但不需要手动管理这些依赖。这样做有一个好处：在编译期不用下载额外的依赖。但也有个坏处：会使得代码仓库变得比较庞大， 除非使用ignore 忽略这个vendor目录<br>2. <code>go module</code> 是golang官方推出的在 <code>1.11</code>版本后用来取代其他各种依赖管理工具的官方工具，它的思想跟<code>maven</code>的思想有点像， 与<code>dep</code>不同的就是它会把依赖不放入项目中去，而是管理到 <code>GOPATH</code>下面。这样做可以节省很多的代码仓库的空间。在进行编译的时候提前把依赖下载好，就不存在编译的时候下载依赖的问题了， 是以后的方向。</p>
<h3 id="golang-生成各个平台下的可执行文件"><a href="#golang-生成各个平台下的可执行文件" class="headerlink" title="golang 生成各个平台下的可执行文件"></a>golang 生成各个平台下的可执行文件</h3><p>golang 生成其他平台的二进制文件是非常非常简单的，只需要进行简单的一个环境变量的设置即可生成 mac&#x2F;windows&#x2F;linux 等平台下的二进制文件， 二进制文件可以直接运行而不需要像java一样需要一个 <code>jre</code>, 这也许就是golang的一个简单哲学。</p>
<h3 id="golang-单元测试与性能测试"><a href="#golang-单元测试与性能测试" class="headerlink" title="golang 单元测试与性能测试"></a>golang 单元测试与性能测试</h3><p>golang提供了简单的单元测试与性能测试的功能， 虽然简单却很强大，后面会专门文档来说明如何去写单元测试与性能测试。<br>golang的单元测试与性能测试的文件需要以 <code>_test.go</code>结尾<br>单测方法和性能测试方法需要用类似如下方法声名。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 单元测试需要以Test开头的函数名称</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGenerateQrCode</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	GenerateQrCode()</span><br><span class="line">	<span class="comment">// t.Fail()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 性能测试需要以Benchmark 开头的函数名称</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkGenerateQrCode</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">	GenerateQrCode()</span><br><span class="line">	<span class="comment">// b.ReportAllocs()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="golang-内存分析"><a href="#golang-内存分析" class="headerlink" title="golang 内存分析"></a>golang 内存分析</h3><p><code>pprof</code></p>
<h3 id="golang-远程调试"><a href="#golang-远程调试" class="headerlink" title="golang 远程调试"></a>golang 远程调试</h3><p><code>dlv</code></p>
<h2 id="golang-编程思想"><a href="#golang-编程思想" class="headerlink" title="golang 编程思想"></a>golang 编程思想</h2><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="go-fmt"><a href="#go-fmt" class="headerlink" title="go fmt"></a>go fmt</h3><h3 id="go-doc-1"><a href="#go-doc-1" class="headerlink" title="go doc"></a>go doc</h3><h3 id="go-mod"><a href="#go-mod" class="headerlink" title="go mod"></a>go mod</h3>]]></content>
      <categories>
        <category>lang</category>
      </categories>
      <tags>
        <tag>lang</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang JSON 详解</title>
    <url>/2019/12/02/langs/golang/json/</url>
    <content><![CDATA[<h2 id="GOLANG-JSON-详解"><a href="#GOLANG-JSON-详解" class="headerlink" title="GOLANG JSON 详解"></a>GOLANG JSON 详解</h2><h3 id="JSON-简介"><a href="#JSON-简介" class="headerlink" title="JSON 简介"></a>JSON 简介</h3><p><code>json</code> 是JavaScript Object Notation  的简称, 它是一种数据格式定义语言， 使用起来非常简单，层级结构也非常明确，学习成本几乎为0， 两分钟即可明白它的格式和含义，并上上手写自己的一段json, 下面是个json的实例</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    mems<span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Tom&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="JSON-库"><a href="#JSON-库" class="headerlink" title="JSON 库"></a>JSON 库</h3><p>对于golang 而言， json解析也是sdk自带的一个功能， 而且它还定义了json的一些规范，位置在 <code>encoding/json</code> 下面。</p>
<p>另外还有一个值得一提的json库是 <code>github.com/json-iterator/go</code>， 据说他有着非常高的性能</p>
<p><img src="https://camo.githubusercontent.com/9f07f16d9d489005278c9722c785b2595b01c59e/687474703a2f2f6a736f6e697465722e636f6d2f62656e63686d61726b732f676f2d62656e63686d61726b2e706e67" alt="json-iterator"></p>
<h4 id="API-定义"><a href="#API-定义" class="headerlink" title="API 定义"></a>API 定义</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 序列化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Marshal</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>)</span><br><span class="line"><span class="comment">// 序列化并且加缩进</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MarshalIndent</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;, prefix, indent <span class="type">string</span>)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>)</span><br><span class="line"><span class="comment">// 反序列化 </span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unmarshal</span><span class="params">(data []<span class="type">byte</span>, v <span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">error</span></span><br></pre></td></tr></table></figure>

<h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Test <span class="keyword">struct</span> &#123;</span><br><span class="line">    Content     <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testJson</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span>  a A</span><br><span class="line">	<span class="comment">// 序列化</span></span><br><span class="line">	d, err := json.Marshal(a)</span><br><span class="line">	<span class="comment">// 反序列化</span></span><br><span class="line">	json.Unmarshal(d, &amp;a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="JSON-TAGS"><a href="#JSON-TAGS" class="headerlink" title="JSON TAGS"></a>JSON TAGS</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="type">string</span> <span class="string">`json:&quot;name,omitempty&quot;`</span> <span class="comment">// name， 可为空空则忽略</span></span><br><span class="line">	Age  <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">	Num  <span class="type">uint64</span> <span class="string">`json:&quot;num,string&quot;`</span> <span class="comment">// 把num在序列化的时候序列化成string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="json-html-注意事项"><a href="#json-html-注意事项" class="headerlink" title="json html 注意事项"></a>json html 注意事项</h4><p>html的encode的时候往往会有问题， 因为默认的json的marshal 方法是忽略这点的， html标签中的 <code>&gt;</code>, <code>&lt;</code>, <code>&amp;</code> 会被golang变掉， 如果想保持原样请用如下方式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testJson</span><span class="params">()</span></span> &#123;</span><br><span class="line">    t := <span class="built_in">new</span>(Test)</span><br><span class="line">    t.Content = <span class="string">&quot;&lt;p&gt;test&lt;/p&gt;&quot;</span></span><br><span class="line">    bf := bytes.NewBuffer([]<span class="type">byte</span>&#123;&#125;)</span><br><span class="line">    jsonEncoder := json.NewEncoder(bf)</span><br><span class="line">    jsonEncoder.SetEscapeHTML(<span class="literal">false</span>)</span><br><span class="line">    jsonEncoder.Encode(t)</span><br><span class="line">    fmt.Println(bf.String())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="JSON-自定义marshal"><a href="#JSON-自定义marshal" class="headerlink" title="JSON 自定义marshal"></a>JSON 自定义marshal</h4><p>在 encoding 包下有个文件叫 <code>encoding.go</code> 里面定义了很多接口，在反序列化的时候会被调用，如果你想像java那样通过设置 getter 和setter来改变默认的行为， 你只需要把被处理的对象实现这些接口就行了， 例如我们常见的 <code>logrus.Level</code> 便实现了这一接口， 可以使得 “info”字符串可以被反序列化成 uint32</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TextMarshaler is the interface implemented by an object that can</span></span><br><span class="line"><span class="comment">// marshal itself into a textual form.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// MarshalText encodes the receiver into UTF-8-encoded text and returns the result.</span></span><br><span class="line"><span class="keyword">type</span> TextMarshaler <span class="keyword">interface</span> &#123;</span><br><span class="line">	MarshalText() (text []<span class="type">byte</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TextUnmarshaler is the interface implemented by an object that can</span></span><br><span class="line"><span class="comment">// unmarshal a textual representation of itself.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// UnmarshalText must be able to decode the form generated by MarshalText.</span></span><br><span class="line"><span class="comment">// UnmarshalText must copy the text if it wishes to retain the text</span></span><br><span class="line"><span class="comment">// after returning.</span></span><br><span class="line"><span class="keyword">type</span> TextUnmarshaler <span class="keyword">interface</span> &#123;</span><br><span class="line">	UnmarshalText(text []<span class="type">byte</span>) <span class="type">error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>lang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang的内存分析工具pprof</title>
    <url>/2017/03/13/langs/golang/memory_analyze/</url>
    <content><![CDATA[<p>pprof 的使用</p>
]]></content>
      <categories>
        <category>lang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang slice 与 数组详解</title>
    <url>/2019/12/02/langs/golang/slice/</url>
    <content><![CDATA[<h2 id="golang-slice-与数组详解"><a href="#golang-slice-与数组详解" class="headerlink" title="golang slice 与数组详解"></a>golang slice 与数组详解</h2><p>对于很多人来说golang的 slice 与数组很难分清楚具体的区别，不知道什么情况下是数组什么情况下是slice，两者有什么区别，怎么 使用它们， 本文就slice与数数组的区别做出一个详细的说明。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><h4 id="slice-定义"><a href="#slice-定义" class="headerlink" title="slice 定义"></a>slice 定义</h4><p>slice的定义比较灵活， 可以直接用make来定义， 也可以直接初始化好</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = []<span class="type">byte</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;		<span class="comment">// 定义一个长度为3容量为3的slice， 并初始化好数据</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">3</span>)   <span class="comment">// 定义一个长度为0， 容量为3的slice</span></span><br></pre></td></tr></table></figure>
<h4 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h4><p>数据在定义的时候，就指定了长度，且长度与容量相等  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">3</span>]<span class="type">byte</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment">// 定义一个长度为3的数组, 并初始化好</span></span><br><span class="line"><span class="keyword">var</span> b = [<span class="number">2</span>]<span class="type">byte</span>&#123;&#125;         <span class="comment">// 定义一个长度为2的数组, 初始化为 0</span></span><br></pre></td></tr></table></figure>

<h3 id="使用区别"><a href="#使用区别" class="headerlink" title="使用区别"></a>使用区别</h3><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><p>slice 对于golang来说使用的更普遍一些，因为其灵活性非常好，可以自动扩容， 当然功能多，意味着性能相比功能单一的数组来说较低一些  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">var</span> a = []<span class="type">byte</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">fmt.Println(<span class="built_in">append</span>(a, <span class="type">byte</span>(<span class="number">1</span>)))	<span class="comment">// ok, slice 可以被append, 且slice 会自动扩容</span></span><br><span class="line">   b[<span class="number">1</span>] = <span class="type">int</span>(a[<span class="number">2</span>])	<span class="comment">// ok, slice 也可以根据下标进行操作</span></span><br><span class="line">   <span class="built_in">len</span>(a) <span class="comment">// 这时长度为4, 容量为8（2倍）</span></span><br></pre></td></tr></table></figure>

<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>数组一旦定义了就固定了类型使用起来也只能根据下标进行操作，不同长度的数组，其类型不同，即便其基类型相同，仍然是不同的类型  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// append(a, b) 报错， 因为数组不能进行append</span></span><br><span class="line">b[<span class="number">1</span>] = a[<span class="number">2</span>] <span class="comment">// ok 可以直接根据数组下标进行操作</span></span><br><span class="line">fmt.Println(reflect.TypeOf(a) == reflect.TypeOf(b))	<span class="comment">// false 不类型不同, 所以也不能进行赋值或者转换</span></span><br></pre></td></tr></table></figure>

<h3 id="相互转换"><a href="#相互转换" class="headerlink" title="相互转换"></a>相互转换</h3><p>尽管如此golang提供了方便的slice与数组相互转换的机制，下面是一些示例代码  </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">conv</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := [<span class="number">3</span>]<span class="type">byte</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;	<span class="comment">// 定义一个数组</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 数组转slice</span></span><br><span class="line">	b := a[:]</span><br><span class="line"></span><br><span class="line">	<span class="comment">// slice 转数组， 其实这种情况很少</span></span><br><span class="line">	c :=[<span class="number">3</span>]<span class="type">byte</span>&#123;&#125;</span><br><span class="line">	<span class="built_in">copy</span>(c[:], b)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 查看结果</span></span><br><span class="line">	fmt.Println(reflect.TypeOf(a))</span><br><span class="line">	fmt.Println(reflect.TypeOf(b))</span><br><span class="line">	fmt.Println(reflect.TypeOf(c))</span><br><span class="line">	fmt.Println(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[3]uint8</span><br><span class="line">[]uint8</span><br><span class="line">[3]uint8</span><br><span class="line">[1 2 3]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>lang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown 语法笔记</title>
    <url>/2016/01/13/langs/grammar/markdown/</url>
    <content><![CDATA[<h1 id="Markdown基本常用语法"><a href="#Markdown基本常用语法" class="headerlink" title="Markdown基本常用语法"></a>Markdown基本常用语法</h1><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul>
<li>你好</li>
<li>xx列表</li>
</ul>
<ul>
<li><code>There is a literal backtick (`) here.</code></li>
<li>Use the <code>printf()</code> function.</li>
</ul>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul>
<li>链接 <a href="http://www.baidu.com/">百度</a><blockquote>
<h2 id="这是一个标题。"><a href="#这是一个标题。" class="headerlink" title="这是一个标题。"></a>这是一个标题。</h2><ol>
<li>这是第一行列表项。</li>
<li>这是第二行列表项。</li>
</ol>
<p>给出一些例子代码：</p>
<pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre>
</blockquote>
</li>
</ul>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://www.baidu.com/img/bd_logo1.png" alt="百度" title="其他标题"></p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table>
<thead>
<tr>
<th align="left">表头1</th>
<th align="center">列11</th>
<th align="right">列2</th>
</tr>
</thead>
<tbody><tr>
<td align="left">居左</td>
<td align="center">居中</td>
<td align="right">居右</td>
</tr>
</tbody></table>
<h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><ul>
<li><em>被强调的文本</em></li>
<li><strong>被强调的文本</strong></li>
</ul>
]]></content>
      <categories>
        <category>gramma</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>gramma</tag>
      </tags>
  </entry>
  <entry>
    <title>yaml 高级语法笔记</title>
    <url>/2016/03/13/langs/grammar/yaml/</url>
    <content><![CDATA[<ol>
<li><p>缩进表示层级</p>
</li>
<li><p>行内表示法数组用中括号，属性用花括号， 用逗号隔开</p>
</li>
<li><p>非行内， 数组用短横线， 属性正常</p>
</li>
<li><p>!! 强制转换为字符串</p>
</li>
<li><p>字符串<br> 单引号和双引号都可以使用，双引号不会对特殊字符转义。<br> 字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格。<br> 多行字符串可以使用|保留换行符，也可以使用&gt;折叠换行（去掉转换的空格）。<br> +表示保留文字块末尾的换行，-表示删除字符串末尾的换行</p>
<p> 锚点&amp;和别名*，可以用来引用。<br> &amp;用于起别名，放在： 后面，<br> defaults: &amp;defaults<br> adapter:  postgres<br> host:     localhost</p>
<p> development:<br> database: myapp_development<br> &lt;&lt;: *defaults</p>
</li>
</ol>
]]></content>
      <categories>
        <category>gramma</category>
      </categories>
      <tags>
        <tag>gramma</tag>
        <tag>yaml</tag>
      </tags>
  </entry>
  <entry>
    <title>java 开发环境的配置</title>
    <url>/2016/03/13/langs/java/develop/</url>
    <content><![CDATA[<h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><h2 id="工具：maven"><a href="#工具：maven" class="headerlink" title="工具：maven"></a>工具：maven</h2><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p>自动项目生成工具 <code>initializr</code></p>
<h3 id="spring-mvc"><a href="#spring-mvc" class="headerlink" title="spring mvc"></a>spring mvc</h3><h3 id="spring-boot"><a href="#spring-boot" class="headerlink" title="spring boot"></a>spring boot</h3><h3 id="orm-mybatis"><a href="#orm-mybatis" class="headerlink" title="orm mybatis"></a>orm mybatis</h3>]]></content>
      <categories>
        <category>lang</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java 笔记</title>
    <url>/2016/03/13/langs/java/java/</url>
    <content><![CDATA[<h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p><img src="https://user-images.githubusercontent.com/7270177/59737806-90470f00-9291-11e9-904b-20ab88db3e52.png" alt="image"></p>
<h2 id="高cpu-使用的代码查找"><a href="#高cpu-使用的代码查找" class="headerlink" title="高cpu 使用的代码查找"></a>高cpu 使用的代码查找</h2><p>1<br>ps H -eo user,pid,ppid,tid,time,%cpu,cmd –sort&#x3D;%cpu </p>
<p>tid 是线程ID 转成十六进制去查</p>
<p>jstack 9002 &gt; stack.log</p>
<ol start="2">
<li>arthas</li>
</ol>
]]></content>
      <categories>
        <category>lang</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>etcd的安装与配置</title>
    <url>/2018/11/13/storage/etcd/etcd/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>我们将在  10.1.19.214:2380,  10.1.15.229:2380,    10.1.13.165:2380 三个机器上分别创建三个etcd节点以组成集群</p>
<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>安装比较简单， 但为了安全性起见， 推荐为etcd创建单独的用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo groupadd etcd</span><br><span class="line">sudo useradd -r -g etcd etcd</span><br></pre></td></tr></table></figure>

<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">wget https://github.com/etcd-io/etcd/releases/download/v3.3.9/etcd-v3.3.9-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>


<p>###安装<br>执行如下命令下载加压并创建好制定的文件与目录，设置好软链接等</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">tar xpf etcd-v3.3.9-linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">mv</span> etcd-v3.3.9-linux-amd64 etcd-v3.3.9</span><br><span class="line"><span class="built_in">ln</span> -sf /opt/etcd-v3.3.9 /opt/etcd</span><br><span class="line"><span class="built_in">cd</span> etcd</span><br><span class="line"><span class="built_in">mkdir</span> data</span><br><span class="line"><span class="built_in">mkdir</span> wal</span><br><span class="line"><span class="built_in">mkdir</span> ssl</span><br><span class="line"><span class="built_in">touch</span> conf.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>执行如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim conf.yml</span><br></pre></td></tr></table></figure>
<p>修改内容 , 如下加粗的内容都要改</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is the configuration file for the etcd server.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Human-readable name for this member.</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">&#x27;etcd1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Path to the data directory.</span></span><br><span class="line"><span class="attr">data-dir:</span> <span class="string">/opt/etcd/data</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Path to the dedicated wal directory.</span></span><br><span class="line"><span class="attr">wal-dir:</span> <span class="string">/opt/etcd/wal</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Number of committed transactions to trigger a snapshot to disk.</span></span><br><span class="line"><span class="attr">snapshot-count:</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Time (in milliseconds) of a heartbeat interval.</span></span><br><span class="line"><span class="attr">heartbeat-interval:</span> <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Time (in milliseconds) for an election to timeout.</span></span><br><span class="line"><span class="attr">election-timeout:</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Raise alarms when backend size exceeds the given quota. 0 means use the</span></span><br><span class="line"><span class="comment"># default quota.</span></span><br><span class="line"><span class="attr">quota-backend-bytes:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of comma separated URLs to listen on for peer traffic.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of comma separated URLs to listen on for client traffic.</span></span><br><span class="line"><span class="attr">listen-client-urls:</span> <span class="string">http://10.111.8.11:2379,http://127.0.0.1:2379</span></span><br><span class="line"><span class="attr">listen-peer-urls:</span> <span class="string">http://10.111.8.11:2380</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Maximum number of snapshot files to retain (0 is unlimited).</span></span><br><span class="line"><span class="attr">max-snapshots:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Maximum number of wal files to retain (0 is unlimited).</span></span><br><span class="line"><span class="attr">max-wals:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Comma-separated white list of origins for CORS (cross-origin resource sharing).</span></span><br><span class="line"><span class="attr">cors:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of this member&#x27;s peer URLs to advertise to the rest of the cluster.</span></span><br><span class="line"><span class="comment"># The URLs needed to be a comma-separated list.</span></span><br><span class="line"><span class="attr">initial-advertise-peer-urls:</span> <span class="string">http://10.111.8.11:2380</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of this member&#x27;s client URLs to advertise to the public.</span></span><br><span class="line"><span class="comment"># The URLs needed to be a comma-separated list.</span></span><br><span class="line"><span class="attr">advertise-client-urls:</span> <span class="string">http://10.111.8.11:2379</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Discovery URL used to bootstrap the cluster.</span></span><br><span class="line"><span class="attr">discovery:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Valid values include &#x27;exit&#x27;, &#x27;proxy&#x27;</span></span><br><span class="line"><span class="attr">discovery-fallback:</span> <span class="string">&#x27;proxy&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTP proxy to use for traffic to discovery service.</span></span><br><span class="line"><span class="attr">discovery-proxy:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DNS domain used to bootstrap initial cluster.</span></span><br><span class="line"><span class="attr">discovery-srv:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initial cluster configuration for bootstrapping.</span></span><br><span class="line"><span class="attr">initial-cluster:</span> <span class="string">etcd0=http://10.111.10.151:2380,etcd1=http://10.111.8.11:2380,etcd2=http://10.111.9.145:2380,etcd3=http://10.111.10.152:2380,etcd4=http://10.111.8.12:2380</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initial cluster token for the etcd cluster during bootstrap.</span></span><br><span class="line"><span class="attr">initial-cluster-token:</span> <span class="string">&#x27;etcd-cluster&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initial cluster state (&#x27;new&#x27; or &#x27;existing&#x27;).</span></span><br><span class="line"><span class="attr">initial-cluster-state:</span> <span class="string">&#x27;new&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reject reconfiguration requests that would cause quorum loss.</span></span><br><span class="line"><span class="attr">strict-reconfig-check:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Accept etcd V2 client requests</span></span><br><span class="line"><span class="attr">enable-v2:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable runtime profiling data via HTTP server</span></span><br><span class="line"><span class="attr">enable-pprof:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Valid values include &#x27;on&#x27;, &#x27;readonly&#x27;, &#x27;off&#x27;</span></span><br><span class="line"><span class="attr">proxy:</span> <span class="string">&#x27;off&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Time (in milliseconds) an endpoint will be held in a failed state.</span></span><br><span class="line"><span class="attr">proxy-failure-wait:</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Time (in milliseconds) of the endpoints refresh interval.</span></span><br><span class="line"><span class="attr">proxy-refresh-interval:</span> <span class="number">30000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Time (in milliseconds) for a dial to timeout.</span></span><br><span class="line"><span class="attr">proxy-dial-timeout:</span> <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Time (in milliseconds) for a write to timeout.</span></span><br><span class="line"><span class="attr">proxy-write-timeout:</span> <span class="number">5000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Time (in milliseconds) for a read to timeout.</span></span><br><span class="line"><span class="attr">proxy-read-timeout:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#client-transport-security:</span></span><br><span class="line"> <span class="comment"># Path to the client server TLS cert file.</span></span><br><span class="line"><span class="comment"># cert-file: </span></span><br><span class="line"> <span class="comment">#/opt/etcd/ssl/etcd.pem</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Path to the client server TLS key file.</span></span><br><span class="line"><span class="comment"># key-file:</span></span><br><span class="line"> <span class="comment"># /opt/etcd/ssl/etcd-key.pem</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable client cert authentication.</span></span><br><span class="line"><span class="comment"># client-cert-auth: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Path to the client server TLS trusted CA cert file.</span></span><br><span class="line"><span class="comment"># trusted-ca-file:</span></span><br><span class="line"> <span class="comment"># /opt/etcd/ssl/etcd-root-ca.pem</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Client TLS using generated certificates</span></span><br><span class="line"> <span class="comment"># auto-tls:</span></span><br><span class="line"> <span class="comment"># false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># peer-transport-security:</span></span><br><span class="line"> <span class="comment"># Path to the peer server TLS cert file.</span></span><br><span class="line"><span class="comment"># cert-file:</span></span><br><span class="line"> <span class="comment"># /opt/etcd/ssl/etcd.pem</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Path to the peer server TLS key file.</span></span><br><span class="line"><span class="comment"># key-file:</span></span><br><span class="line"> <span class="comment"># /opt/etcd/ssl/etcd-key.pem</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable peer client cert authentication.</span></span><br><span class="line"><span class="comment"># client-cert-auth: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Path to the peer server TLS trusted CA cert file.</span></span><br><span class="line"><span class="comment"># trusted-ca-file:</span></span><br><span class="line"> <span class="comment">#/opt/etcd/ssl/etcd-root-ca.pem</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Peer TLS using generated certificates.</span></span><br><span class="line"> <span class="comment"># auto-tls:</span></span><br><span class="line"> <span class="comment"># false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable debug-level logging for etcd.</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logger:</span> <span class="string">zap</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify &#x27;stdout&#x27; or &#x27;stderr&#x27; to skip journald logging even when running under systemd.</span></span><br><span class="line"><span class="attr">log-outputs:</span> [<span class="string">stderr</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Force to create a new one member cluster.</span></span><br><span class="line"><span class="attr">force-new-cluster:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">auto-compaction-mode:</span> <span class="string">periodic</span></span><br><span class="line"><span class="attr">auto-compaction-retention:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意： 里面关于集群的一些点， 和本机配置的一些点， 如果要配置tls&#x2F;https 需要自行准备证书， 然后配置被如上注释了， 根据经验，如果配置了https， 再转到http需要清空数据才可以转， 否则是不能转的</p>
<h2 id="最后的步骤"><a href="#最后的步骤" class="headerlink" title="最后的步骤"></a>最后的步骤</h2><p>更改权限使得使用etcd用户来启动etcd节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/etcd</span><br><span class="line"><span class="built_in">chown</span> -R etcd:etcd /opt/etcd</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>配置systemd 的 unit文件并加入开机启动</p>
<p>vim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;etcd.service  并贴入如下内容</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Etcd Server</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"><span class="attr">After</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"><span class="attr">Wants</span>=network-<span class="literal">on</span>line.target</span><br><span class="line"><span class="attr">Documentation</span>=https://github.com/coreos</span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">User</span>=etcd</span><br><span class="line"><span class="attr">Type</span>=notify</span><br><span class="line"><span class="attr">WorkingDirectory</span>=/opt/etcd/</span><br><span class="line"><span class="attr">ExecStart</span>=/opt/etcd/etcd --config-file=/opt/etcd/conf.yml</span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">5</span></span><br><span class="line"><span class="attr">LimitNOFILE</span>=<span class="number">65536</span></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>为了方便etcdctl的使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -sf /opt/etcd/etcdctl /usr/bin/etcdctl</span><br></pre></td></tr></table></figure>

<p>etcd 多版本支持， 支持的有v2的API， 与V3 的API， 但V2与V3 是完全隔离的， V2 更像ZK， V3 更像KV </p>
<h3 id="V2-验证集群健康状况"><a href="#V2-验证集群健康状况" class="headerlink" title="V2 验证集群健康状况"></a>V2 验证集群健康状况</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">etcdctl cluster-health</span><br></pre></td></tr></table></figure>

<p>如果健康则返回如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">member 42137edb694602d3 is healthy: got healthy result from http://10.1.15.229:2379</span><br><span class="line">member b813a1f117f7f288 is healthy: got healthy result from http://10.1.13.165:2379</span><br><span class="line">member e6992029de967f70 is healthy: got healthy result from http://10.1.19.214:2379</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="V3-验证集群监控"><a href="#V3-验证集群监控" class="headerlink" title="V3 验证集群监控"></a>V3 验证集群监控</h3><p>在此之前需要先设置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export ETCDCTL_API=3</span><br></pre></td></tr></table></figure>
<p>验证命令如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">etcdctl --endpoints=http://10.1.13.165:2379,http://10.1.15.229:2379,http://10.1.19.214:2379 endpoint health</span><br></pre></td></tr></table></figure>
<p>如果健康则返回如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://10.1.13.165:2379 is healthy: successfully committed proposal: took = 1.605107ms</span><br><span class="line">http://10.1.19.214:2379 is healthy: successfully committed proposal: took = 2.097534ms</span><br><span class="line">http://10.1.15.229:2379 is healthy: successfully committed proposal: took = 2.983391ms</span><br></pre></td></tr></table></figure>


<h2 id="配置推荐"><a href="#配置推荐" class="headerlink" title="配置推荐"></a>配置推荐</h2><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>etcd是可以利用多核的性能的</p>
<p>轻度使用	CPU</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QPS &lt; 2000	2-4core</span><br></pre></td></tr></table></figure>
<p>中度使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QPS &gt; 5000	8-16core</span><br></pre></td></tr></table></figure>
<h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>轻度使用	Mem</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QPS &lt; 2000	4-8G</span><br></pre></td></tr></table></figure>
<p>中度使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QPS &gt; 5000	16-64G</span><br></pre></td></tr></table></figure>
<h3 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h3><p>不需要做raid，raid0 就可以，  因为etcd就是高可用的， 推荐使用固态硬盘</p>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>需要稳定可靠的网络， 网络不行的话，容易导致可用性比较低</p>
<p>如果要多数据中心部署， 尽量离近一些。</p>
<h2 id="Etcd的一些限制"><a href="#Etcd的一些限制" class="headerlink" title="Etcd的一些限制"></a>Etcd的一些限制</h2><h3 id="请求大小限制"><a href="#请求大小限制" class="headerlink" title="请求大小限制"></a>请求大小限制</h3><p>etcd多用于处理小的key-value对的元信息，大的请求虽然也可以工作， 但会增加延时，目前默认最大支持1MB的请求， 这个限制可以通过配置来更改</p>
<h3 id="存储大小限制"><a href="#存储大小限制" class="headerlink" title="存储大小限制"></a>存储大小限制</h3><p>默认的存储限制是 2GB, 可以用 –quota-backend-bytes flag 来配置;最大支持 8GB.</p>
<h2 id="https"><a href="#https" class="headerlink" title="https"></a>https</h2><p>https 与http互转是有坑的， 可能需要用代码来数据迁移， data下面的与 wal 里面的清空， 通过调整配置可以互转<br>怀疑是这两个地方的一些文件里记录了之前一些tls，的一些设置， 导致互转不成。</p>
]]></content>
      <categories>
        <category>storage</category>
        <category>etcd</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>etcd</tag>
      </tags>
  </entry>
  <entry>
    <title>简谈MySQL报警</title>
    <url>/2016/08/13/storage/mysql/alert/</url>
    <content><![CDATA[<h2 id="报警"><a href="#报警" class="headerlink" title="报警"></a>报警</h2><p>报警时我们保证稳定性的最后一道坎， 如果进入了报警的阶段，应用离Down掉就不远了。 报警也是我们保障稳定性的一个重要的环节。<br>对于报警的设置是比较考究的， 下面主要会分析一下报警的几个方面。</p>
<h3 id="报警的及时性-★★★★★"><a href="#报警的及时性-★★★★★" class="headerlink" title="报警的及时性 ★★★★★"></a>报警的及时性 ★★★★★</h3><p>对于报警，笔者认为最应该优先保障的就是及时性， 试想一个应用已经被用户反馈挂了的情况下， 这个时候就算不用报警，开发者应该也已经知道了。 这个时候报警存在的意义就是0了。因此报警最重要的一个特性就是要能及时地反馈问题，让应用开发者能够在用户发现之前发现问题，处理问题和解决问题。</p>
<h3 id="报警的准确性-★★★★☆"><a href="#报警的准确性-★★★★☆" class="headerlink" title="报警的准确性 ★★★★☆"></a>报警的准确性 ★★★★☆</h3><p>很多人会碰到收到的报警太多的情况， 也有很多人会碰到收不到报警的情况。这两种情况基本上来讲都是不太正常的， 当然不排除后者是在应用非常良好的情况下，有一堆其他措施能够保证不需要走到报警这个环节。对于过多的报警，很多人往往容易麻木， 这样就容易造成人们心理的一种懈怠， 反正之前报警什么事情也不会发生， 现在报警应该也不会发生什么事情，一旦到了关键时候，警也报了，但没有相应的人员去处理，最终酿成应用挂掉影响用户的惨剧。 所以报警不光是要能及时， 也要能准确， 能够区分报警的优先级别，用不同的方式来警告开发者， 并正确反馈情况。</p>
<h3 id="报警的渠道和高可用-★★★★☆"><a href="#报警的渠道和高可用-★★★★☆" class="headerlink" title="报警的渠道和高可用 ★★★★☆"></a>报警的渠道和高可用 ★★★★☆</h3><p>说到报警的高可用， 除了报警服务本身的架构之外，本文更关注的是多渠道。<br>因为任何渠道都有阻塞或者down掉的可能性， 而且不同的渠道的触达及时性不同。<br>一般而言，电话报警的触达及时性是最高的，有电话大家往往能够及时看到。 其次，短信也是一个报警经常选择的手段， 因为短信也是会在比较短的时间内可以被开发者察觉到， 而且手机是随身携带的，不管在上班还是下班都能相对及时的收到。第三开发者往往会使用一些聊天软件如企业微信与钉钉， 这些软件在开发者使用电脑的时候可以比较及时的收到，因为性格不同， 一般开发者下班不太会关注这类软件的通知与消息，因此这类软件的有效性只能排到第三。最后一个也是一个很常见的手段：邮件。 邮件对于大家来说都不陌生， 但邮件的实时性一般会比较差一点， 但邮件有一个好处：可以沉淀比较多的内容，一起发送。</p>
<p>不同的渠道的作用与及时性也不一样，一般报警会选择多渠道结合， 科学合理的利用与选择这些渠道。</p>
<h3 id="报警的科学性与智能性-★★★☆☆"><a href="#报警的科学性与智能性-★★★☆☆" class="headerlink" title="报警的科学性与智能性 ★★★☆☆"></a>报警的科学性与智能性 ★★★☆☆</h3><p>最后一点也是不太好做的一点， 但一旦做好就会让人感觉比较舒服。试想一下，利用机器学习的方式，回顾监控需要关注的各个指标，以及当时的处理情况，通过与往期数据的结合分析， 最终做出决定是否要报警。 这类服务一般的研发成本也比较高， 但它确实可以让人感觉比较有用，比较舒服。 如果做的好， 可以在各项指标都还正常的情况下，会更早的报警，更早的反馈问题， 可以留给开发者更多的时间处理问题，这在极大程度上能减少损失；另外这类报警一般也可以比较人性化一点： 比如可以根据报警的优先级以及时间段决定是否去烦扰正在熟睡中的开发者。<br>总之这个领域可以做的比较多，但做的好往往会要求比较高的投入与比较精致的设计。</p>
]]></content>
      <categories>
        <category>storage</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的MySQL客户端</title>
    <url>/2016/07/14/storage/mysql/clients/</url>
    <content><![CDATA[<h2 id="驱动-x2F-程序连接"><a href="#驱动-x2F-程序连接" class="headerlink" title="驱动&#x2F;程序连接"></a>驱动&#x2F;程序连接</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p>如果你是maven项目，则只需要引入以下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果不是， 可以下载Jar包直接使用</p>
<h3 id="go"><a href="#go" class="headerlink" title="go"></a>go</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get -u github.com/go-sql-driver/mysql</span><br></pre></td></tr></table></figure>
<p>对于go项目直接引入依赖即可</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>由于作者我不熟悉其他语言， 不在此赘述其他语言的客户端驱动是怎么样的，但是对于大部分语言来说都有比较知名的驱动。</p>
<p>##桌面客户端<br>###	MySQL Workbench (Official)<br>MySQL 是官方的MySQL客户端，它是开源免费的，有开源社区跟Oracle的支持，功能也是比较的完善，易用性比Navicat 稍差，功能比较强大，它自带了非常多的功能，比如数据迁移，可视化Explain， Dashboard, 及常见的查询， schema 设计等等。本文将以次工具来展示MySQL的许多功能<br>###	Navicat for MySQL<br>Navicat是一款商业软件，其功能是非常的强大，UI与易用性也是屈指可数的，是一个被广泛盗版的软件<br>###	PhpMyAdmin<br>一个基于Web的SQL客户端<br>###	DBForge Studio<br>它是一个商业软件，目前存在免费版跟收费版本，收费版本功能更多一些，界面跟以前的某些版本的Visual Studio类似，功能应该也比较强大<br>###	HeidiSQL<br>使用Pascal写的一个SQL客户端工具，它有着非常强大的功能跟非常垃圾的用户使用体验。<br>###	Sequel Pro<br>Mac下的一个MySQL 客户端， 列出来只是给Mac用户多一个选择。<br>###	Eclipse与Idea 插件<br>这个是与自己的开发环境IDE集成的一种MySQL工具， 它往往提供的功能比较简单，通常包括语句查询、Schema建立与删除、自动补全等功能。</p>
]]></content>
      <categories>
        <category>storage</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Explain了解SQL语句的执行计划</title>
    <url>/2016/07/13/storage/mysql/explain/</url>
    <content><![CDATA[<h2 id="语法与含义"><a href="#语法与含义" class="headerlink" title="语法与含义"></a>语法与含义</h2><p>语义上讲EXPLAIN 、DESCRIBE 、 DESC 是一样的<br>但习惯上用法不太一样， DESC 经常用于描述一个表或者列的信息<br>EXPLAIN经常用于描述一个查询执行计划</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">desc</span> <span class="keyword">select</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">describe</span> <span class="keyword">select</span> <span class="number">1</span>;</span><br><span class="line">explain format<span class="operator">=</span>json <span class="keyword">select</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>


<h3 id="explain-type"><a href="#explain-type" class="headerlink" title="explain_type"></a>explain_type</h3><p>EXTENDED -&gt; 显示额外信息(filtered info)<br>PARTITIONS -&gt;  显示所用的分区 (目前没用到)<br>FORMAT -&gt; 显示结果的格式 (JSON&#x2F;TRADITIONAL, 分表表示用JSON或者表格形式)</p>
<p>Explain支持 SELECT&#x2F;INSERT&#x2F;UPDATE&#x2F;DELETE&#x2F;REPLACE 等语句</p>
<h3 id="Explain-结果集中需要特别注意的列"><a href="#Explain-结果集中需要特别注意的列" class="headerlink" title="Explain 结果集中需要特别注意的列"></a>Explain 结果集中需要特别注意的列</h3><table>
<thead>
<tr>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ALL</td>
<td>全表扫描</td>
</tr>
<tr>
<td>INDEX</td>
<td>使用覆盖索引，且全表扫描的时候</td>
</tr>
<tr>
<td>RANGE</td>
<td>使用索引并且是在索引范围内查找的时候</td>
</tr>
<tr>
<td>REF</td>
<td>在查询中直接用索引匹配单个值的时候</td>
</tr>
<tr>
<td>EQ_REF</td>
<td>用索引查找，而且HIT到index的时候</td>
</tr>
<tr>
<td>CONST, SYSTEM</td>
<td>MYSQL 可以把有些查询转换成常量比如用主键查找 一行记录</td>
</tr>
<tr>
<td>NULL</td>
<td>如SELECT 1 等不需要表的查询</td>
</tr>
</tbody></table>
<p><em>对于上表而言， 越往下， 效率越高</em></p>
<p><img src="https://qhyxpicoss.kujiale.com/2018/12/17/LQLZ2NIKAQBZMZASAAAAADY8_931x497.png" alt="type1"></p>
<p><img src="https://qhyxpicoss.kujiale.com/2018/12/17/LQL3LDQKAQBZOUTLAAAAAAY8_891x593.png" alt="type2"></p>
<h3 id="Key"><a href="#Key" class="headerlink" title="Key"></a>Key</h3><p>Key 是指MySQL最终决定回用哪个索引到这个执行计划中， 一般有没有用到索引及用到的是哪个索引就看此列。</p>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><p>REF 记录了 在Key列记录中的索引中所用的列，或常量</p>
<h3 id="Rows-与-Filtered"><a href="#Rows-与-Filtered" class="headerlink" title="Rows 与 Filtered"></a>Rows 与 Filtered</h3><p>ROWS列记录了查找需要查找的元素，所需要扫描的行数<br>FILTERED的列显示的是针对表里面符合某个条件的记录的百分比所做的一个悲观的估算</p>
<h3 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h3><ul>
<li><code>USING INDEX</code><br>是不是用了覆盖索引</li>
<li><code>USING WHERE</code><br>MYSQL会在检索行后根据WHERE条件进行过滤</li>
<li><code>USING TEMPORARY</code><br>在对查询结果进行排序的时候是否用了临时表</li>
<li><code>USING FILE SORT</code><br>MYSQL对查询结果进行排序，不用索引排序</li>
</ul>
<h2 id="MySQL-Visual-Explain"><a href="#MySQL-Visual-Explain" class="headerlink" title="MySQL Visual Explain"></a>MySQL Visual Explain</h2><p>Visual explain 是MySQL Workbench 带的一项功能，其他工具很少会有此项功能，它可以比较直观的告诉你整个查询的执行计划，及查取过程，是分析SQL语句不可或缺的利器。<br>在 Visual Explain中从蓝到红的效率是递减的，越偏向红效率就越低，越偏向蓝效率就越高。<br>下图是个例子<br><img src="https://qhyxpicoss.kujiale.com/2018/12/17/LQL3LDQKAQBZOUTLAAAAAAQ8_690x857.png" alt="visual explain"></p>
]]></content>
      <categories>
        <category>storage</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>MySQL</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>索引优化</title>
    <url>/2016/07/13/storage/mysql/index/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>索引是存储引擎用于快速定位记录的数据结构, 索引的优化对于性能优化是最有效的手段，良好的索引会让数据库的查询性能得到成百倍甚至千倍的提升，不好的索引也会导致数据库查询效率急剧下降。我们应该学会如何正确使用索引，来优化我们的查询，提高对索引的认知，避免MySQL 索引的误区。<br>下面主要分索引类型、索引策略、索引使用的原则与经验来介绍MySQL索引。<br>##索引类型</p>
<h3 id="Normal-普通索引"><a href="#Normal-普通索引" class="headerlink" title="Normal 普通索引"></a>Normal 普通索引</h3><p>最常见的索引， 一般都用此索引.</p>
<h3 id="Unique-唯一索引"><a href="#Unique-唯一索引" class="headerlink" title="Unique  唯一索引"></a>Unique  唯一索引</h3><p>需保证此索引对应的数据没有重复项，可以用此项来保证一些约束条件，防止重复数据</p>
<p>###Full Text 全文索引<br>FULLTEXT 用于搜索很长一篇文章的时候，效果最好。但总体来讲，效率肯定不高， 使用的时候需要用分词工具，来转换成全文索引支持的格式方可正常使用，用在比较短的文本，如果就一两行字的，普通的 INDEX 也可以。</p>
<h2 id="索引方法"><a href="#索引方法" class="headerlink" title="索引方法"></a>索引方法</h2><h3 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h3><p>B tree 索引是我们最常见，最常用的索引，在InnoDb 里，它的实际实现是基于B+ Tree的。<br>B-tree 索引可以用于范围取值，精确匹配， JOIN,  GROUP BY, ORDER BY, 应用范围非常广泛， 下面是一些例子：<br>全值匹配 如匹配 username, email<br>匹配列前缀 如匹配email 的 @前面的部分<br>匹配范围值 匹配数字类型, 日期类型， 比如  <code>user.age between 12 and 20</code><br>精确匹配某一列并者范围匹配另外一列 如 <code>user.name =‘John’ AND user.age between 12 and 20</code></p>
<p><img src="https://qhyxpicoss.kujiale.com/2018/12/17/LQL3LDQKAQBZOUTLAAAAAAA8_915x561.png" alt="Btree索引"></p>
<h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>Hash索引，基于Hash表实现，只有精确匹配所有列的查询才有效<br>实现：基于Hash 表实现，对所索引的列计算hash值，并索引。<br>优点： 结构紧凑，对于精确匹配所有列的查询，非常高效。<br>缺点：只能精确匹配所有列的值， 部分类型不适用于范围查找, Order By等， 应用范围比较窄。<br>INNODB 是不支持不是unique 的字段上加 Hash索引的。实测，如果类型是Normal 把type 改成Hash 是没用的</p>
<p>索引可以大大减少服务器所需要扫描的数据数量，帮助服务器避免排序和临时表，将随机IO变成顺序IO但索引不是万能的解决方案，不是越多越好，不恰当的索引会引起性能的下降，对于数据量表的小不如全表扫描好</p>
<h2 id="索引策略"><a href="#索引策略" class="headerlink" title="索引策略"></a>索引策略</h2><h3 id="单列索引"><a href="#单列索引" class="headerlink" title="单列索引"></a>单列索引</h3><p>单列索引是指在某一个列上建立的索引，是最常见的一种索引，一般用在一些区分性比较大的列上，比如username, 某个关联的ID<br>###	联合索引<br>联合索引是在多个列上一起建立的索引， 也是我们常见的一种索引，当有多个索引做相交的时候，通常意味着需要一个联合索引，而不是每列都建立一个索引。<br>但联合索引的作用范围尤其要注意，下图是一个基本的说明</p>
<p><img src="https://qhyxpicoss.kujiale.com/2018/12/17/LQLZ2NIKAQBZMZASAAAAADI8_476x398.png" alt="联合索引作用"></p>
<p>下图是一个实际使用的例子</p>
<p><img src="https://qhyxpicoss.kujiale.com/2018/12/17/LQL3LDQKAQBZOUTLAAAAAAI8_904x604.png" alt="l联合索引"></p>
<h3 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h3><p>聚簇索引不是一种索引类型，而是一种数据存储方式。InnoDb 的实现是在一个数据结构中保存了B-tree 索引与数据行。<br>在使用得当的情况下可以大大提高SELECT效率，但也有很大的弊端， 一张表只能有一个聚簇索引， 聚簇索引不应该包含经常修改的列<br>候选列： 主键，JOIN的列， 不常修改的列 GROUP BY 与ORDER BY 中用的列<br>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> CLUSTER INDEX xxxx</span><br></pre></td></tr></table></figure>
<h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>覆盖索引不是一种索引，而是一种索引建立的方式。简单的来说， 你需要查的数据都在，索引所在的列内， 这样就是覆盖索引。索引的条目数，往往远小于数据行数，如果只读取索引不读取数据行，会极大的提高性能, 因为索引是按照顺序排列的，所以IO消费会少的多，以下情况覆盖索引有可能无法起作用：</p>
<ol>
<li>没有任何索引能够覆盖这个查询</li>
<li>语句中有用了 LIKE　之类的操作<br>下面则是一个使用覆盖索引的例子， 注意Extra字段里面会不一样</li>
</ol>
<p><img src="https://qhyxpicoss.kujiale.com/2018/12/17/LQLZ2NIKAQBZMZASAAAAADQ8_906x493.png" alt="覆盖索引"></p>
<h2 id="原则与经验"><a href="#原则与经验" class="headerlink" title="原则与经验"></a>原则与经验</h2><ol>
<li>不能一味的乱建索引，索引与查询优化相结合</li>
<li>索引要尽量找选择性比较高的列</li>
<li>避免无用索引与重复索引</li>
<li>索引应建立在经常被查询的列上</li>
<li>可预期的小型表不应建立索引</li>
<li>避免选择大型数据类型的列做为索引</li>
<li>要在经常用作过滤器的列上建索引</li>
<li>在经常Group By Order By  JOIN 的列上建索引</li>
</ol>
]]></content>
      <categories>
        <category>storage</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 安装配置 mysql5.6</title>
    <url>/2016/05/13/storage/mysql/install/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line">sudo yum -y localinstall mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line">sudo yum -y install mysql-community-server</span><br><span class="line">sudo systemctl start mysqld</span><br><span class="line">sudo systemctl enable mysqld</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="找到-root-密码"><a href="#找到-root-密码" class="headerlink" title="找到 root 密码"></a>找到 root 密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /var/log/mysqld.log </span><br></pre></td></tr></table></figure>
<h3 id="更改root密码"><a href="#更改root密码" class="headerlink" title="更改root密码"></a>更改root密码</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> password<span class="operator">=</span>PASSWOR(<span class="string">&#x27;djaskd&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="更改数据文件及binlog-的位置（统一用）"><a href="#更改数据文件及binlog-的位置（统一用）" class="headerlink" title="更改数据文件及binlog 的位置（统一用）"></a>更改数据文件及binlog 的位置（统一用）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop mysqld</span><br><span class="line">mkdir -p /db/mysql</span><br><span class="line">mv /var/lib/mysql /db/mysql/</span><br><span class="line">mv /db/mysql/mysql /db/mysql/data</span><br><span class="line">chown -R mysql:mysql /db/mysql</span><br></pre></td></tr></table></figure>

<h3 id="my-cnf-配置"><a href="#my-cnf-配置" class="headerlink" title="my.cnf 配置"></a>my.cnf 配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">port        = 3306</span><br><span class="line">socket      = /var/run/mysqld/mysqld.sock</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">socket      = /var/run/mysqld/mysqld.sock</span><br><span class="line">nice        = 0</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">user        = mysql</span><br><span class="line">pid-file    = /var/run/mysqld/mysqld.pid</span><br><span class="line">socket      = /var/run/mysqld/mysqld.sock</span><br><span class="line">port        = 3306</span><br><span class="line">basedir     = /usr</span><br><span class="line">datadir     = /db/mysql/data</span><br><span class="line">tmpdir      = /tmp</span><br><span class="line">skip-external-locking</span><br><span class="line">skip-name-resolve</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br><span class="line">lower_case_table_names=1</span><br><span class="line">bind-address        = 0.0.0.0</span><br><span class="line">max_allowed_packet  = 16M</span><br><span class="line">thread_stack        = 192K</span><br><span class="line">thread_cache_size       = 8</span><br><span class="line">max_connections        = 1000</span><br><span class="line">query_cache_limit   = 1M</span><br><span class="line">query_cache_size        = 16M</span><br><span class="line">log_error = /var/log/mysqld.log</span><br><span class="line"></span><br><span class="line">server-id       = 1</span><br><span class="line">binlog_format   = ROW</span><br><span class="line">log_bin         = /db/mysql/mysql-bin.log</span><br><span class="line">expire_logs_days    = 10</span><br><span class="line">max_binlog_size         = 500M</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="启动mysql-server"><a href="#启动mysql-server" class="headerlink" title="启动mysql server"></a>启动mysql server</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure>


<h3 id="ubuntu-问题"><a href="#ubuntu-问题" class="headerlink" title="ubuntu 问题"></a>ubuntu 问题</h3><p>我想，你一定是从seo&#x2F;seo.html” target&#x3D;”_blank”&gt;搜索引擎搜索这个标题进来的！你一定是想改变mysql默认安装的数据目录！<br>你已经修改了my.cnf中的datadir的值<br>首先是查看数据库日志<br>mysqld started<br>[Warning] Can’t create test file xxx.lower-test<br>[Warning] Can’t create test file xxx.lower-test<br>&#x2F;usr&#x2F;libexec&#x2F;mysqld: Can’t change dir to ‘&#x2F;xxx’ (Errcode: 13)<br>[ERROR] Aborting</p>
<p>你已经chown和chmod了数次新数据目录或者其父路径的属主和权限<br>你无数次地试图service mysql start，或者 &#x2F;etc&#x2F;init.d&#x2F;mysql start，以及mysql_install_db！<br>恭喜你看见这篇文章，我在被系统坑了几个小时之后，找到了解决的方法。<br>这个原因有二，其中任意的一个原因都会造成你被系统告知这个warning。如果你不是一个专业的linux系统安全工程师，或者你只是个PHP程序员，并没有对系统安全有深入的研究，你就不会太容易找到它的答案。<br>第一，selinux，记得当年念书时，字符界面安装redhat（很古老的操作系统么。。。）的时候，有这么一个选项，通常大家都听取前辈的建议，改变默认值以不安装它。但如果你恰好要操作的这台机器开着selinux，它确实能够使你的mysql无法在新目标位置进行mysql_install_db的操作，并爆出标题所示的警告。一个简单的解决办法是使用命令暂时关闭selinux，以便让你的操作可以继续下去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setenforce 0</span><br></pre></td></tr></table></figure>
<p>但最好使用一个永久方法，以便在重启后继续不要这货。<br>修改&#x2F;etc&#x2F;selinux&#x2F;config文件中设置SELINUX&#x3D;disabled ，然后重启或等待下次重启。<br>第二，apparmor，这个坑爹货和selinux一样的坑爹，它也对mysql所能使用的目录权限做了限制<br>在 &#x2F;etc&#x2F;apparmor.d&#x2F;usr.sbin.mysqld 这个文件中，有这两行，规定了mysql使用的数据文件路径权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/lib/mysql/ r,</span><br><span class="line">/var/lib/mysql/** rwk,</span><br></pre></td></tr></table></figure>
<p>你一定看到了，&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;就是之前mysql安装的数据文件默认路径，apparmor控制这里mysqld可以使用的目录的权限<br>我想把数据文件移动到&#x2F;data&#x2F;mysql下，那么为了使mysqld可以使用&#x2F;data&#x2F;mysql这个目录，照上面那两条，增加下面这两条就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/data/mysql/ r,</span><br><span class="line">/data/mysql/** rwk,</span><br></pre></td></tr></table></figure>
<p>重启apparmor，&#x2F;etc&#x2F;inid.d&#x2F;apparmor restart<br>之后，就可以顺利地干你想干的事儿了！</p>
]]></content>
      <categories>
        <category>storage</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 主从同步相关的知识</title>
    <url>/2016/04/13/storage/mysql/master_slave/</url>
    <content><![CDATA[<p>同步时mysql -&gt; backup </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /backup/mysql</span><br><span class="line">tar -izxvf /backup/hins1851643_data_20170301022021.tar.gz -C /backup/mysql/</span><br><span class="line"><span class="built_in">cp</span> /home/wenwen/backup-my.cnf /backup/mysql/backup-my.cnf</span><br><span class="line">innobackupex --user=root --password --defaults-file=/etc/mysql/my.cnf --apply-log /backup/mysql</span><br><span class="line"><span class="built_in">chown</span> -R mysql.mysql /var/lib/mysql</span><br><span class="line"><span class="built_in">chown</span> -R mysql.mysql /backup/mysql</span><br></pre></td></tr></table></figure>
<p>replicate.conf</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="attr">server-id</span>       = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## same on the slave</span></span><br><span class="line"><span class="attr">log-bin</span>         = mysql-bin</span><br><span class="line"><span class="attr">innodb_buffer_pool_size</span>=<span class="number">512</span>M</span><br><span class="line"><span class="attr">innodb_flush_log_at_trx_commit</span>  = <span class="number">1</span></span><br><span class="line"><span class="attr">sql_mode</span>=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"><span class="attr">log_bin_trust_function_creators</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sync_binlog</span>     = <span class="number">1</span></span><br><span class="line"><span class="comment">#binlog-format=&#x27;ROW&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">relay-log</span>=mysqld-relay-bin</span><br><span class="line"></span><br><span class="line"><span class="attr">read_only</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">master-info-repository</span>=file</span><br><span class="line"><span class="attr">relay-log-info_repository</span>=file</span><br><span class="line"><span class="attr">binlog-format</span>=ROW</span><br><span class="line"><span class="attr">innodb_checksum_algorithm</span>=innodb</span><br><span class="line"><span class="attr">innodb_data_file_path</span>=ibdata1:<span class="number">200</span>M:autoextend</span><br><span class="line"><span class="attr">innodb_log_files_in_group</span>=<span class="number">2</span></span><br><span class="line"><span class="attr">innodb_log_file_size</span>=<span class="number">524288000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#relay_log_info_repository = TABLE</span></span><br><span class="line"><span class="comment">#master_info_repository    = TABLE</span></span><br><span class="line"><span class="attr">relay_log_recovery</span>        = <span class="literal">on</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### replicate settings</span></span><br><span class="line"><span class="attr">replicate-ignore-db</span>=performance_schema</span><br><span class="line"><span class="attr">replicate-ignore-db</span>=mysql</span><br><span class="line"><span class="attr">replicate-do-db</span>=fenshua123</span><br><span class="line"><span class="comment">#replicate-rewrite-db=&quot;maindata-&gt;diydata&quot;</span></span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span> MASTER_HOST<span class="operator">=</span><span class="string">&#x27;10.1.8.160&#x27;</span>, MASTER_USER<span class="operator">=</span><span class="string">&#x27;rdsinner&#x27;</span>,  MASTER_PORT <span class="operator">=</span> <span class="number">3306</span>, MASTER_LOG_POS<span class="operator">=</span><span class="number">120</span>, MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;the_password&#x27;</span>, MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;mysql-bin.002458&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="主从同步"><a href="#主从同步" class="headerlink" title="主从同步"></a>主从同步</h2><ol>
<li>SLAVE  切换命令： CHANGE MASTER TO MASTER_HOST&#x3D;’10.1.6.111’, MASTER_USER&#x3D;’fenshuaprod’, MASTER_LOG_POS&#x3D;120, MASTER_PASSWORD&#x3D;’TUzu4515’, MASTER_LOG_FILE&#x3D;’mysql-bin.000001’, relay-log&#x3D;mysqld-relay-bin;</li>
<li>Master 重启在先， Slave重启在后，即可保持复制关系， 如果Slave 重启在先， 则需要在Slave 上手动 start slave；才可以维持复制关系</li>
<li>MySql 支持引入其他配置文件， 用 !include &#x2F;filepath 即可，但注意引入的文件要标明在那个section 下面，否则很容易就会抛异常<br>4.检查relay_log_info_repository是否修改成功。<br> show variables where variable_name in  (‘relay_log_info_repository’,’master_info_repository’);</li>
<li>设置表只读 lock table t_depart_info read;  </li>
<li>设置表名忽略大小写 lower_case_table_names&#x3D;1</li>
<li>设置库只读read-only</li>
<li>sudo innobackupex –user&#x3D;root –password –defaults-file&#x3D;&#x2F;data&#x2F;backup-my.cnf –tables-file&#x3D;&#x2F;data&#x2F;site.cnf –ibbackup&#x3D;xtrabackup_56 –apply-log &#x2F;data&#x2F;mysql</li>
</ol>
<p>1．在ECS服务器上安装MySQL，详细步骤可以参考如下：<br><a href="http://www.centoscn.com/mysql/2014/0924/3833.html">http://www.centoscn.com/mysql/2014/0924/3833.html</a><br>一些关键注意点：<br>a.数据库的版本至少为5.6.16及以上<br>b.需要在my.cnf中配置的一些关键参数：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">server-id <span class="comment">###Slave配置需要</span></span><br><span class="line"><span class="attr">master-info-repository</span>=file<span class="comment">### Slave配置需要</span></span><br><span class="line"><span class="attr">relay-log-info_repository</span>=file<span class="comment">### Slave配置需要</span></span><br><span class="line"><span class="attr">binlog-format</span>=ROW<span class="comment">### Slave配置需要</span></span><br><span class="line"><span class="attr">gtid-mode</span>=<span class="literal">on</span><span class="comment">###开启GTID需要</span></span><br><span class="line"><span class="attr">enforce-gtid-consistency</span>=<span class="literal">true</span><span class="comment">###开启GTID需要</span></span><br><span class="line"><span class="attr">innodb_data_file_path</span>=ibdata1:<span class="number">200</span>M:autoextend<span class="comment">###使用RDS的物理备份中的backup-my.cnf参数</span></span><br><span class="line"><span class="attr">innodb_log_files_in_group</span>=<span class="number">2</span><span class="comment">###使用RDS的物理备份中的backup-my.cnf参数</span></span><br><span class="line"><span class="attr">innodb_log_file_size</span>=<span class="number">524288000</span><span class="comment">###使用RDS的物理备份中的backup-my.cnf参数</span></span><br></pre></td></tr></table></figure>
<p>2.MySQL安装好后，可以使用RDS提供的物理备份文件恢复到本地MySQL中，可以参考：<br><a href="http://help.aliyun.com/knowledge_detail/5973700.html?spm=5176.7114037.1996646101.1.7qe3ot&amp;pos=1">http://help.aliyun.com/knowledge_detail/5973700.html?spm=5176.7114037.1996646101.1.7qe3ot&amp;pos=1</a><br>注意：<br>需要将备份解压后的文件backup-my.cnf中的三个参数加到启动文件中去</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">innodb_checksum_algorithm</span>=innodb</span><br><span class="line"><span class="attr">innodb_data_file_path</span>=ibdata1:<span class="number">200</span>M:autoextend</span><br><span class="line"><span class="attr">innodb_log_files_in_group</span>=<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>3.数据库启动后，开始设置本地数据库与RDS的同步关系<br>a．reset slave;####用于重置本地MySQL的复制关系，这一步操作有可能报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; reset slave;</span><br><span class="line">ERROR 1794 (HY000): Slave is not configured or failed to initialize properly. You must at least set –server-id to enable either a master or a slave. Additional error messages can be found in the MySQL error log.</span><br></pre></td></tr></table></figure>
<p>原因是由于RDS的备份文件中包含了RDS的主从复制关系，需要把这些主从复制关系清理掉，清理方法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span>  slave_relay_log_info;</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span>  mysql.slave_master_info;</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span>  mysql.slave_worker_info;</span><br></pre></td></tr></table></figure>
<p>然后重启MySQL；<br>b.SET @@GLOBAL.GTID_PURGED<br>&#x3D;’818795a2-8aa8-11e5-95b1:1-289,8da7b8ab-8aa8-11e5-95b1:1-75′;<br>打开备份解压文件可以看到文件xtrabackup_slave_info，其中第一行就是我们需要在本地MySQL执行的命令，他表示在备份结束时刻RDS当前GTID值’<br>c.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">change master <span class="keyword">to</span></span><br><span class="line">master_host<span class="operator">=</span>’gtid1.mysql.rds.aliyuncs.com’,</span><br><span class="line">master_user<span class="operator">=</span>’qianyi’,master_port<span class="operator">=</span><span class="number">3306</span>,master_password<span class="operator">=</span>’qianyi’,</span><br><span class="line">master_auto_position<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>设置本地MySQL与RDS的复制关系，账户qianyi是在RDS控制系统中添加（注意：<br>同步账户不要以repl开头）；<br>4．测试同步关系是否正常，可以在本地MySQL执行show slave status\G查看同步状态，同时可以在RDS中插入测试一些数据，或者重启实例，观察同步情况：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">Slave_IO_State: Queueing master event to the relay log</span><br><span class="line">Master_Host: gtid1.mysql.rds.aliyuncs.com</span><br><span class="line">Master_User: qianyi</span><br><span class="line">Master_Port: 3306</span><br><span class="line">Connect_Retry: 60</span><br><span class="line">Master_Log_File: mysql-bin.000007</span><br><span class="line">Read_Master_Log_Pos: 625757</span><br><span class="line">Relay_Log_File: slave-relay.000002</span><br><span class="line">Relay_Log_Pos: 2793</span><br><span class="line">Relay_Master_Log_File: mysql-bin.000007</span><br><span class="line">                Slave_IO_Running: Yes</span><br><span class="line">                Slave_SQL_Running: Yes</span><br><span class="line">Exec_Master_Log_Pos: 612921</span><br><span class="line">Relay_Log_Space: 15829</span><br><span class="line">       Seconds_Behind_Master: 57133</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">Master_Server_Id: 2319282016</span><br><span class="line">Master_UUID: 818795a2-8aa8-11e5-95b1-6c92bf20cfcf</span><br><span class="line">Master_Info_File: /data/work/mysql/data3001/mysql/master.info</span><br><span class="line">SQL_Delay: 0</span><br><span class="line">SQL_Remaining_Delay: NULL</span><br><span class="line">Slave_SQL_Running_State: Reading event from the relay log</span><br><span class="line">Master_Retry_Count: 86400</span><br><span class="line">818795a2-8aa8-11e5-95b1-6c92bf20cfcf:17754-17811</span><br><span class="line">Executed_Gtid_Set: 818795a2-8aa8-11e5-95b1-6c92bf20cfcf:1-17761</span><br><span class="line">Auto_Position: 1</span><br></pre></td></tr></table></figure>
<p>5.做好监控，由于采用MySQL的原生复制，所以可能会导致本地MySQL与RDS的复制出现中断，可以定时去探测  Slave_IO_Running和 Slave_SQL_Running两个状态值是否为yes，同时也需要关注本地MySQL与RDS的延迟： Seconds_Behind_Master。</p>
<p>删除slave_worker_info内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; set global sync_binlog=20 ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">mysql&gt; set global innodb_flush_log_at_trx_commit=2;Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">innodb_flush_log_at_trx_commit</span><br></pre></td></tr></table></figure>
<p>如果innodb_flush_log_at_trx_commit设置为0，log buffer将每秒一次地写入log file中，并且log file的flush(刷到磁盘)操作同时进行.该模式下，在事务提交的时候，不会主动触发写入磁盘的操作。<br>如果innodb_flush_log_at_trx_commit设置为1，每次事务提交时MySQL都会把log buffer的数据写入log file，并且flush(刷到磁盘)中去.<br>如果innodb_flush_log_at_trx_commit设置为2，每次事务提交时MySQL都会把log buffer的数据写入log file.但是flush(刷到磁盘)操作并不会同时进行。该模式下,MySQL会每秒执行一次 flush(刷到磁盘)操作。<br>注意：<br>由于进程调度策略问题,这个“每秒执行一次 flush(刷到磁盘)操作”并不是保证100%的“每秒”。<br>sync_binlog<br>sync_binlog 的默认值是0，像操作系统刷其他文件的机制一样，MySQL不会同步到磁盘中去而是依赖操作系统来刷新binary log。<br>当sync_binlog &#x3D;N (N&gt;0) ，MySQL 在每写 N次 二进制日志binary log时，会使用fdatasync()函数将它的写二进制日志binary log同步到磁盘中去。<br>注意:<br>如果启用了autocommit，那么每一个语句statement就会有一次写操作；否则每个事务对应一个写操作。<br>而且mysql服务默认是autocommit打开的<br>修改参数后，slave2,3也一样可以跟上slave1的速度了</p>
]]></content>
      <categories>
        <category>storage</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 的监控</title>
    <url>/2016/04/13/storage/mysql/monitoring/</url>
    <content><![CDATA[<h3 id="MySQL监控的必要性"><a href="#MySQL监控的必要性" class="headerlink" title="MySQL监控的必要性"></a>MySQL监控的必要性</h3><p>对于MySQL的稳定性而言，一个合理的监控是十分必要的， 监控是提前预知问题并解决问题的最后一道坎， 过了这道坎，服务或者应用基本就是在挂掉的边缘了。为了未雨绸缪，大部分比较知名的公司都回具备相对健全的监控体系。</p>
<h3 id="关于监控项"><a href="#关于监控项" class="headerlink" title="关于监控项"></a>关于监控项</h3><p> MySQL的监控项有非常多， 多大几十上百项， 这些项中的大部分都是在日常应用场景中是使用不到的， 也不能帮助大家定位MySQL的监控问题。对于日常或者生产中所遇到的问题基本上都可以由下文中的常见的几项指标来定位并排查出来。 当然对于这些监控项， 不同的监控项的重要程度也不同， 因为MySQL的第一要义在于存储数据，因此对于MySQL而言，IOPS对于MySQL而言是最重要的指标。此外，很多指标也都是相互影响的，比如慢查询80%的情况下是因为IO过多，而非CPU占用过多。</p>
<h3 id="健康度"><a href="#健康度" class="headerlink" title="健康度"></a>健康度</h3><p>健康是一个相对的概念，就如一个人是不是好看， 你只能用相对量来形容，而不是绝对量。<br>但一直以来，对于MySQL 的健康度的计算方法其实是很少有人总结的，因此本文希望能把这个健康度这个概念总结出来，并给出一定科学的依据。</p>
<p>一个健康度的计算规则是否合理的唯一标准是它是否能真实的反映MySQL服务的健康状况，举例子来说，假设一个MySQL服务的健康度为50分， 那么这个MySQL中运行中必然会存在可以优化的地方，比如存在慢查询，连接数稍微偏多，在这种情况下虽然服务能正常服务， 但请求到达一定量的时候就可能使得这个健康度变为0分，直接导致服务挂掉。 对于一个很健康的Mysql服务，来讲， 它应该是各项指标在合理的范围内， 不存在潜在的问题。</p>
<p>健康度的计算也很考究， 因为你要真实反馈问题，能够通过一个值来判断整体的情况， 那么必须就得存在一个科学的计算方法， 由于各项指标的重要程度不一， 因此我们需要对各项指标加上一个<code>权重</code>， 但仅仅加权重还是不够的， 因为往往某一项指标也能决定服务的存活与否， 因此我们还需要有另外一个概念 <code>checkpoint</code>, 在不同的checkpiont各项指标的权重应该都不一样。<br>比如CPU在到达100%的 checkpoint的时候它的权重就应该提高， 因此引发健康度分数下降到10分以内， 甚至更低。因此我们要加的这个权重是 动态的， 根据指标的重要程度以及checkpoint 进行相应的变化。</p>
<h2 id="监控指标"><a href="#监控指标" class="headerlink" title="监控指标"></a>监控指标</h2><p>上文讲完健康度这一概念之后， 我们知道，要想完善一个监控， 必须要对我们的监控指标项目有比较清楚的了解。下面主要简单介绍一下各个参数的意义。</p>
<h3 id="IOPS"><a href="#IOPS" class="headerlink" title="IOPS"></a>IOPS</h3><p>由于mysql是为了存储数据而存在的， 所有的查询直接或者间接的也是在操作存储， 而存储的硬件基础是磁盘，磁盘的一个重要的监控指标就是IO。 对于MySQL而言相关的指标就是IOPS. 顾名思义， IOPS是每秒的IO次数。 对于不同类型的磁盘的IOPS的支持情况不同， 一般的机械硬盘支持的IOPS为100左右， 像云服务提供商阿里云ECS的磁盘支持的IOPS为300左右， 一般固态硬盘支持的IOPS会有3000到5000， 对于RDS而言， IOPS是标明了总量的。</p>
<p>IO主要是用户的查询从磁盘存取数据来用的， 所有的查询经过解析后都回最终涉及到IO操作，IO操作的多少也决定了查询的快慢，以及每秒能满足的查询数量（QPS）</p>
<p>因为对于不同的存储介质而言QPS是不一样的，因此我们关注IOPS的使用率会更科学一点。</p>
<h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>CPU一直以来都是各种类型的服务一项比较重要的资源， 对于MySQL而言，CPU主要用来对查询进行解析，优化， 以及聚合分析等等，有非常多的地方会使用到CPU， 当一个服务的CPU占用过高的时候必然会影响到它正常提供服务的能力， 对于MySQL而言，各种规范都是不推荐讲耗费CPU的计算放在MySQL端来做的。但要支持那么多的查询以及其他的东西往往还是要消费CPU资源， 当CPU计算一个查询所涉及到的任务的时候也必然会影响到其他任务的计算。 一般而言，CPU使用率在60%以内都还算健康的状态。最合理的使用范围是30%~60%</p>
<h3 id="QPS"><a href="#QPS" class="headerlink" title="QPS"></a>QPS</h3><p>QPS (Query Per Seond)即每秒的查询数量，对于很多服务，都存在这么一个概念，如普通的业务服务每秒能支持多少次订单生成请求。QPS的高低与服务器资源的占用是正相关的。<br>过高的QPS会导致其他资源如CPU或者IOPS等资源的占用过高。而MySQL 对于QPS的支持不是确定的， 要根据具体运行的查询状况而定， 对于慢查询而言，一般运行一个或者两个就能占用非常多的CPU和IO资源， 对于效率比较高的查询（如按主键指定查询的）， 这类查询消费的CPU与IO资源相比而言非常小， 因此这个服务就可以支持更高的QPS</p>
<h3 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h3><p>慢查询是各类企业经常会遇到的一些问题， 慢查询的多少与数据库实例的健康状况也直接相关。虽然慢查询的数量与查询的时长是比较间接的指标， 但它也是不可忽略的一部分。<br>一般优秀的程序员都会控制自己的查询时长在50ms之内， 并且考虑到随着数据量增长这样的查询是不是能够保持住这个时间量级。业界也很少有对慢查询确定非常明确的标准。不同企业，要求高低不同， 一般而言我推荐将超过100-200ms的查询列入为慢查询。 慢查询是必须要优化的对象， 如果不优化，后期会不得不为慢查询付出额外的惨痛的代价。</p>
<h3 id="活跃连接数"><a href="#活跃连接数" class="headerlink" title="活跃连接数"></a>活跃连接数</h3><p><code>活跃连接</code>是指在某一时刻，MySQL 与客户端之间在处理着查询请求的连接， 它可以直接反应这个MySQL服务的繁忙程度， 一般而言活跃连接越多， QPS也会越高， CPU与IO占用的也相应越多。</p>
<h3 id="连接数"><a href="#连接数" class="headerlink" title="连接数"></a>连接数</h3><p>对于mysql 的连接而言， 有活跃的，自然也有不活跃的， 这些活跃的和不活跃的连接加起来基本上就是所有的连接了。因为MySQL Service 在服务端都回设置 <code>max_connection_num</code> 这个参数，<br>这个参数决定了允许所有连向这个MySQL服务的总的连接数。如果超出这个数字， MySQL服务端就会拒绝连接，客户端一般会报出 <code>get connection failed</code>的错误。日常环境中，不管是MySQL 还是Redis或者一些其他的知名服务， 就有连接池这个概念，连接池是为了提高连接的复用率， 降低连接的创建与销毁所消耗的资源而存在的。连接池的设置的恰当与否也往往决定了一个MySQL服务的连接的使用情况。 如果一个MySQL服务中存在大量Sleep的连接，就要考虑连接池设置的调整了。</p>
<h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>内存对于很多服务来讲也是非常重要的一个资源， 对于MySQL而言相对于其他的指标而言没有那么重要，因为MySQL的内存使用率，是应用程序无法直接决定的，Mysql会在很多地方使用到内存，如查询缓存， 连接缓存， 查询解析等等， 有很多一部分是为了加快查询的速度， 也有很多部分是为了维持MySQL的自身功能。一般而言MySQL服务的内存使用分配由DBA或者云服务提供商根据业界BP已经提前设置好了，是不需要更改的。 但对于内存使用的异常情况也是需要关注的， 因为它会影响到服务的正常使用。</p>
<h3 id="网络IN-x2F-OUT"><a href="#网络IN-x2F-OUT" class="headerlink" title="网络IN&#x2F;OUT"></a>网络IN&#x2F;OUT</h3><p>网络IO情况主要包括两个方面， 一个是<code>入流量</code>，一个是<code>出流量</code>, 不管什么应用， 当网络带宽被占满的时候都会出现问题。因此这个也是一个重要指标， 而指标中主要关注的还是比率。</p>
<h4 id="百分比监控项"><a href="#百分比监控项" class="headerlink" title="百分比监控项"></a>百分比监控项</h4><p>对于监控项与权重的说法如下：</p>
<table>
<thead>
<tr>
<th>监控项</th>
<th>Check Point</th>
<th>权重</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>IOPS使用率</td>
<td>&lt;30%</td>
<td>0</td>
<td>健康</td>
</tr>
<tr>
<td></td>
<td>30%~60%</td>
<td>1</td>
<td>正常</td>
</tr>
<tr>
<td></td>
<td>60%~80%</td>
<td>5</td>
<td>偏高</td>
</tr>
<tr>
<td></td>
<td>80%~95%</td>
<td>50</td>
<td>非常高</td>
</tr>
<tr>
<td></td>
<td>&gt;95%</td>
<td>90</td>
<td>致命</td>
</tr>
<tr>
<td>CPU使用率</td>
<td>&lt;30%</td>
<td>0</td>
<td>健康</td>
</tr>
<tr>
<td></td>
<td>30%~60%</td>
<td>1</td>
<td>一般</td>
</tr>
<tr>
<td></td>
<td>60%~80%</td>
<td>5</td>
<td>偏高</td>
</tr>
<tr>
<td></td>
<td>80%~95%</td>
<td>70</td>
<td>非常高</td>
</tr>
<tr>
<td></td>
<td>&gt;95%</td>
<td>90</td>
<td>致命</td>
</tr>
<tr>
<td>连接使用率</td>
<td>&lt;40%</td>
<td>0</td>
<td>健康</td>
</tr>
<tr>
<td></td>
<td>40%~60%</td>
<td>5</td>
<td>正常</td>
</tr>
<tr>
<td></td>
<td>60%~80%</td>
<td>30</td>
<td>偏高</td>
</tr>
<tr>
<td></td>
<td>80%~95%</td>
<td>50</td>
<td>非常高</td>
</tr>
<tr>
<td></td>
<td>&gt;95%</td>
<td>70</td>
<td>急需优化</td>
</tr>
<tr>
<td>内存使用率</td>
<td>&lt;70%</td>
<td>0</td>
<td>健康</td>
</tr>
<tr>
<td></td>
<td>70%~90%</td>
<td>10</td>
<td>偏高</td>
</tr>
<tr>
<td></td>
<td>&gt;90%</td>
<td>20</td>
<td>急需优化</td>
</tr>
<tr>
<td>网络出口带宽使用率</td>
<td>&lt;60%</td>
<td>0</td>
<td>正常</td>
</tr>
<tr>
<td></td>
<td>60~90%</td>
<td>10</td>
<td>偏高</td>
</tr>
<tr>
<td></td>
<td>&gt;90%</td>
<td>30</td>
<td>急需优化</td>
</tr>
</tbody></table>
<h4 id="其他监控项"><a href="#其他监控项" class="headerlink" title="其他监控项"></a>其他监控项</h4><p>活跃连接数，慢查询与QPS三项根据配置的不同，支持的也不同， 通常情况下如下来分<br>活跃连接就是客户端正在使用的连接，这类数据一般需要结合历史情况和现状来看， 如果一个数据库服务的活跃连接突然陡增，比历史同期要高好几倍（排除大促等情况），那肯定是不正常的， 有可能是应用端使用的问题， 也有可能是来自外部的攻击， 这个时候就要做相应的报警，以应对突发情况。</p>
<p>对于慢查询，任何公司的态度都是始终如一的， 不管如何，慢查询都是不应该出现在线上的OLTP数据库里的，因为数据库出问题最多的原因也就是慢查询， 70%左右的问题都是跟慢查询直接相关的， 慢查询可以导致CPU&#x2F;IOPS等的使用剧增，往往不需要几个慢查询就能就能拖垮一个数据库。因此对于慢查询的监控也是十分必要的。但通常情况下慢查询应该也要区分对待， 否则出现的频率会非常大，容易出现报警太多别人不关注的情况。我这里推荐一下查询的区分与等级。</p>
<ol>
<li><code>&lt;=50ms</code> 正常查询，一般不需要进行优化</li>
<li><code>&gt; 50ms &amp;&amp; &lt;=100ms</code> 稍微慢一点的查询，如果能优化可以想办法优化， 但不适宜比较大规模的调用，支持的QPS会比较低</li>
<li><code>&gt; 100ms &amp;&amp; &lt;= 300ms</code> 一般的还好的慢查询，这类慢查询往往出现在一些用了索引的统计任务里，就算有一般也应该加上缓存， 由任务定时刷新， 后期应该考虑迁移到其他解决方案上</li>
<li><code>&gt; 300ms &lt;= 2000ms</code> 一般的慢查询， 对于这类慢查询， 如果出现就要尽快优化掉， 而且一定要控制触发这类查询的入口，不能让用户或者攻击者可以出发这类查询。 一旦留有口子， 数据库很容易被攻击挂掉。</li>
<li><code>&gt; 2000ms</code> 这类查询不应该出现，出现之后应该紧急优化上线。</li>
</ol>
<p>一般很多应用开发者会经常问DBA的一个问题是这个配置的数据库能支持多少QPS， 其实这个是一个非常错误的问法。因为对于查询快慢， 数据库的支持情况是肯定不同的， 如果应用开发者只根据主键进行查询， 那一般可以支持比较高的QPS， 而且不需要很高的配置， 但如果都是慢查询， 可能支持的QPS也就只有个位数了， 所以大家一般问这类问题的时候，DBA给的值一般是按照经验，然后假定应用的查询还可以的情况下，给出的一个相对保守的值。</p>
]]></content>
      <categories>
        <category>storage</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker运行MySQL服务</title>
    <url>/2019/07/02/storage/mysql/mysql_docker/</url>
    <content><![CDATA[<h2 id="为啥要使用docker运行MySQL"><a href="#为啥要使用docker运行MySQL" class="headerlink" title="为啥要使用docker运行MySQL"></a>为啥要使用docker运行MySQL</h2><p>熟悉docker和k8s的人都知道， 我们使用容器化技术，是为了方便我们运行某个服务，我们用docker 运行Mysql， 并不是因为mysql在docker比在物理机或者kvm上运行的更好，配置起来更简单。<br>我们使用docker 主要还是因为，我们在不关注太多MySQL本身的东西的时候， 单纯想快速简单的启动一个MySQL服务的时候能够做到，分钟级别即可完成。<br>这相对于传统级别的从安装到配置动则半小时到几个小时的工作量来说，已经非常简单方便了。</p>
<h2 id="怎么使用Docker-去运行一个MySQL服务"><a href="#怎么使用Docker-去运行一个MySQL服务" class="headerlink" title="怎么使用Docker 去运行一个MySQL服务"></a>怎么使用Docker 去运行一个MySQL服务</h2><p>在运行之前，你首先要装docker， 安装docker非常简单，只需要一路下一步下一步就可以完成， linux或者mac野只需要一些安装命令即可搞定。<br>当然安装docker可以不仅仅用于MySQL用途， 也可以用来它方便其他任何你想需要运行的服务的部署和运行。  </p>
<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.6</span><br></pre></td></tr></table></figure>
<p>这里mysql是镜像名称， 5.6 是mysql的版本。 一半这些镜像都默认是比较官方维护的， 在docker没有进行特殊设置的情况下可以信任。</p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql -v /opt/docker_v/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456 -d imageID</span><br></pre></td></tr></table></figure>
<p>上述命令有如下解释：</p>
<ol>
<li><code>-p 3306:3306 </code> 是指把容器的3306端口映射到本地的3306端口</li>
<li><code>--name</code> 制定容器的名称, 我们下次要操作的时候可以制定名称即可， 如 <code>docker start mysql</code></li>
<li><code>-v</code> 把本地文件夹与docker文件夹进行一个映射</li>
<li><code>-e </code> 传入容器一些环境变量， 这里传入的是MySQL运行的时候需要的root密码</li>
<li><code>-d</code> 后台方式运行</li>
</ol>
<h3 id="常见的问题"><a href="#常见的问题" class="headerlink" title="常见的问题"></a>常见的问题</h3><ol>
<li>docker 守护进程没有开启<br> 解决方案： 开启docker后台进程 如 <code>service docker start</code>或者 <code>systemctl start docker.service</code></li>
<li>mysql 运行的端口过小导致的没有权限<br> 解决方案：请在大于1024 的端口上运行MySQL</li>
<li>系统环境是 Windows 10 Pro，Docker 版本 18.03.1-ce，电脑开机之后第一次运行 docker run 的时候会遇到这个错误</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Program Files\Docker\Docker\Resources\bin\docker.exe: Error response from daemon: driver failed programming external connectivity on endpoint app (36577729ce7d4d2dddefb7fddd32521ea66958cf824138804b02ffb3c98452f3): Error starting userland proxy: mkdir /port/tcp:0.0.0.0:3306:tcp:172.17.0.2:3306</span><br><span class="line">: input/output error.</span><br></pre></td></tr></table></figure>

<p>解决方案： 重启docker服务</p>
]]></content>
      <categories>
        <category>storage</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>docker</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 其他杂记</title>
    <url>/2019/05/13/storage/mysql/mysql_other/</url>
    <content><![CDATA[<h2 id="事务查询"><a href="#事务查询" class="headerlink" title="事务查询"></a>事务查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@tx</span>_isolation</span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  r.`trx_id` waiting_trx_id,</span><br><span class="line">  r.`trx_mysql_thread_id` waiting_thread,</span><br><span class="line">  r.`trx_query` waiting_query,</span><br><span class="line">  b.`trx_id` bolcking_trx_id,</span><br><span class="line">  b.`trx_mysql_thread_id` blocking_thread,</span><br><span class="line">  b.`trx_query` block_query </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  information_schema.`INNODB_LOCK_WAITS` w </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> information_schema.`INNODB_TRX` b </span><br><span class="line">    <span class="keyword">ON</span> b.`trx_id` <span class="operator">=</span> w.`blocking_trx_id` </span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> information_schema.`INNODB_TRX` r </span><br><span class="line">    <span class="keyword">ON</span> r.`trx_id` <span class="operator">=</span> w.`requesting_trx_id` ;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<h2 id="查询外键"><a href="#查询外键" class="headerlink" title="查询外键"></a>查询外键</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> concat(<span class="string">&#x27;alter table &#x27;</span>,table_name,<span class="string">&#x27; drop foreign key &#x27;</span>,constraint_name,<span class="string">&#x27;;&#x27;</span>) </span><br><span class="line"><span class="keyword">from</span> information_schema.key_column_usage</span><br><span class="line"><span class="keyword">where</span> constraint_schema <span class="operator">=</span> <span class="string">&#x27;dbname&#x27;</span> <span class="keyword">and</span> referenced_table_name <span class="operator">=</span> <span class="string">&#x27;tbName&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> concat(<span class="string">&#x27;alter table &#x27;</span>,table_schema,<span class="string">&#x27;.&#x27;</span>,table_name,<span class="string">&#x27; DROP FOREIGN KEY &#x27;</span>,constraint_name,<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> information_schema.table_constraints</span><br><span class="line"><span class="keyword">WHERE</span> constraint_type<span class="operator">=</span><span class="string">&#x27;FOREIGN KEY&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> table_schema<span class="operator">=</span><span class="string">&#x27;dbname&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> information_schema.`TABLES`</span><br><span class="line"><span class="keyword">WHERE</span> TABLE_TYPE<span class="operator">=</span>&quot;BASE TABLE&quot;</span><br><span class="line"><span class="keyword">AND</span> TABLE_SCHEMA<span class="operator">=</span>&quot;dbname&quot;</span><br></pre></td></tr></table></figure>

<p>原因是由于RDS的备份文件中包含了RDS的主从复制关系，需要把这些主从复制关系清理掉，清理方法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span>  slave_relay_log_info;</span><br><span class="line"></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span>  mysql.slave_master_info;	</span><br></pre></td></tr></table></figure>


<h3 id="Mysql-DUMP-表"><a href="#Mysql-DUMP-表" class="headerlink" title="Mysql DUMP 表"></a>Mysql DUMP 表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -u root -h 127.0.0.1  dbName msgattach  &gt; msgattach.sql</span><br></pre></td></tr></table></figure>


<h3 id="MySQL-客户端"><a href="#MySQL-客户端" class="headerlink" title="MySQL 客户端"></a>MySQL 客户端</h3><p>从表现上来看分两种：</p>
<ol>
<li>客户端执行完query之后， 直接返回， 并开始用rows.next 去取数据， 其中很快</li>
<li>如果在客户端取数据的时候打上断点， 服务端发送完数据之后， 客户端只能取到部分数据， 不能取到全部数据， 怀疑客户端有一个缓冲区，不断接收服务端的数据并刷新</li>
<li>如果客户端收到数据后，不打断点， 则可以获取全部数据（前提是建立在客户端执行速度比较快的情况下）</li>
</ol>
<p>底层代码里面来看， mysql服务端发送数据给客户端的时候， 客户端会把数据存在一个 默认4096大小的buffer 里面， 从这个buffer里面再读到rows里面<br>如果buffer里的数据没有被及时消费掉， 那么连接上面传送过来的数据会丢失掉。</p>
<p>MySQL 本身的问题对于数据量传输不完的时候有个write_timeout,  出现错误之后， 会返回EOF 相关的Error</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysql] 2019/04/25 14:31:27 packets.go:72: unexpected EOF</span><br><span class="line">[mysql] 2019/04/25 14:31:27 packets.go:393: busy buffer</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="实用脚本"><a href="#实用脚本" class="headerlink" title="实用脚本"></a>实用脚本</h3><h4 id="Mysql-查看表的外键"><a href="#Mysql-查看表的外键" class="headerlink" title="Mysql 查看表的外键"></a>Mysql 查看表的外键</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">TABLE_NAME,COLUMN_NAME,CONSTRAINT_NAME, REFERENCED_TABLE_NAME,REFERENCED_COLUMN_NAME </span><br><span class="line"><span class="keyword">from</span> INFORMATION_SCHEMA.KEY_COLUMN_USAGE </span><br><span class="line"> <span class="keyword">WHERE</span> CONSTRAINT_NAME <span class="operator">!=</span> <span class="string">&#x27;PRIMARY&#x27;</span> <span class="keyword">AND</span> REFERENCED_TABLE_NAME <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> </span><br></pre></td></tr></table></figure>

<h4 id="测试稳定情况"><a href="#测试稳定情况" class="headerlink" title="测试稳定情况"></a>测试稳定情况</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 100`; <span class="keyword">do</span> </span><br><span class="line">    mysql -u username -h host -P 3306 -ppassword -e <span class="string">&quot;use dbName; select askid from ask limit 1&quot;</span>; <span class="built_in">echo</span> <span class="string">&quot;==============<span class="variable">$i</span>&quot;</span>; <span class="built_in">sleep</span> 1;</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>storage</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 如何找回Root密码</title>
    <url>/2019/05/13/storage/mysql/passwd/</url>
    <content><![CDATA[<h2 id="1-修改-x2F-etc-x2F-my-cnf"><a href="#1-修改-x2F-etc-x2F-my-cnf" class="headerlink" title="1  修改 &#x2F;etc&#x2F;my.cnf"></a>1  修改 &#x2F;etc&#x2F;my.cnf</h2><p>加上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure>

<h2 id="2-重启mysql"><a href="#2-重启mysql" class="headerlink" title="2. 重启mysql"></a>2. 重启mysql</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>

<h2 id="3-更改root密码"><a href="#3-更改root密码" class="headerlink" title="3. 更改root密码"></a>3. 更改root密码</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> USE mysql ; </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> Password <span class="operator">=</span> password ( <span class="string">&#x27;new-password&#x27;</span> ) <span class="keyword">WHERE</span> <span class="keyword">User</span> <span class="operator">=</span> <span class="string">&#x27;root&#x27;</span> ; </span><br><span class="line">mysql<span class="operator">&gt;</span> flush privileges ; </span><br><span class="line">mysql<span class="operator">&gt;</span> quit</span><br></pre></td></tr></table></figure>
<p>如果版本高于5.6 则是如下字段存着密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">authentication_string</span><br></pre></td></tr></table></figure>
<h2 id="4-将MySQL的登录设置修改回来"><a href="#4-将MySQL的登录设置修改回来" class="headerlink" title="4.将MySQL的登录设置修改回来"></a>4.将MySQL的登录设置修改回来</h2><h2 id="5-重启mysql"><a href="#5-重启mysql" class="headerlink" title="5. 重启mysql"></a>5. 重启mysql</h2>]]></content>
      <categories>
        <category>storage</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 简介</title>
    <url>/2016/03/18/storage/mysql/preface/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MySQL是一个关系型数据库管理系统，目前属于Oracle 旗下产品， 开源分支为MariaDB，它是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL是最好的免费 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件。<br>MySQL是一种关系数据库管理系统，它所使用的 SQL 语言是用于访问数据库的最常用标准化语言, 关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</p>
<h2 id="内容概要"><a href="#内容概要" class="headerlink" title="内容概要"></a>内容概要</h2><p>本材料介绍内容涵盖如下几点</p>
<ul>
<li>MySQL简单介绍及常见工具</li>
<li>MySQL Schema设计</li>
<li>MySQL 索引</li>
<li>Explain 的理解与使用</li>
<li>MySQL规范与最佳实践</li>
</ul>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本材料不会对具体SQL语法进行讲解， 也不会涉及到MySQL运维及分库分表之类的知识，具体相关知识可以自行百度或者看书。本文针对的读者主要在于使用MySQL的研发及想要了解MySQL的研发，仅仅涉及到工作中要经常遇到的部分</p>
]]></content>
      <categories>
        <category>storage</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql 闪回方案设计</title>
    <url>/2017/03/18/storage/mysql/roll_back/</url>
    <content><![CDATA[<h1 id="mysql-数据闪回"><a href="#mysql-数据闪回" class="headerlink" title="mysql 数据闪回"></a>mysql 数据闪回</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>数据闪回属于数据恢复的一个范畴, 常见的数据恢复的方法有很多， 但都大同小异。<br>主要有以下两种方案：</p>
<ol>
<li>进行变更之前把变更前的数据存储下来用于恢复</li>
<li>基于全量备份+ binlog增量备份的方式</li>
</ol>
<p>这两种方案，私下里操作最多的往往是第一种， 因为第一种比较小作坊， 容易操作， 但操作也相对零碎， 人工化， 容易产生失误。第二种是业界许多解决方案的标准， 例如RDS的备份恢复克隆等功能就是按照第二种方案去做的， 但第二种有三个问题， 第一，备份数据比较庞大， 比较多，恢复时间非常久， 第二， 需要有一整套的体系支持（包括不仅限于服务器、运维、等）第三，第二种需要比较大的开发量。需要对binlog 进行订阅解析以及合理的安排， 对备份策略进行合理的程序化定制。</p>
<p>很多企业在发展到一定阶段之后必定会对线上数据变更进行相应的管控， 建立好相应的变更管控的流程。 但这个流程也非万能的， 数据被误操作的概率还是存在， 当数据被误操作后，如何快速恢复到操作前的一个状态， 成了本文主要关注的一个话题。</p>
<h2 id="闪回工具现状"><a href="#闪回工具现状" class="headerlink" title="闪回工具现状"></a>闪回工具现状</h2><h3 id="mysqlbinlog工具配合sed、awk"><a href="#mysqlbinlog工具配合sed、awk" class="headerlink" title="mysqlbinlog工具配合sed、awk"></a>mysqlbinlog工具配合sed、awk</h3><p>该方式先将binlog解析成类SQL的文本，然后使用sed、awk把类SQL文本转换成真正的SQL。</p>
<ul>
<li>优点：当SQL中字段类型比较简单时，可以快速生成需要的SQL，且编程门槛也比较低。</li>
<li>缺点：当SQL中字段类型比较复杂时，尤其是字段中的文本包含HTML代码，用awk、sed等工具时，就需要考虑极其复杂的转义等情况，出错概率很大。</li>
</ul>
<h3 id="给数据库源码打patch。该方式扩展了mysqlbinlog的功能，增加Flashback选项。"><a href="#给数据库源码打patch。该方式扩展了mysqlbinlog的功能，增加Flashback选项。" class="headerlink" title="给数据库源码打patch。该方式扩展了mysqlbinlog的功能，增加Flashback选项。"></a>给数据库源码打patch。该方式扩展了mysqlbinlog的功能，增加Flashback选项。</h3><ul>
<li>优点：复用了MySQL Server层中binlog解析等代码，一旦稳定之后，无须关心复杂的字段类型，且效率较高。</li>
<li>缺点：在修改前，需要对MySQL的复制代码结构和细节需要较深的了解。版本比较敏感，在MySQL 5.6上做的patch，基本不能用于MySQL 5.7的回滚操作。升级困难，因为patch的代码是分布在MySQL的各个文件和函数中，一旦MySQL代码改变，特别是复制层的重构，升级的难度不亚于完全重新写一个。</li>
</ul>
<h3 id="使用业界提供的解析binlog的库，然后进行SQL构造，其优秀代表是binlog2sql。"><a href="#使用业界提供的解析binlog的库，然后进行SQL构造，其优秀代表是binlog2sql。" class="headerlink" title="使用业界提供的解析binlog的库，然后进行SQL构造，其优秀代表是binlog2sql。"></a>使用业界提供的解析binlog的库，然后进行SQL构造，其优秀代表是binlog2sql。</h3><ul>
<li>优点：使用业界成熟的库，因此稳定性较好，且上手难度较低。</li>
<li>缺点：效率往往较低，且实现上受制于binlog库提供的功能。</li>
</ul>
<p>上述几种实现方式，主要是提供的过滤选项较少，比如不能提供基于SQL类型的过滤，需要回滚一个delete语句，导致在回滚时，需要结合awk、sed等工具进行筛选。</p>
<h2 id="开源方案"><a href="#开源方案" class="headerlink" title="开源方案"></a>开源方案</h2><p>总体来讲如下的两种方案其实是一个原理，其中一个程序化了， 产品化了而已。</p>
<h3 id="美团的-MyFlash"><a href="#美团的-MyFlash" class="headerlink" title="美团的 MyFlash"></a>美团的 MyFlash</h3><p>  <a href="https://github.com/Meituan-Dianping/MyFlash">MyFlash</a>  是由美团点评公司技术工程部开发维护的一个回滚DML操作的工具。该工具通过解析v4版本的binlog，完成回滚操作。相对已有的回滚工具，其增加了更多的过滤选项，让回滚更加容易。</p>
<ol>
<li>无需把binlog解析成文本，再进行转换。</li>
<li>提供原生的基于库、表、SQL类型、位置、时间等多种过滤方式。</li>
<li>支持MySQL多个版本。</li>
<li>对于数据库的代码重构不敏感，利于升级。</li>
<li>自主掌控binlog解析，提供尽可能灵活的方式。</li>
</ol>
<h2 id="闪回工具分析"><a href="#闪回工具分析" class="headerlink" title="闪回工具分析"></a>闪回工具分析</h2><p> 以上业界的一些闪回方案，基本上都是基于Binlog 去倒腾的， 有一些明显的限制</p>
<ol>
<li>不能针对某条语句(tansaction)进行回滚操作</li>
<li>需要维护binlog, 建立binlog 相关的逻辑体系</li>
<li>人工变更与应用变更不能真正分开(闪回是针对某个表， 某个类型，在某一段时间内的全部数据)</li>
<li>使用起来不方便， 对于普通研发来说成本还是蛮高的</li>
<li>…</li>
</ol>
<h2 id="闪回工具的方案"><a href="#闪回工具的方案" class="headerlink" title="闪回工具的方案"></a>闪回工具的方案</h2><p>为了解决以上所有问题， 主要考虑以下两种方案（两种都是原创）</p>
<h3 id="基于SQL重写与备份的方案"><a href="#基于SQL重写与备份的方案" class="headerlink" title="基于SQL重写与备份的方案"></a>基于SQL重写与备份的方案</h3><p>这种方案的整个大的流程如下：</p>
<p><img src="https://qhyxpicoss.kujiale.com/2019/04/24/LS75DLYKAQBZMRS4AAAAABQ8_768x189.png" alt="AST"></p>
<ol>
<li>变更前备份： 在实际执行语句前，通过对SQL语句的重写，来达到保存变更前状态的一个目的。</li>
<li>变更执行： 进行实际的变更操作</li>
<li>备份恢复： 利用备份的数据进行恢复（一般是自动生成rollback的SQL语句进行执行）</li>
</ol>
<p>上述环节中， 最重的一部分工作就是变更前的备份，其中工作量最大的一部分就是进行SQL的重写，这有可能涉及到AST语法树的部分， 当然对于比较简单的SQL语句， 也用不着AST语法树。<br>这里面最大的工作量就是SQL语句的重写， 利用重写的SQL进行原数据查询， 再将变更前的数据备份下来。</p>
<p>整体的一个流程如下：</p>
<p><img src="https://qhyxpicoss.kujiale.com/2019/04/24/LS75X3QKAQBZOUT4AAAAAAQ8_1125x181.png" alt="ast"></p>
<p>存在的问题： 备份与实际写入之间是存在时间间隔的， 如果这个时间间隔内存在其他变数，则也只能恢复到备份的时候的状态。</p>
<h3 id="基于binlog-映射SQL语句的方案"><a href="#基于binlog-映射SQL语句的方案" class="headerlink" title="基于binlog 映射SQL语句的方案"></a>基于binlog 映射SQL语句的方案</h3><p>对于每一个DML操作， binlog 总是忠实的记录了DML操作的详情，我们可以利用这个详情用于事后恢复数据。<br>但binlog 并未将语句与binlog一一对应起来， 如果要做，可能需要花费的代价比较大，浪费很多的存储空间。<br>由于我们的需求是仅对我们的变更进行回滚，不对其他同类型同时间的变更进行回滚， 所以，我们需要有能力将binlog与我们的变更进行一一对应。<br>整体的操作流程如下：</p>
<p><img src="https://qhyxpicoss.kujiale.com/2019/04/24/LS74QSYKAQBZOUT4AAAAADQ8_749x192.png" alt="binlog"></p>
<p>从图中可以看到， 变更的执行跟数据的备份恢复其实是分开的， 变更执行只是变更执行，不用去卡很多时间点相关的概念， 也不同担心备份的跟实际变更的数据会不一致。<br>避免了上面方案的一个时间差的问题，而且不需要进行SQL语句的重写与反查数据库。</p>
<p>为了能做变更与binlog 的唯一对应， 我们需要对变更执行这个步骤做一些手脚， 加入一个唯一对应的标志。<br>由于binlog 是会忠实记录变更的， 因此我们可以给每个变更生成一个唯一标志， 并把这个唯一标志体现在binlog 里面， 这样我们就实现了变更与binlog的对应。<br>有了这层对应关系我们就可以轻松的对这个变更进行数据的恢复， 从而不影响其他同时间同类型的变更。</p>
<p>数据备份模块也是需要投入开发的一个模块他主要涉及到以下工作：<br>0. binlog 名称与位点的确定</p>
<ol>
<li>slave 伪装</li>
<li>binlog 接收与解析</li>
<li>定位变更的binlog</li>
<li>由对应的binlog生成相应的备份</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>就开发量上来讲， 两种方案都是差不多的， 整个周期至少都需要2-3周左右的开发量，<br>我们显然应该采取第二种方案， 因为第二种方案与业界许多方案有比较多的共通之处， 也是比较通用靠谱的一种方案， 而且避免了查询间隔带来的数据不一致问题。<br>而且它与现有生态融合比较好。</p>
]]></content>
      <categories>
        <category>storage</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL Schema 设计</title>
    <url>/2016/03/13/storage/mysql/schema/</url>
    <content><![CDATA[<h2 id="Schema-简介"><a href="#Schema-简介" class="headerlink" title="Schema 简介"></a>Schema 简介</h2><p>说到使用MySQL我们接触最早的就是Schema设计，俗称建表，这个小节主要介绍MySQL Schema的设计方法与一些基本的使用原则。</p>
<p>Schema 设计在用户应用设计前期是非常重要的，一般情况下它会影响到业务以后的健康程度，以及其他业务代码的设计，Schema一旦设计成型并投入使用，当数据量达到一定程度的时候将会对索引的要求会越来越高，变更Schema也将会花费更多的代价，应用设计之前，认真正确的设计Schema是非常有必要的。</p>
<p>下面将主要分Schema的数据类型，索引与外键，使用原则，默认值等来介绍Schema的设计，在此之前，下面是一个最常见的一个schema设计语句。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `userinfo` (</span><br><span class="line">`id`  <span class="type">int</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span> ,</span><br><span class="line">`name`  <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;名字&#x27;</span> ,</span><br><span class="line">`gender`  bit <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别 0 男 1 女 NULL 未知&#x27;</span> ,</span><br><span class="line">`height`  <span class="type">float</span> UNSIGNED <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;身高， 单位m&#x27;</span> ,</span><br><span class="line">`account_id`  <span class="type">int</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;账户ID&#x27;</span> ,</span><br><span class="line">`created`  <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;记录创建时间&#x27;</span> ,</span><br><span class="line">`last_modfied`  <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;记录最后修改时间&#x27;</span> ,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">INDEX `idx_name` (`name`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;用于按姓名查找&#x27;</span>,</span><br><span class="line"><span class="keyword">UNIQUE</span> INDEX `idx_account_id` (`account_id`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;用于对应某个账户的唯一ID&#x27;</span>,</span><br><span class="line">INDEX `idx_heigt_gender` (`height`, `gender`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;用户筛选用户特征&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span><span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_general_ci;</span><br></pre></td></tr></table></figure>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整形数据：-TINYINT-SMALLINT-MEDIUMINT-INT-BIGINT"><a href="#整形数据：-TINYINT-SMALLINT-MEDIUMINT-INT-BIGINT" class="headerlink" title="整形数据： TINYINT, SMALLINT, MEDIUMINT, INT BIGINT"></a>整形数据： TINYINT, SMALLINT, MEDIUMINT, INT BIGINT</h3><p>整形的数据类型一旦类型确定长度也就确定了，所以之前文章里面给定的那个长度是不起实际作用的，可以不指定长度只指定类型。<br>下表是各种整形所对应的长度</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>位数</th>
<th>范围</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT</td>
<td>8</td>
<td>-2^7 到 2^7-1      (-128-127)</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>16</td>
<td>-2^15到2^15-1     (-32768-32767)</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>24</td>
<td>-2^23到2^23-1   (-8388608-8388607)</td>
</tr>
<tr>
<td>INT</td>
<td>32</td>
<td>-2^31到2^31-1     (-2147483648-2147483647)</td>
</tr>
<tr>
<td>BIGINT</td>
<td>64</td>
<td>-2^63到2^63-1  (-9223372036854775808-9223372036854775807)</td>
</tr>
<tr>
<td>应用场景：INT 通常用作一个实体表的主键部分，比如用户表的用户ID</td>
<td></td>
<td></td>
</tr>
<tr>
<td>TINYINT 通常用作枚举类型的数据，需要很小长度比如 status&#x2F;type&#x2F;deleted</td>
<td></td>
<td></td>
</tr>
<tr>
<td>通常会根据一个数据将来可能的最大量来选择类型数据， 一般使用前会做一个预估来选择数据类型。</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="实数型数据：-DECIMAL，-FLOAT，-DOUBLE"><a href="#实数型数据：-DECIMAL，-FLOAT，-DOUBLE" class="headerlink" title="实数型数据： DECIMAL， FLOAT， DOUBLE"></a>实数型数据： DECIMAL， FLOAT， DOUBLE</h3><p>DECIMAL 可以用于存储比BIGINT 更大的整数，计算方法MYSQL自行实现<br>FLOAT与DOUBLE 都可以指定精度<br>应用场景：实数类型通常应用与需求精度非常高的字段<br>可能的改进方法：在存储面积，身高等需要精度低的领域，在最大值可预估的时候，可以用整形来存取 </p>
<h3 id="字符串类型-VARCHAR-CHAR-TEXT-BLOB"><a href="#字符串类型-VARCHAR-CHAR-TEXT-BLOB" class="headerlink" title="字符串类型 VARCHAR CHAR TEXT BLOB"></a>字符串类型 VARCHAR CHAR TEXT BLOB</h3><p>VARCHAR可变长字符串， 需要额外字节来存储当前的长度, 用于存储，改动不太频繁，且长度变化范围比较大的字符串<br>CHAR 固定长字符串 用于存储相对固定的东西，如密码的MD5，以及经常要改变的列<br>TEXT与BLOB 分别是指用字符存储与二进制的存取<br>可能的改进：<br>如果一个列的字符串的数量基本是确定的， 比如性别： Male Female Unknown 只有固定的几种String 或者是可以遇见的几种，尽量可以使用tinyint 来代替<br>常用函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CHAR_LENGT</span><br><span class="line">STR_CMP</span><br><span class="line">STR_TO_DATE</span><br></pre></td></tr></table></figure>
<h3 id="日期类型-TIMESTAMP-DATETIME"><a href="#日期类型-TIMESTAMP-DATETIME" class="headerlink" title="日期类型 TIMESTAMP, DATETIME"></a>日期类型 TIMESTAMP, DATETIME</h3><p>MYSQL支持毫秒级别的时间， MariaDb 支持微秒级的时间值<br>DATETIME (1001-9999)  时区无关  使8Byte的存储空间<br>TIMESTAMP（1970-2038）时区相关 使用4Byte的存储空间<br>常用函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 把UNIX时间戳转成<span class="type">TIMESTAMP</span></span><br><span class="line">UNIX_TIMESTAMP() <span class="operator">/</span>FROM_UNIXTIME() </span><br><span class="line"><span class="type">DATE</span>()</span><br><span class="line">DATE_ADD</span><br><span class="line">DATE_SUB</span><br><span class="line">DATE_FORMAT</span><br></pre></td></tr></table></figure>
<h3 id="枚举类型与集合类型"><a href="#枚举类型与集合类型" class="headerlink" title="枚举类型与集合类型"></a>枚举类型与集合类型</h3><p>此类型仅作列出， 不作实际使用， 一般这些类型可以用TINYINT 等值来代替，不建议用这些类型</p>
<h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><h3 id="NULL"><a href="#NULL" class="headerlink" title="NULL"></a>NULL</h3><p>NULL 是最常见的默认值，一切默认值都可以设置为NULL， 但不是所有默认值都要设置为NULL， 要根据情况具体设定<br>###	Empty String<br>空字符串，是很多char, varchar, text 的默认值的选项，如果你的应用程序没有处理NULL值的时候可以把默认值设置为这个避免空指针异常， 但一般情况下不希望MySQL给你做这类的检测。</p>
<h3 id="CURRENT-TIMESTAMP"><a href="#CURRENT-TIMESTAMP" class="headerlink" title="CURRENT_TIMESTAMP"></a>CURRENT_TIMESTAMP</h3><p>当前时间， 一般用于TIMESTAMP的默认值，它在使用跟理论上均优于创建TRIGGER来设置默认值</p>
<h2 id="索引与外键"><a href="#索引与外键" class="headerlink" title="索引与外键"></a>索引与外键</h2><p>索引与外键是建立Schema 永远不能避开的话题，你可以避开外键，但你可能会想到它，但你不能避开索引。这里不会对索引进行详细的表述，具体的描述在后面小节中会详细道来。在这里你只需要记住一点，建立表的时候，一定要根据查询建立索引，最好不要建立外键，除非非常必要。</p>
<h2 id="Schema设计误区"><a href="#Schema设计误区" class="headerlink" title="Schema设计误区"></a>Schema设计误区</h2><h3 id="太多的列"><a href="#太多的列" class="headerlink" title="太多的列"></a>太多的列</h3><p>太多的列需要更大的维护成本， 对与SELECT * 的效率来说也更低</p>
<h3 id="太多的JOIN"><a href="#太多的JOIN" class="headerlink" title="太多的JOIN"></a>太多的JOIN</h3><p>JOIN过多，会导致查询复杂，结果更难判断，查询效率变低</p>
<h3 id="泛滥的外键与索引"><a href="#泛滥的外键与索引" class="headerlink" title="泛滥的外键与索引"></a>泛滥的外键与索引</h3><p>索引与外键并不越多越好， 每个外键与索引都需要额外的维护成本</p>
<h3 id="随意性建表"><a href="#随意性建表" class="headerlink" title="随意性建表"></a>随意性建表</h3><p>在很小的数据量的情况下， 通常存在一个汇总表，或者设置表里面比较合适]</p>
<h2 id="范式与反范式"><a href="#范式与反范式" class="headerlink" title="范式与反范式"></a>范式与反范式</h2><table>
<thead>
<tr>
<th>设计模式</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>范式</td>
<td>数据量小，单实体表查询效率高</td>
<td>需要做很多的JOIN</td>
</tr>
<tr>
<td>反范式</td>
<td>反范式把冗余信息都放在一张表里面，可以很好的避免JOIN</td>
<td>数据量的增大，导致查询的速度，稍受影响； 更新须保证冗余信息的更新</td>
</tr>
</tbody></table>
<p>两者要结合实际情况，可以混合使用，但一般不推荐过多的JOIN，SQL语句JOIN不能超过两张表。</p>
<h2 id="Schema-设计原则"><a href="#Schema-设计原则" class="headerlink" title="Schema 设计原则"></a>Schema 设计原则</h2><h3 id="简单就好，更小的通常更好"><a href="#简单就好，更小的通常更好" class="headerlink" title="简单就好，更小的通常更好"></a>简单就好，更小的通常更好</h3><p>越简单的Schema所需要的存储空间就越小，对于MySQL而言需要的存储空间， IO， 运算等资源就越少，MySQL支持的QPS就越高<br>###	尽量避免大量NULL值的列<br>如果一个列有80%甚至90%以上的行都是NULL，那么这个属性值，很可能可以采取其他方法来实现，比如新建一张表，用ID去关联<br>###	不使用外键<br>外键在MySQL维护与使用中始终是一个坑，大家尽量在建表的时候避免使用外键。<br>###	合理建立索引<br>索引要根据查询而建， 并不是越多越好，索引多有可能会引起MySQL不能正确使用索引，MySQL维护索引的空间变大等等<br>###	写好表注释<br>与写代码一样一个良好的习惯就是所有MySQL的字段，及索引，表等都要有详尽的注释，注释不会占用多余空间，最好的注释是大家都能看懂的注释。</p>
]]></content>
      <categories>
        <category>storage</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 使用规范</title>
    <url>/2016/02/13/storage/mysql/standards/</url>
    <content><![CDATA[<h1 id="MySQL-使用规范"><a href="#MySQL-使用规范" class="headerlink" title="MySQL 使用规范"></a>MySQL 使用规范</h1><p>目前我们数据库使用缺乏一个统一的使用规范，这篇规范是我参考阿里的部分的BP以及赶集网的SQL 军规结合酷家乐自身的情况制定的。</p>
<h2 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h2><ol>
<li><pre><code>数据库操作与使用一定要按照规范进行
</code></pre>
<ol start="2">
<li><pre><code>所有的变更必须提前4小时提交申请，进过审批后才能执行操作
</code></pre>
<ol start="3">
<li><pre><code>全网变更必须经过线下测试，线上小规模验证后，才能全网推送
</code></pre>
<ol start="4">
<li><pre><code>数据订正和数据提取必须经过团队leader审核通过后才能进行操作；
</code></pre>
<ol start="5">
<li><pre><code>禁止未经正式审批进行查阅，变更，传播，移动线上数据；
</code></pre>
<ol start="6">
<li><pre><code>禁止对无关人员提供系统登录和发布权限；
</code></pre>
<ol start="7">
<li><pre><code>重大变更（数据库停机，扩容，迁移）必须团队review
</code></pre>
<ol start="8">
<li><pre><code>新发布的任何sql都必须进过严格的审核，添加上必要的索引
</code></pre>
<ol start="9">
<li><pre><code>线上的操作务必谨慎，必须在测试环境中完全验证后才能到线上执行，同时需要必要的数据备份
</code></pre>
<ol start="10">
<li><pre><code>禁止在非变更窗口执行变更， 添加索引或者添加字段的操作， 都需要在业务的低峰期进行
</code></pre>
<ol start="11">
<li><pre><code>禁止在程序端显式加锁 
</code></pre>
<ol start="12">
<li><pre><code>统一字符集为UTF8, 排序规则为 UTF-generic-ci
</code></pre>
<ol start="13">
<li><pre><code>统一命名规范 表名一律用大小写，schema设计避免关键字（MYSQL 关键字列表），索引使用同一前缀 index_ + colname 用下划线分割
</code></pre>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><ol>
<li><pre><code>尽量不在数据库做运算， 把MySQL作为一个存储组件
</code></pre>
<ol start="2">
<li><pre><code>在设计表之前就把表将来的使用场景考虑清楚，做好相应准备
</code></pre>
<ol start="3">
<li><pre><code>控制单表数据量 
</code></pre>
<ol start="4">
<li><pre><code>保持表身段苗条 
</code></pre>
<ol start="5">
<li><pre><code>平衡范式使用，不冗余非必要字段
</code></pre>
<ol start="6">
<li><pre><code>拒绝3B： BIG SQL)   大事务 (BIG Transaction)  大批量 (BIG Batch)
</code></pre>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="Schema设计"><a href="#Schema设计" class="headerlink" title="Schema设计"></a>Schema设计</h2><ol>
<li><pre><code>INNODB 引擎是你的最佳选择
</code></pre>
<ol start="2">
<li><pre><code>用好数值字段类型 
</code></pre>
<ol start="3">
<li><pre><code>将字符转化为数字， 如时间采用bigint, IP 采用 Unsigned Int， Enum 转为tinyint
</code></pre>
<ol start="4">
<li><pre><code>比较小的表，通常情况下数据量小于5000的表，在未来的预期内也不会增加到比较大的，不用建立索引。
</code></pre>
<ol start="5">
<li><pre><code>避免使用NULL字段 
</code></pre>
<ol start="6">
<li><pre><code>不在在数据库里存图片
</code></pre>
<ol start="7">
<li><pre><code>谨慎合理添加索引， 不要每个查询的字段都建立索引
</code></pre>
<ol start="8">
<li><pre><code>字符字段必须建前缀索引 
</code></pre>
<ol start="9">
<li><pre><code>不在索引列做运算 
</code></pre>
<ol start="10">
<li><pre><code>自增列或全局ID做INNODB主键 
</code></pre>
<ol start="11">
<li><pre><code>尽量不用外键
</code></pre>
<ol start="12">
<li><pre><code>自增主键是你的最佳选择
</code></pre>
<ol start="13">
<li><pre><code>新建表时总是设计添加冗余字段
</code></pre>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="SQL-语句类"><a href="#SQL-语句类" class="headerlink" title="SQL 语句类"></a>SQL 语句类</h2><ol>
<li><pre><code>SQL语句尽可能简单
</code></pre>
<ol start="2">
<li><pre><code>保持事务(连接)短小 
</code></pre>
<ol start="3">
<li><pre><code>尽可能避免使用SP/TRIG/FUNC 
</code></pre>
<ol start="4">
<li><pre><code>尽量不用 SELECT *  改写OR语句 
</code></pre>
<ol start="5">
<li><pre><code>避免负向查询和% 前缀模糊查询 
</code></pre>
<ol start="6">
<li><pre><code>减少COUNT(*) 
</code></pre>
<ol start="7">
<li><pre><code>LIMIT的高效分页 可以用where pk &gt; 之后limit num
</code></pre>
<ol start="8">
<li><pre><code>避免单次数据库操作涉及行数过多的查询，此类查询没有加limit的都应该warning
</code></pre>
<ol start="9">
<li><pre><code>尽量不使用UNION， 在代码里面实现Union
</code></pre>
<ol start="10">
<li><pre><code>分解联接保证高幵发 
</code></pre>
<ol start="11">
<li><pre><code>GROUP BY 去除排序 
</code></pre>
<ol start="12">
<li><pre><code>order by,确认排序字段是否用到索引，避免filesort
</code></pre>
<ol start="13">
<li><pre><code>在Update 操作的时候尽量不用 SELECT， 避免造成在此类操作的时候锁表
</code></pre>
<ol start="14">
<li><pre><code>同数据类型的列值比较 
</code></pre>
<ol start="15">
<li><pre><code>Load data导数据 
</code></pre>
<ol start="16">
<li><pre><code>打散大批量更新尽量不用 INSERT ... SELEC
</code></pre>
<ol start="17">
<li><pre><code>SQL 中 JOIN不超过两张表
</code></pre>
<ol start="18">
<li><pre><code>Know Your SQL!
</code></pre>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>storage</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>redis 内存分析工具 `rma4go`</title>
    <url>/2018/11/13/storage/redis/mem_analysis/</url>
    <content><![CDATA[<h2 id="redis-简介"><a href="#redis-简介" class="headerlink" title="redis 简介"></a>redis 简介</h2><p>redis是一个很有名的内存型数据库，这里不做详细介绍。而<code>rma4go</code> (redis memory analyzer for golang) 是一个redis的内存分析工具，这个工具的主要作用是针对运行时期的redis进行内存的分析，统计redis中key的分布情况， 各种数据类型的使用情况，key的size，大key的数量及分布, key的过期状况分布等一些有助于定位redis使用问题的工具，希望这能够给应用开发者提供便利排查生产中所遇到的实际问题。</p>
<h2 id="rma4go的应用场景"><a href="#rma4go的应用场景" class="headerlink" title="rma4go的应用场景"></a><code>rma4go</code>的应用场景</h2><p>redis是目前很流行的一个内存型数据库，很多企业都在使用。 但由于业界并没有很多对于redis使用上的规范，或者是有一些规范并没有被很好的遵循， 存在很多redis使用上的问题，我这边就列举一些例子：</p>
<ol>
<li>redis 存用满了, 不知道key的分布情况，不知道来源于那个应用</li>
<li>redis 被block了，不知道什么原因导致的block，是哪个应用里的什么key的操作导致的</li>
<li>想迁移redis数据，或者调整一些设置，但不知道要不要对redis里的数据进行保留，以及不知道什么业务在使用等</li>
<li>redis的key的过期情况不明朗， 不知道哪些东西可以删除或者调整<br>其实上面的一些问题是我随便列举出来的一些，并不是所有的存在的问题，相信也有很多其他场景同样会用到这样的一个redis内存分析工具<code>rma4go</code></li>
</ol>
<h2 id="rma4go的具体功能"><a href="#rma4go的具体功能" class="headerlink" title="rma4go的具体功能"></a>rma4go的具体功能</h2><h3 id="数据维度"><a href="#数据维度" class="headerlink" title="数据维度"></a>数据维度</h3><p>对于key的分析我们这个工具会提供如下几个维度的数据：</p>
<ul>
<li>key的数量分布维度</li>
<li>key的过期分布维度</li>
<li>key的类型分布维度</li>
<li>key对应的的数据的大小分布维度</li>
<li>key的前缀分布维度</li>
<li>慢key与大key的维度</li>
</ul>
<p>当然以后如果发现有更好的纬度也会添加进去，目前先以这几个纬度为主</p>
<h3 id="数据类型设计"><a href="#数据类型设计" class="headerlink" title="数据类型设计"></a>数据类型设计</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> RedisStat <span class="keyword">struct</span> &#123;</span><br><span class="line">	All     KeyStat <span class="string">`json:&quot;all&quot;`</span></span><br><span class="line">	String  KeyStat <span class="string">`json:&quot;string&quot;`</span></span><br><span class="line">	Hash    KeyStat <span class="string">`json:&quot;hash&quot;`</span></span><br><span class="line">	Set     KeyStat <span class="string">`json:&quot;set&quot;`</span></span><br><span class="line">	List    KeyStat <span class="string">`json:&quot;list&quot;`</span></span><br><span class="line">	ZSet    KeyStat <span class="string">`json:&quot;zset&quot;`</span></span><br><span class="line">	Other   KeyStat <span class="string">`json:&quot;other&quot;`</span></span><br><span class="line">	BigKeys KeyStat <span class="string">`json:&quot;bigKeys&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// distributions of keys of all prefixes</span></span><br><span class="line"><span class="keyword">type</span> Distribution <span class="keyword">struct</span> &#123;</span><br><span class="line">	KeyPattern <span class="type">string</span> <span class="string">`json:&quot;pattern&quot;`</span></span><br><span class="line">	Metrics</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// basic metrics of a group of key</span></span><br><span class="line"><span class="keyword">type</span> Metrics <span class="keyword">struct</span> &#123;</span><br><span class="line">	KeyCount       <span class="type">int64</span> <span class="string">`json:&quot;keyCount&quot;`</span></span><br><span class="line">	KeySize        <span class="type">int64</span> <span class="string">`json:&quot;keySize&quot;`</span></span><br><span class="line">	DataSize       <span class="type">int64</span> <span class="string">`json:&quot;dataSize&quot;`</span></span><br><span class="line">	KeyNeverExpire <span class="type">int64</span> <span class="string">`json:&quot;neverExpire&quot;`</span></span><br><span class="line">	ExpireInHour   <span class="type">int64</span> <span class="string">`json:&quot;expireInHour&quot;`</span>  <span class="comment">// &gt;= 0h &lt; 1h</span></span><br><span class="line">	ExpireInDay    <span class="type">int64</span> <span class="string">`json:&quot;expireInDay&quot;`</span>   <span class="comment">// &gt;= 1h &lt; 24h</span></span><br><span class="line">	ExpireInWeek   <span class="type">int64</span> <span class="string">`json:&quot;expireInWeek&quot;`</span>  <span class="comment">// &gt;= 1d &lt; 7d</span></span><br><span class="line">	ExpireOutWeek  <span class="type">int64</span> <span class="string">`json:&quot;expireOutWeek&quot;`</span> <span class="comment">// &gt;= 7d</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><h4 id="key元信息"><a href="#key元信息" class="headerlink" title="key元信息"></a>key元信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type KeyMeta struct &#123;</span><br><span class="line">	Key      string</span><br><span class="line">	KeySize  int64</span><br><span class="line">	DataSize int64</span><br><span class="line">	Ttl      int64</span><br><span class="line">	Type     string</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>众所周知， redis里的所有的数据基本都是由key的， 也是根据key进行操作的，那么对redis里的key进行分析我们必须要记录下来这个key的信息才可以做到， 我们能记录的信息正如以上结构中的一样， key本身， key的大小， 数据的大小， 过期时间以及key的类型。这些信息是我们对key进行分析的一个基础信息，都可以通过一些简单的redis命令就可以取到。</p>
<h4 id="遍历redis所有key"><a href="#遍历redis所有key" class="headerlink" title="遍历redis所有key"></a>遍历redis所有key</h4><p>要对一个redis进行完整的key分析， 我们就需要有办法能够访问到所有key的源信息， 所幸redis提供了 <code>scan</code>这么一种方式可以比较轻量的遍历所有的key，访问到相应的key的元信息。<br>这样对于redis而言， 进行在线key分析的时候造成的压力也不会非常大，当然key分析不能再QPS高峰期进行， 需要在redis资源余量允许的情况下进行分析。</p>
<p>另外由于redis本身的一个内存清理机制，有25%的过期占用可以在分析key的时候被清理掉， 因此这个分析工具同时兼具了清理一部分内存的作用， 如果redis里面存在过期的而且存在于内存里面的key的话。</p>
<h4 id="对记录的信息进行分析与汇总"><a href="#对记录的信息进行分析与汇总" class="headerlink" title="对记录的信息进行分析与汇总"></a>对记录的信息进行分析与汇总</h4><p>有了遍历所有key的方法， 又有了元数据， 剩下的事情就是把这些数据进行聚合汇总， 这个主要是一个算法上的工作，<br>最难的部分要数这个key聚合的部分了， 这里面有很多取舍， 由于作者我本人不是专攻算法的， 而且没有找到合适的库， 因此只能动手自己想了一种方式。 基本的思路是：</p>
<h5 id="压缩的算法"><a href="#压缩的算法" class="headerlink" title="压缩的算法"></a>压缩的算法</h5><ol>
<li>对于每个新的key的元信息， 添加到老的key分析对象里去</li>
<li>对这个key从后往前缩短， 去除尾部，看是否已经包含这个key的统计信息，如果包含， 则把key的信息累加上去， 如果不包含则创建一个新的纪录。</li>
<li>当记录的个数添加到一定数量的时候， 对对象的个数进行一次压缩<ul>
<li>压缩的算法也是从字符串的末尾往字符串首部进行压缩</li>
<li>当压缩不能增加这个pattern 的key的个数的时候使用原来的key（压缩前的key）</li>
<li>当压缩可以增加这个pattern的key的个数的时候，进行key的合并，把pattern设置成压缩后的pattern</li>
<li>当记录的条数超过指定的条数就循环往复，直到压缩到小于指定的条数为止</li>
<li>如果对于key的最小长度（就算再压缩也要保留一两位）有要求， 有一些压缩到字符串的最小长度的参数可以进行调整与设置， 进行一定的取舍。</li>
</ul>
</li>
<li>直到scan完毕</li>
</ol>
<h5 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h5><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	defaultSize = <span class="number">128</span></span><br><span class="line">	compactNum  = <span class="number">30</span></span><br><span class="line">	maxLeftNum =  <span class="number">150</span></span><br><span class="line">	minKeyLenLower = <span class="number">2</span></span><br><span class="line">	minKeyLen   = <span class="number">5</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(stat *KeyStat)</span></span> compact() &#123;</span><br><span class="line">	distMap := stat.Distribution</span><br><span class="line">	tmpMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">string</span>, defaultSize)</span><br><span class="line">	shrinkTo := compactNum</span><br><span class="line">	<span class="keyword">for</span> k := <span class="keyword">range</span> distMap &#123;</span><br><span class="line">		compactedKey := k</span><br><span class="line">		<span class="keyword">if</span> orgks, ok := tmpMap[compactedKey]; ok &#123;</span><br><span class="line">			orgks = <span class="built_in">append</span>(orgks, k)</span><br><span class="line">			tmpMap[compactedKey] = orgks</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			ks := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, defaultSize)</span><br><span class="line">			ks = <span class="built_in">append</span>(ks, k)</span><br><span class="line">			tmpMap[compactedKey] = ks</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	shrinkTo--</span><br><span class="line">	<span class="keyword">for</span> (<span class="built_in">len</span>(tmpMap) &gt; compactNum &amp;&amp; shrinkTo &gt;= minKeyLen) || (<span class="built_in">len</span>(tmpMap) &gt; maxLeftNum &amp;&amp; shrinkTo &gt;= minKeyLenLower) &#123;</span><br><span class="line">		tnMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">string</span>, defaultSize)</span><br><span class="line">		<span class="keyword">for</span> k := <span class="keyword">range</span> tmpMap &#123;</span><br><span class="line">			<span class="comment">// shrink</span></span><br><span class="line">			<span class="keyword">if</span> <span class="built_in">len</span>(k) &gt; shrinkTo &#123;</span><br><span class="line">				compactedKey := k[<span class="number">0</span>:shrinkTo]</span><br><span class="line">				<span class="keyword">if</span> oik, ok := tnMap[compactedKey]; ok &#123;</span><br><span class="line">					oik = <span class="built_in">append</span>(oik, tmpMap[k]...)</span><br><span class="line">					tnMap[compactedKey] = oik</span><br><span class="line"></span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					ks := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, defaultSize)</span><br><span class="line">					ks = <span class="built_in">append</span>(ks, tmpMap[k]...)</span><br><span class="line">					tnMap[compactedKey] = ks</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				tnMap[k] = tmpMap[k]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 如果此次shrink 没有使得这个集合的元素数量增加， 就使用原来的key</span></span><br><span class="line">		<span class="keyword">for</span> k := <span class="keyword">range</span> tmpMap &#123;</span><br><span class="line">			<span class="keyword">if</span> <span class="built_in">len</span>(k) &gt; shrinkTo &#123;</span><br><span class="line">				ck := k[<span class="number">0</span>:shrinkTo]</span><br><span class="line">				<span class="keyword">if</span> <span class="built_in">len</span>(tnMap[ck]) == <span class="built_in">len</span>(tmpMap[k]) &amp;&amp; <span class="built_in">len</span>(tnMap[ck]) &gt; <span class="number">1</span> &#123;</span><br><span class="line">					x := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, defaultSize)</span><br><span class="line">					tnMap[k] = <span class="built_in">append</span>(x, tnMap[ck]...)</span><br><span class="line">					<span class="built_in">delete</span>(tnMap, ck)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		tmpMap = tnMap</span><br><span class="line">		shrinkTo --</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	dists := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]Distribution, defaultSize)</span><br><span class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> tmpMap &#123;</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(v) &gt; <span class="number">1</span> &#123;</span><br><span class="line">			<span class="keyword">var</span> nd Distribution</span><br><span class="line">			<span class="keyword">for</span> _, dk := <span class="keyword">range</span> v &#123;</span><br><span class="line">				d := distMap[dk]</span><br><span class="line">				nd.KeyPattern = k + <span class="string">&quot;*&quot;</span></span><br><span class="line">				nd.KeyCount += d.KeyCount</span><br><span class="line">				nd.KeySize += d.KeySize</span><br><span class="line">				nd.DataSize += d.DataSize</span><br><span class="line">				nd.ExpireInHour += d.ExpireInHour</span><br><span class="line">				nd.ExpireInWeek += d.ExpireInWeek</span><br><span class="line">				nd.ExpireInDay += d.ExpireInDay</span><br><span class="line">				nd.ExpireOutWeek += d.ExpireOutWeek</span><br><span class="line">				nd.KeyNeverExpire += d.KeyNeverExpire</span><br><span class="line">			&#125;</span><br><span class="line">			dists[k] = nd</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> _, dk := <span class="keyword">range</span> v &#123;</span><br><span class="line">				nd := distMap[dk]</span><br><span class="line">				nd.KeyPattern = dk + <span class="string">&quot;*&quot;</span></span><br><span class="line">				dists[dk] = nd</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	stat.Distribution = dists</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="在线key分析的github项目"><a href="#在线key分析的github项目" class="headerlink" title="在线key分析的github项目"></a>在线key分析的github项目</h2><p><a href="https://github.com/winjeg/rma4go">rma4go</a><br>这是一个我已经写好的项目， 它使用起来非常简单</p>
<h3 id="构建方法"><a href="#构建方法" class="headerlink" title="构建方法"></a>构建方法</h3><ol>
<li>构建之前请确保golang sdk 已经安装， 并且版本 &gt;&#x3D;1.11.0</li>
<li>请确保已经具备翻墙的环境， 因为它要下载一些依赖，可能来自墙外<br>翻墙方法如下<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// linux/osx</span><br><span class="line"><span class="built_in">export</span> http_proxy=somehost:port</span><br><span class="line"><span class="built_in">export</span> https_proxy=somehost:port</span><br><span class="line">// windows</span><br><span class="line"><span class="built_in">set</span> http_proxy=somehost:port</span><br><span class="line"><span class="built_in">set</span> https_proxy=somehost:port</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>构建<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:winjeg/rma4go.git</span><br><span class="line">cd rma4go</span><br><span class="line">go build .</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>用法如下：<code>rma4go -h</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rma4go usage:</span><br><span class="line">rma4go -r some_host -p 6379 -a password -d 0</span><br><span class="line">======================================================</span><br><span class="line">  -H string</span><br><span class="line">        address of a redis (default &quot;localhost&quot;)</span><br><span class="line">  -a string</span><br><span class="line">        password/auth of the redis</span><br><span class="line">  -d int</span><br><span class="line">        db of the redis to analyze</span><br><span class="line">  -h    help content</span><br><span class="line">  -p int</span><br><span class="line">        port of the redis (default 6379)</span><br><span class="line">  -r string</span><br><span class="line">        address of a redis (default &quot;localhost&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="示例输出"><a href="#示例输出" class="headerlink" title="示例输出"></a>示例输出</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">all keys statistics</span><br><span class="line"></span><br><span class="line">| PATTERN | KEY NUM | KEY SIZE | DATA SIZE | EXPIRE IN HOUR | EXPIRE IN DAY | EXPIRE IN WEEK | EXPIRE OUT WEEK | NEVER EXPIRE |</span><br><span class="line">|---------|---------|----------|-----------|----------------|---------------|----------------|-----------------|--------------|</span><br><span class="line">| total   |       0 |        0 |         0 |              0 |             0 |              0 |               0 |            0 |</span><br><span class="line">string keys statistics</span><br><span class="line"></span><br><span class="line">| PATTERN | KEY NUM | KEY SIZE | DATA SIZE | EXPIRE IN HOUR | EXPIRE IN DAY | EXPIRE IN WEEK | EXPIRE OUT WEEK | NEVER EXPIRE |</span><br><span class="line">|---------|---------|----------|-----------|----------------|---------------|----------------|-----------------|--------------|</span><br><span class="line">| total   |       0 |        0 |         0 |              0 |             0 |              0 |               0 |            0 |</span><br><span class="line">list keys statistics</span><br><span class="line"></span><br><span class="line">| PATTERN | KEY NUM | KEY SIZE | DATA SIZE | EXPIRE IN HOUR | EXPIRE IN DAY | EXPIRE IN WEEK | EXPIRE OUT WEEK | NEVER EXPIRE |</span><br><span class="line">|---------|---------|----------|-----------|----------------|---------------|----------------|-----------------|--------------|</span><br><span class="line">| total   |       0 |        0 |         0 |              0 |             0 |              0 |               0 |            0 |</span><br><span class="line">hash keys statistics</span><br><span class="line"></span><br><span class="line">| PATTERN | KEY NUM | KEY SIZE | DATA SIZE | EXPIRE IN HOUR | EXPIRE IN DAY | EXPIRE IN WEEK | EXPIRE OUT WEEK | NEVER EXPIRE |</span><br><span class="line">|---------|---------|----------|-----------|----------------|---------------|----------------|-----------------|--------------|</span><br><span class="line">| total   |       0 |        0 |         0 |              0 |             0 |              0 |               0 |            0 |</span><br><span class="line">set keys statistics</span><br><span class="line"></span><br><span class="line">| PATTERN | KEY NUM | KEY SIZE | DATA SIZE | EXPIRE IN HOUR | EXPIRE IN DAY | EXPIRE IN WEEK | EXPIRE OUT WEEK | NEVER EXPIRE |</span><br><span class="line">|---------|---------|----------|-----------|----------------|---------------|----------------|-----------------|--------------|</span><br><span class="line">| total   |       0 |        0 |         0 |              0 |             0 |              0 |               0 |            0 |</span><br><span class="line">zset keys statistics</span><br><span class="line"></span><br><span class="line">| PATTERN | KEY NUM | KEY SIZE | DATA SIZE | EXPIRE IN HOUR | EXPIRE IN DAY | EXPIRE IN WEEK | EXPIRE OUT WEEK | NEVER EXPIRE |</span><br><span class="line">|---------|---------|----------|-----------|----------------|---------------|----------------|-----------------|--------------|</span><br><span class="line">| total   |       0 |        0 |         0 |              0 |             0 |              0 |               0 |            0 |</span><br><span class="line">other keys statistics</span><br><span class="line"></span><br><span class="line">| PATTERN | KEY NUM | KEY SIZE | DATA SIZE | EXPIRE IN HOUR | EXPIRE IN DAY | EXPIRE IN WEEK | EXPIRE OUT WEEK | NEVER EXPIRE |</span><br><span class="line">|---------|---------|----------|-----------|----------------|---------------|----------------|-----------------|--------------|</span><br><span class="line">| total   |       0 |        0 |         0 |              0 |             0 |              0 |               0 |            0 |</span><br><span class="line">big keys statistics</span><br><span class="line"></span><br><span class="line">| PATTERN | KEY NUM | KEY SIZE | DATA SIZE | EXPIRE IN HOUR | EXPIRE IN DAY | EXPIRE IN WEEK | EXPIRE OUT WEEK | NEVER EXPIRE |</span><br><span class="line">|---------|---------|----------|-----------|----------------|---------------|----------------|-----------------|--------------|</span><br><span class="line">| total   |       0 |        0 |         0 |              0 |             0 |              0 |               0 |            0 |</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>rendered by markdown<br>total count 4004</p>
<p>all keys statistics</p>
<table>
<thead>
<tr>
<th>PATTERN</th>
<th>KEY NUM</th>
<th>KEY SIZE</th>
<th>DATA SIZE</th>
<th>EXPIRE IN HOUR</th>
<th>EXPIRE IN DAY</th>
<th>EXPIRE IN WEEK</th>
<th>EXPIRE OUT WEEK</th>
<th>NEVER EXPIRE</th>
</tr>
</thead>
<tbody><tr>
<td>TOP_TEN_NEW_XXXXXXXX*</td>
<td>1</td>
<td>20</td>
<td>1529</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>XXXXXXXXXXXXXX_STATISTICS_MIGRATION_LIST*</td>
<td>1</td>
<td>40</td>
<td>7692832</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>time-root:*</td>
<td>23</td>
<td>272</td>
<td>299</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>23</td>
</tr>
<tr>
<td>DS_AXXXXXXXX_CORRECT*</td>
<td>2</td>
<td>45</td>
<td>46</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2</td>
</tr>
<tr>
<td>time-2*</td>
<td>761</td>
<td>7528</td>
<td>9893</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>761</td>
</tr>
<tr>
<td>time-level:*</td>
<td>537</td>
<td>8461</td>
<td>6981</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>537</td>
</tr>
<tr>
<td>time-9*</td>
<td>102</td>
<td>901</td>
<td>1326</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>102</td>
</tr>
<tr>
<td>time-7*</td>
<td>153</td>
<td>1372</td>
<td>1989</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>153</td>
</tr>
<tr>
<td>DS_MAGIC_SUCC_2017-06-22*</td>
<td>1</td>
<td>24</td>
<td>415</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>tersssss*</td>
<td>5</td>
<td>124</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>5</td>
</tr>
<tr>
<td>appoint_abcdefg_msgid*</td>
<td>1</td>
<td>21</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>BUSSINESSXXXXXXX_STATISTICS_NEED_CALC_RECENT*</td>
<td>1</td>
<td>44</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>switch_abcd_abcde*</td>
<td>3</td>
<td>69</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>3</td>
</tr>
<tr>
<td>abcdeferCounter_201*</td>
<td>3</td>
<td>78</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>3</td>
</tr>
<tr>
<td>diy1234567flag*</td>
<td>1</td>
<td>14</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>DS_PRXXBCD_LIST*</td>
<td>1</td>
<td>15</td>
<td>17208</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>time-4*</td>
<td>133</td>
<td>1194</td>
<td>1729</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>133</td>
</tr>
<tr>
<td>datastatistics_switch_version0*</td>
<td>1</td>
<td>30</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>register_count_2_201*</td>
<td>592</td>
<td>15984</td>
<td>640</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>592</td>
</tr>
<tr>
<td>canVisitNewabcdef1234PageLevels*</td>
<td>1</td>
<td>31</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>YOUR_WEEK_VITALITY_INFO*</td>
<td>1</td>
<td>23</td>
<td>75782</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>time-8*</td>
<td>101</td>
<td>894</td>
<td>1313</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>101</td>
</tr>
<tr>
<td>EXPERTS_APPOINT_INFO_MAP*</td>
<td>1</td>
<td>24</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>time-3*</td>
<td>130</td>
<td>1215</td>
<td>1690</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>130</td>
</tr>
<tr>
<td>time-1*</td>
<td>943</td>
<td>9456</td>
<td>12259</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>943</td>
</tr>
<tr>
<td>time-64*</td>
<td>87</td>
<td>781</td>
<td>1131</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>87</td>
</tr>
<tr>
<td>time-5*</td>
<td>168</td>
<td>1516</td>
<td>2184</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>168</td>
</tr>
<tr>
<td>total</td>
<td>4004</td>
<td>53422</td>
<td>7832490</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>4004</td>
</tr>
</tbody></table>
<p>string keys statistics</p>
<table>
<thead>
<tr>
<th>PATTERN</th>
<th>KEY NUM</th>
<th>KEY SIZE</th>
<th>DATA SIZE</th>
<th>EXPIRE IN HOUR</th>
<th>EXPIRE IN DAY</th>
<th>EXPIRE IN WEEK</th>
<th>EXPIRE OUT WEEK</th>
<th>NEVER EXPIRE</th>
</tr>
</thead>
<tbody><tr>
<td>BUSSINESSXXXXXXX_STATISTICS_NEED_CALC_RECENT*</td>
<td>1</td>
<td>44</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>time-5*</td>
<td>130</td>
<td>1174</td>
<td>1690</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>130</td>
</tr>
<tr>
<td>datastatistics_switch_version0*</td>
<td>1</td>
<td>30</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>time-7*</td>
<td>39</td>
<td>348</td>
<td>507</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>39</td>
</tr>
<tr>
<td>time-level:*</td>
<td>567</td>
<td>8939</td>
<td>7371</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>567</td>
</tr>
<tr>
<td>diy1234567flag*</td>
<td>1</td>
<td>14</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>switch_abcd_abcde*</td>
<td>3</td>
<td>69</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>3</td>
</tr>
<tr>
<td>time-2*</td>
<td>598</td>
<td>5918</td>
<td>7774</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>598</td>
</tr>
<tr>
<td>time-6*</td>
<td>125</td>
<td>1118</td>
<td>1625</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>125</td>
</tr>
<tr>
<td>time-4*</td>
<td>136</td>
<td>1225</td>
<td>1768</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>136</td>
</tr>
<tr>
<td>time-8*</td>
<td>72</td>
<td>636</td>
<td>936</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>72</td>
</tr>
<tr>
<td>time-1*</td>
<td>1176</td>
<td>11814</td>
<td>15288</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1176</td>
</tr>
<tr>
<td>time-9*</td>
<td>100</td>
<td>880</td>
<td>1300</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>100</td>
</tr>
<tr>
<td>time-root:*</td>
<td>23</td>
<td>272</td>
<td>299</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>23</td>
</tr>
<tr>
<td>register_count_2_201*</td>
<td>592</td>
<td>15984</td>
<td>640</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>592</td>
</tr>
<tr>
<td>DS_AXXXXXXXX_CORRECT*</td>
<td>1</td>
<td>20</td>
<td>20</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>TOP_TEN_NEW_tersssss*</td>
<td>1</td>
<td>20</td>
<td>1529</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>time-3*</td>
<td>202</td>
<td>1925</td>
<td>2626</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>202</td>
</tr>
<tr>
<td>total</td>
<td>3989</td>
<td>53042</td>
<td>46253</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>3989</td>
</tr>
</tbody></table>
<p>list keys statistics</p>
<table>
<thead>
<tr>
<th>PATTERN</th>
<th>KEY NUM</th>
<th>KEY SIZE</th>
<th>DATA SIZE</th>
<th>EXPIRE IN HOUR</th>
<th>EXPIRE IN DAY</th>
<th>EXPIRE IN WEEK</th>
<th>EXPIRE OUT WEEK</th>
<th>NEVER EXPIRE</th>
</tr>
</thead>
<tbody><tr>
<td>XXXXXXXXXXXXXX_STATISTICS_MIGRATION_LIST*</td>
<td>1</td>
<td>40</td>
<td>7692832</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>DS_MAGIC_SUCC_2017-06-22*</td>
<td>1</td>
<td>24</td>
<td>415</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>DS_PRXXBCD_LIST*</td>
<td>1</td>
<td>15</td>
<td>17208</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>total</td>
<td>3</td>
<td>79</td>
<td>7710455</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>3</td>
</tr>
</tbody></table>
<p>hash keys statistics</p>
<table>
<thead>
<tr>
<th>PATTERN</th>
<th>KEY NUM</th>
<th>KEY SIZE</th>
<th>DATA SIZE</th>
<th>EXPIRE IN HOUR</th>
<th>EXPIRE IN DAY</th>
<th>EXPIRE IN WEEK</th>
<th>EXPIRE OUT WEEK</th>
<th>NEVER EXPIRE</th>
</tr>
</thead>
<tbody><tr>
<td>tersssss_action_prepage_new*</td>
<td>1</td>
<td>27</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>YOUR_WEEK_VITALITY_INFO*</td>
<td>1</td>
<td>23</td>
<td>75782</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>EXPERTS_APPOINT_INFO_MAP*</td>
<td>1</td>
<td>24</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>abcdeferCounter_2017-06-11*</td>
<td>1</td>
<td>26</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>tersssssHardTaskCounter*</td>
<td>1</td>
<td>23</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>abcdeferCounter_2018-04-27*</td>
<td>1</td>
<td>26</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>abcdeferCounter_2017-09-01*</td>
<td>1</td>
<td>26</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>tersssssEasyTaskCounter*</td>
<td>1</td>
<td>23</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>total</td>
<td>8</td>
<td>198</td>
<td>75782</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>8</td>
</tr>
</tbody></table>
<p>set keys statistics</p>
<table>
<thead>
<tr>
<th>PATTERN</th>
<th>KEY NUM</th>
<th>KEY SIZE</th>
<th>DATA SIZE</th>
<th>EXPIRE IN HOUR</th>
<th>EXPIRE IN DAY</th>
<th>EXPIRE IN WEEK</th>
<th>EXPIRE OUT WEEK</th>
<th>NEVER EXPIRE</th>
</tr>
</thead>
<tbody><tr>
<td>tersssss_bind_phone_phone*</td>
<td>1</td>
<td>25</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>appoint_abcdefg_msgid*</td>
<td>1</td>
<td>21</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>canVisitNewabcdef1234PageLevels*</td>
<td>1</td>
<td>31</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>tersssss_bind_phone_userid*</td>
<td>1</td>
<td>26</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>total</td>
<td>4</td>
<td>103</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>4</td>
</tr>
</tbody></table>
<p>zset keys statistics</p>
<table>
<thead>
<tr>
<th>PATTERN</th>
<th>KEY NUM</th>
<th>KEY SIZE</th>
<th>DATA SIZE</th>
<th>EXPIRE IN HOUR</th>
<th>EXPIRE IN DAY</th>
<th>EXPIRE IN WEEK</th>
<th>EXPIRE OUT WEEK</th>
<th>NEVER EXPIRE</th>
</tr>
</thead>
<tbody><tr>
<td>total</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>other keys statistics</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>PATTERN</th>
<th>KEY NUM</th>
<th>KEY SIZE</th>
<th>DATA SIZE</th>
<th>EXPIRE IN HOUR</th>
<th>EXPIRE IN DAY</th>
<th>EXPIRE IN WEEK</th>
<th>EXPIRE OUT WEEK</th>
<th>NEVER EXPIRE</th>
</tr>
</thead>
<tbody><tr>
<td>total</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody></table>
<p>big keys statistics</p>
<table>
<thead>
<tr>
<th>PATTERN</th>
<th>KEY NUM</th>
<th>KEY SIZE</th>
<th>DATA SIZE</th>
<th>EXPIRE IN HOUR</th>
<th>EXPIRE IN DAY</th>
<th>EXPIRE IN WEEK</th>
<th>EXPIRE OUT WEEK</th>
<th>NEVER EXPIRE</th>
</tr>
</thead>
<tbody><tr>
<td>XXXXXXXXXXXXXX_STATISTICS_MIGRATION_LIST*</td>
<td>1</td>
<td>40</td>
<td>7692832</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>total</td>
<td>1</td>
<td>40</td>
<td>7692832</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
</tbody></table>
<h3 id="作为依赖使用"><a href="#作为依赖使用" class="headerlink" title="作为依赖使用"></a>作为依赖使用</h3><p>获取方法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go get github.com/winjeg/rma4go</span><br></pre></td></tr></table></figure>

<p>使用方法如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">testFunc</span><span class="params">()</span></span> &#123;</span><br><span class="line">	h := <span class="string">&quot;localhost&quot;</span></span><br><span class="line">	a := <span class="string">&quot;&quot;</span></span><br><span class="line">	p := <span class="number">6379</span></span><br><span class="line">	cli := client.BuildRedisClient(client.ConnInfo&#123;</span><br><span class="line">		Host: h,</span><br><span class="line">		Auth: a,</span><br><span class="line">		Port: p,</span><br><span class="line">	&#125;, cmder.GetDb())</span><br><span class="line"></span><br><span class="line">	stat := analyzer.ScanAllKeys(cli)</span><br><span class="line">    <span class="comment">// print in command line</span></span><br><span class="line">	stat.Print()</span><br><span class="line">	<span class="comment">// the object is ready to use</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="github-维护-主要阵地"><a href="#github-维护-主要阵地" class="headerlink" title="github 维护(主要阵地)"></a>github 维护(主要阵地)</h3><ol>
<li>欢迎其他开发者加入</li>
<li>欢迎提issue 反馈问题</li>
<li>欢迎任何有意义的建议</li>
<li>另外欢迎star，不建议fork，建议直接提交PR  ; )</li>
</ol>
]]></content>
      <categories>
        <category>storage</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis 简谈redis监控</title>
    <url>/2017/12/13/storage/redis/monitoring/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>由于redis是一个内存型的数据库，关注的点势必跟MySQL等非内存型的数据库相差比较多， 因此有必要单独对redis的监控关注项进行梳理。<br>此外由于redis的单线程模型， 以及速度要求非常高，因此对于redis的监控需要因事制宜。</p>
<h3 id="监控项"><a href="#监控项" class="headerlink" title="监控项"></a>监控项</h3><h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><p>由于redis是内存型数据库，因此对于内存的需求是最大的需求， 监控项里面最重要的也是对于内存的监控，一般出问题，大概率是内存满掉的问题。<br>一般内存满了之后会导致一系列的问题，比如逐出了不该逐出的key、写不进数据、 超时阻塞等问题。 对于内存的监控是至关重要的。<br>一般一个合理的范围是在 30% 到70%之间。而超过了80%就需要报警和升级了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10.1.9.164:7300&gt; info memory</span><br><span class="line"><span class="comment"># Memory</span></span><br><span class="line">used_memory:108476200</span><br><span class="line">used_memory_human:103.45M</span><br><span class="line">used_memory_rss:129523712</span><br><span class="line">used_memory_rss_human:123.52M</span><br><span class="line">used_memory_peak:109672760</span><br><span class="line">used_memory_peak_human:104.59M</span><br><span class="line">total_system_memory:16658898944</span><br><span class="line">total_system_memory_human:15.51G</span><br><span class="line">used_memory_lua:37888</span><br><span class="line">used_memory_lua_human:37.00K</span><br><span class="line">maxmemory:4294967296</span><br><span class="line">maxmemory_human:4.00G</span><br><span class="line">maxmemory_policy:volatile-lru</span><br><span class="line">mem_fragmentation_ratio:1.19</span><br><span class="line">mem_allocator:jemalloc-4.0.3</span><br><span class="line">10.1.9.164:7300&gt;</span><br></pre></td></tr></table></figure>

<h3 id="大Key，-慢查询"><a href="#大Key，-慢查询" class="headerlink" title="大Key， 慢查询"></a>大Key， 慢查询</h3><p>另外一个比较常见的导致线上问题的一大因素是对于redis的不合理的使用，如 大key与慢查询<br>一般而言redis的key与数据越大， 导致的查询时长就越长， 加上redis本身是单线程的模型，因此这类查询往往会影响到其他查询的正常进行， 对大key的控制一方面可以通过中间件或者proxy 等手段来截断或者拒绝， 一方面也是需要使用一定的手段如 redis的 <code>slowlog get</code>命令来查看。<br>有了能获取的方法，那自然就可以对这些东西进行监控并合理的进行报警。 一般来讲redis模型中， 还是以尽量不出现慢查询为宜， 一旦出现慢查询就应该立即报警。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10.1.9.164:7300&gt; slowlog get</span><br><span class="line">1) 1) (integer) 155</span><br><span class="line">   2) (integer) 1545025300</span><br><span class="line">   3) (integer) 19422</span><br><span class="line">   4) 1) &quot;COMMAND&quot;</span><br><span class="line">2) 1) (integer) 154</span><br><span class="line">   2) (integer) 1544754674</span><br><span class="line">   3) (integer) 11571</span><br><span class="line">   4) 1) &quot;scan&quot;</span><br><span class="line">      2) &quot;26005&quot;</span><br><span class="line">      3) &quot;MATCH&quot;</span><br><span class="line">      4) &quot;*&quot;</span><br><span class="line">      5) &quot;COUNT&quot;</span><br><span class="line">      6) &quot;10000&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="连接数"><a href="#连接数" class="headerlink" title="连接数"></a>连接数</h3><p>redis在与客户端进行通信也是维护了连接的， 这些连接用来处理服务端与redis server之间的命令发送与数据发送等等 另外redis的最大连接数是有上限的 可以通过命令 <code>config get maxclients</code>来取得， 也可以使用<code>info clients</code>来看连接的使用情况，一般而言，连接数只要使用不满其实是不会出现太多的问题的， 但一定用满了，则会导致应用端错误。 因此对于连接数的监控也是以比率为标准比较好， 建议合理的范围是 &lt; 60%, 对于超过80%的情况应给予报警</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info clients</span><br><span class="line">#Clients</span><br><span class="line">connected_clients:621</span><br><span class="line">client_longest_output_list:0</span><br><span class="line">client_biggest_input_buf:0</span><br><span class="line">blocked_clients:0</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; CONFIG GET maxclients</span><br><span class="line">    ##1) &quot;maxclients&quot;</span><br><span class="line">    ##2) &quot;10000&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><p>CPU对于redis来说也是比较重要的需要关注的一个项， 一般跟QPS直接相关， QPS越高，CPU使用的也就越高。<br>对于redis服务来讲， CPU 跟其他服务的要求差别也不大， 不正常区间是 &lt;70% 超过80%则需要报警。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10.1.9.164:7300&gt; info cpu</span><br><span class="line"># CPU</span><br><span class="line">used_cpu_sys:88088.66</span><br><span class="line">used_cpu_user:39641.02</span><br><span class="line">used_cpu_sys_children:40.78</span><br><span class="line">used_cpu_user_children:131.68</span><br><span class="line">10.1.9.164:7300&gt;</span><br></pre></td></tr></table></figure>

<h4 id="QPS"><a href="#QPS" class="headerlink" title="QPS"></a>QPS</h4><p>QPS 即每秒钟Redis接受的请求数量，不同的Key的大小支持的QPS对于Redis是不同的， 因此单一的对redis的QPS进行监控可能意义不大。<br>如果要做redis QPS的监控应该与历史同期相比较，是否有剧增等情况。 还有一个可以参照点就是经验值， 一般这个配置的redis可以承受多少的QPS。 通过经验值与历史对比两个标准来决定是否需要报警。一般是历史同期的两倍，且比高峰期高的时候，是应该报警的。</p>
<p>QPS 可以通过计算两个时间间隔内执行的总命令数量来计算出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10.1.9.164:7300&gt; info  stats</span><br><span class="line"># Stats</span><br><span class="line">total_connections_received:215774</span><br><span class="line">total_commands_processed:2980658450</span><br><span class="line">instantaneous_ops_per_sec:50</span><br><span class="line">total_net_input_bytes:1135673367887</span><br><span class="line">total_net_output_bytes:594951090244</span><br><span class="line">instantaneous_input_kbps:30.66</span><br><span class="line">instantaneous_output_kbps:13.65</span><br><span class="line">rejected_connections:0</span><br><span class="line">sync_full:0</span><br><span class="line">sync_partial_ok:0</span><br><span class="line">sync_partial_err:0</span><br><span class="line">expired_keys:161591</span><br><span class="line">evicted_keys:0</span><br><span class="line">keyspace_hits:112552664</span><br><span class="line">keyspace_misses:809125690</span><br><span class="line">pubsub_channels:0</span><br><span class="line">pubsub_patterns:0</span><br><span class="line">latest_fork_usec:3349</span><br><span class="line">migrate_cached_sockets:0</span><br><span class="line">10.1.9.164:7300&gt;</span><br></pre></td></tr></table></figure>

<h4 id="网络IO"><a href="#网络IO" class="headerlink" title="网络IO"></a>网络IO</h4><p>网络IO就是redis在处理命令的时候占用的网络的流入与流出的量， 一般而言， 网络IO是较少关注的一个点， 但在网络达到带宽的上限的时候我们还是应该重视起来， 因为这个时候其他的东西是会阻塞的， 一般推荐的报警值为超过网络带宽的 80%</p>
]]></content>
      <categories>
        <category>storage</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis 使用规范</title>
    <url>/2017/12/14/storage/redis/redis_standards/</url>
    <content><![CDATA[<h2 id="key-x2F-value规范"><a href="#key-x2F-value规范" class="headerlink" title="key&#x2F;value规范"></a>key&#x2F;value规范</h2><ol>
<li>所有的key 应该有合理的业务前缀</li>
<li>key 不应该包含特殊字符，应尽量使用常见的字母，数字， 下划线等组合</li>
<li>key 的大小应该保证在<code>16kb</code> 之内</li>
<li>value 的大小应该保证在<code>1M</code>之内， 拒绝bigkey(防止网卡流量、慢查询)</li>
<li>string类型控制在10KB以内，hash、list、set、zset元素个数不要超过5000。</li>
<li>控制key的生命周期，redis不是垃圾桶, 能过期的key一定要设置过期时间</li>
</ol>
<h2 id="数据类型使用注意"><a href="#数据类型使用注意" class="headerlink" title="数据类型使用注意"></a>数据类型使用注意</h2><ol>
<li>hash 不推荐使用 <code>hkeys</code> 命令除非hash表的尺寸非常小， 否则推荐使用scan</li>
<li>set&#x2F;zset&#x2F;list 需要遍历整个列表也尽量使用<code>scan</code>与 <code>lindex</code>等命令</li>
<li>非字符串的bigkey，不要使用del删除，使用hscan、sscan、zscan方式渐进式删除，同时要注意防止bigkey过期时间自动删除问题(例如一个200万的zset设置1小时过期，会触发del操作，造成阻塞，而且该操作不会不出现在慢查询中(latency可查))</li>
<li>选择适合的数据类型, 注意节省内存和性能之间的平衡</li>
</ol>
<h2 id="命令使用"><a href="#命令使用" class="headerlink" title="命令使用"></a>命令使用</h2><ol>
<li>O(N)命令关注N的数量<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如hgetall、lrange、smembers、zrange、sinter等并非不能使用，但是需要明确N的值。有遍历的需求可以使用hscan、sscan、zscan代替。</span><br></pre></td></tr></table></figure></li>
<li>禁用命令<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">禁止线上使用keys、flushall、flushdb等，通过redis的rename机制禁掉命令，或者使用scan的方式渐进式处理。</span><br></pre></td></tr></table></figure></li>
<li>不推荐使用select,  新业务禁止使用 select</li>
<li>用批量操作提高效率, 但要注意控制一次批量操作的元素个数(例如500以内，实际也和元素字节数有关)。</li>
<li>Redis事务功能较弱，不建议过多使用</li>
<li>必要情况下使用monitor命令时，要注意不要长时间使用</li>
</ol>
<h2 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h2><ol>
<li>避免多个应用使用一个Redis实例, 不相干的业务拆分，公共数据做服务化</li>
<li>使用带有连接池的数据库，可以有效控制连接，同时提高效率</li>
<li>高并发下建议客户端添加熔断功能(例如netflix hystrix)</li>
<li>设置合理的密码</li>
<li>根据自身业务类型，选好maxmemory-policy(最大内存淘汰策略)，设置好过期时间</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">volatile-lru: 即超过最大内存后，在过期键中使用lru算法进行key的剔除，保证不过期数据不被删除，但是可能会出现OOM问题</span><br><span class="line">allkeys-lru：根据LRU算法删除键，不管数据有没有设置超时属性，直到腾出足够空间为止。</span><br><span class="line">allkeys-random：随机删除所有键，直到腾出足够空间为止。</span><br><span class="line">volatile-random:随机删除过期键，直到腾出足够空间为止。</span><br><span class="line">volatile-ttl：根据键值对象的ttl属性，删除最近将要过期数据。如果没有，回退到noeviction策略。</span><br><span class="line">noeviction：不会剔除任何数据，拒绝所有写入操作并返回客户端错误信息&quot;(error) OOM command not allowed when used memory&quot;，此时Redis只响应读操作。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>storage</category>
        <category>database</category>
      </categories>
      <tags>
        <tag>database</tag>
        <tag>redis</tag>
      </tags>
  </entry>
</search>
