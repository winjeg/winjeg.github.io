<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>winjeg&#39;s blog</title>
  
  <subtitle>Like water, like sun.</subtitle>
  <link href="https://winjeg.github.io/atom.xml" rel="self"/>
  
  <link href="https://winjeg.github.io/"/>
  <updated>2022-12-09T11:34:13.614Z</updated>
  <id>https://winjeg.github.io/</id>
  
  <author>
    <name>winjeg</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简而美的 国产MySQL GUI 工具 Tables+</title>
    <link href="https://winjeg.github.io/2022/11/19/software/table_plus/"/>
    <id>https://winjeg.github.io/2022/11/19/software/table_plus/</id>
    <published>2022-11-19T07:14:11.000Z</published>
    <updated>2022-12-09T11:34:13.614Z</updated>
    
    <content type="html"><![CDATA[<p>Tables+ 是一款面向大众程序员开放的， 一款MySQL客户端， 它使用electron编写， 以保证此软件的跨平台可用， 另外，它是一款纯个人打造软件， 也希望大家多予以支持，以便此软件能够更好的发展下去。</p><p> MySQL已经毫无疑问的成为了中小网站的首选存储方案，MySQL的工具，市面上现有的MySQL客户端还是比较多的。市面上现有的一些MySQL工具想必大家也不陌生。但毫无疑问，这些都是几十年的老工具了。很少会给人焕然一新的感觉，而且很多都已经与现在流行的界面元素脱节， Tables+ 的出现，无疑是弥补了这些缺失， 更重要的是它是一款相对完整的国产 MySQL客户端软件。</p><h2 id="功能列表"><a href="#功能列表" class="headerlink" title="功能列表"></a>功能列表</h2><p>下面通过一些典型的软件界面截图，来介绍此软件的功能, 附软件<a href="https://github.com/gridsx/gridsx.github.io/releases/tag/v1.0.0">下载地址</a><br><a href="https://github.com/gridsx/gridsx.github.io/releases/tag/v1.0.0">备用下载地址</a></p><h3 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2bd8ab64a35f4af982773cb269bc1ce8~tplv-k3u1fbpfcp-watermark.image" alt="conn_mgr.png"><br>您可以通过连接管理-&gt;添加MySQL连接，进行MySQL连接信息的录入。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e9e4454702c4d61b1471def4d2140c3~tplv-k3u1fbpfcp-watermark.image" alt="home.png"><br> 录入完毕后，如果您需要删除或者修改，可以在软件首页，去删除这些已经录入的连接信息。<br> 如果您录入了非常多的连接信息， 您可以通过首页右上角的搜索按钮，对您录入的连接进行搜索过滤。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/be0bcaa8a1b34206a620a9f58a280bd6~tplv-k3u1fbpfcp-watermark.image" alt="query.png"><br>点击首页卡片， 可以轻松进入数据库查询界面， 这里您可以输入SQL进行查询，查看执行计划， 也可以保存和格式化您的SQL。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d92473e2b59e4cffb14ee2cc62511e42~tplv-k3u1fbpfcp-watermark.image" alt="tables.png"><br>点击左侧表列表，您将看到此库下面的所有的表， 如果您的表数量过多，还可以进行分组管理哦，这是一个非常方便的功能， 这里可以进行常见的双击查看表数据，删除表， 新建表等操作， 也可以对打开的表的数据进行修改保存。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3644067fe88345d1952fb53b6e3b1d1e~tplv-k3u1fbpfcp-watermark.image" alt="design.png"></p><p>在设计表界面， 您可以随意的修改表的列， 索引， 以及其他表选项， 以便满足您的表设计需求。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/811d94f3b6754106bd7459a282afca62~tplv-k3u1fbpfcp-watermark.image" alt="user_sql.png"><br>最后， 如果您想查看自己保存的SQL在哪，可以点击用户SQL，查看自己保存的SQL。<br>如果您想查看SQL内容，可以直接点击这里的卡片，进入查询页面，即可查看和查询。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9bb421d847546df87604c2681706262~tplv-k3u1fbpfcp-watermark.image" alt="lang.png"><br>最后， 如果您想对此软件的外观，和语言进行一定的修改，您可以通过文件-&gt; 设置， 找到您能设置的一些选项。</p><h2 id="设计理念：简单和美"><a href="#设计理念：简单和美" class="headerlink" title="设计理念：简单和美"></a>设计理念：简单和美</h2><p>Tables+ 对于多余的功能，绝对不设计， 比如不常用的函数， 不常用的存储过程， 以及触发器等等。<br>这些已经被很多互联网公司弃用， 因此，在此软件中不会特别的支持这些已经过时了的功能。 软件本身采用了比较现代的界面设计语言， 很多功能都经过精心调试和设计。</p><h2 id="软件-RoadMap"><a href="#软件-RoadMap" class="headerlink" title="软件 RoadMap:"></a>软件 RoadMap:</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7bdde8cb2f164dd0a73481ce44be1921~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><p>如果您对此软件有疑问，或者有兴趣， 可以 <a href="mailto://winjeg@qq.com">邮件</a> 我，说明您的意向。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Tables+ 是一款面向大众程序员开放的， 一款MySQL客户端， 它使用electron编写， 以保证此软件的跨平台可用， 另外，它是一款纯个人打造软件， 也希望大家多予以支持，以便此软件能够更好的发展下去。&lt;/p&gt;
&lt;p&gt; MySQL已经毫无疑问的成为了中小网站的首选</summary>
      
    
    
    
    <category term="software" scheme="https://winjeg.github.io/categories/software/"/>
    
    
    <category term="mysql" scheme="https://winjeg.github.io/tags/mysql/"/>
    
    <category term="electron" scheme="https://winjeg.github.io/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>Wifi DISPLAY 与Miracast那些事</title>
    <link href="https://winjeg.github.io/2021/12/13/others/wifi_disp/"/>
    <id>https://winjeg.github.io/2021/12/13/others/wifi_disp/</id>
    <published>2021-12-13T02:14:11.000Z</published>
    <updated>2022-12-09T11:34:13.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Miracast本质就是一个基于Wi-Fi的网络应用。这个应用包括服务端和客户端。服务端和客户端必须支持RTP&#x2F;RTSP等网络协议和相应的编解码技术。<br>Wi-Fi Display经常和Miracast联系在一起。实际上，Miracast是Wi-Fi联盟（Wi-Fi Alliance）对支持Wi-Fi Display功能的设备的认证名称。<br>通过Miracast认证的设备将在最大程度内保持对Wi-Fi Display功能的支持和兼容。</p><h2 id="Mircast-依赖的无线网卡的技术特性"><a href="#Mircast-依赖的无线网卡的技术特性" class="headerlink" title="Mircast 依赖的无线网卡的技术特性"></a>Mircast 依赖的无线网卡的技术特性</h2><ol><li>Wi-Fi Direct，也就是Wi-Fi P2P。它支持在没有AP（Access Point, 热点， 即没有连接）的情况下，两个Wi-Fi设备直连并通信。</li><li>Wi-Fi Protected Setup：用于帮助用户自动配置Wi-Fi网络、添加Wi-Fi设备等。</li><li>11n&#x2F;WMM&#x2F;WPA2：<ul><li>11n就是802.11n协议，它将11a和11g提供的Wi-Fi传输速率从56Mbps提升到300甚至600Mbps。</li><li>WMM是Wi-Fi Multimedia的缩写，是一种针对实时视音频数据的QoS服务。</li><li>WPA2意为Wi-Fi Protected Acess第二版，主要用来给传输的数据进行加密保护。</li></ul></li></ol><ul><li>Miracast一个重要功能就是支持Wi-Fi Direct。但它也考虑了无线网络环境中存在AP设备的情况下，设备之间的互联问题。读者可参考如图2所示的四种拓扑结构。</li><li>Wi-Fi Direct：该功能由Android中的WifiP2pService来管理和控制。Wi-Fi Multimedia：为了支持Miracast，Android 4.2对MultiMedia系统也进行了修改。</li></ul><p>发送端(Wifi Display, WFD)<br>只要网卡支持， 找个发送端应用就可以投屏</p><p>接收端(Wifi Sink Function)<br>只要网卡支持， 找个接收端应用打开，就可以设置<br>linux 里面甚至有可以打开的选项</p><p>参考资料<br><a href="https://www.21ic.com/tougao/article/2883.html">https://www.21ic.com/tougao/article/2883.html</a><br><a href="https://www.pianshen.com/article/3595659134/">https://www.pianshen.com/article/3595659134/</a><br><a href="https://blog.csdn.net/shenghuo59/article/details/81981377">https://blog.csdn.net/shenghuo59/article/details/81981377</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Miracast本质就是一个基于Wi-Fi的网络应用。这个应用包括服务端和客户端。服务端和客户端必须支持RTP&amp;#x2F;RTSP等网络协议</summary>
      
    
    
    
    <category term="other" scheme="https://winjeg.github.io/categories/other/"/>
    
    
    <category term="multi-media" scheme="https://winjeg.github.io/tags/multi-media/"/>
    
  </entry>
  
  <entry>
    <title>Git提交规范</title>
    <link href="https://winjeg.github.io/2021/11/12/others/git/"/>
    <id>https://winjeg.github.io/2021/11/12/others/git/</id>
    <published>2021-11-12T02:14:11.000Z</published>
    <updated>2022-12-09T11:34:13.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Git是使用最广的代码管理工具，版本控制工具，也是大家最熟知的，如果不了解Git是什么以及怎么使用的，请参考临近的一些文档。<br>本文档主要讨论Git提交代码的一些推荐规范。</p><h2 id="一、分支选择"><a href="#一、分支选择" class="headerlink" title="一、分支选择"></a>一、分支选择</h2><p>一个分支一般对应一个比较明确的版本， 大家需要在这个分支上开发，继承各种功能点， 是许多Commit的集合。<br>为了能够更好的适应Git的特点与企业级的分支管理策略， 分支的命名就显得尤为重要。 比如Gitlab可以根据分支名称特点进行设置权限级别， 有些CICD工具根据分支工具进行约束部署行为， 所以合理的分支名称，是一个合格的代码开发者的基本素质要求。<br>推荐的分支名称</p><p>feature 功能点分支<br>release&#x2F;production 发布分支<br>test&#x2F;benchmark 测试分支<br>比较典型的用法如：feature&#x2F;weixin_register 作为微信注册的一个功能点， feature&#x2F;email_register 作为邮件注册的一个功能点。<br>而上线的时候可以用 release&#x2F;user_register 作为用户注册的功能，集成之前的微信注册与邮件注册的功能点。</p><p>而在分支保护的时候，我们也可以轻松的将 release&#x2F;* 设置为保护分支，仅仅允许固定的工具或者固定的人去提交和merge, 这样就能很好的控制线上在运行的代码的质量。</p><h2 id="二、标签选择"><a href="#二、标签选择" class="headerlink" title="二、标签选择"></a>二、标签选择</h2><p>git tag 也是一个比较重要的功能，往往用作一个比较长周期的，例如中间件的迭代，如java代码， 可以用 git tag 与maven版本号保持一致， 可以很方便的回溯代码。<br>这里推荐的tag命名方式为：vx.x.x 其中 v 代表版本的意思， 第一个 x 代表大版本号， 第二个代表小版本， 第三个代表小的修订版本, 这种命名方式，对于一些语言，如golang，就比较友好，golang是根据 tag来读取软件的版本的。</p><h2 id="三、Commit-规范"><a href="#三、Commit-规范" class="headerlink" title="三、Commit 规范"></a>三、Commit 规范</h2><ol><li>一个Commit只做一件事情</li></ol><p>这是为了可以在出现问题的情况下可以随时对不同commit进行操作，且同时最大程度的降低对其他地方造成的影响。<br>同时这也是非常知名的一些仓库的一些普遍做法，如 linux kernel的维护方式就是这样的。<br>2. commit （标签）</p><p>commit 标签是为了更好的识别与分类commit的内容， 更好的组织commit本身. 常见的commit标签如下：</p><ul><li>bugfix 如<code> bugfix:fix user name not long enough problem.</code></li><li>doc 如 <code>doc: update user related api doc</code></li><li>improvement 如 <code>improvement: change the implementation of the - algrithm reduce exec time to 1/10</code></li><li>hotfix 用于紧急修复</li><li>task 任务</li><li>feature 功能特点</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Git是使用最广的代码管理工具，版本控制工具，也是大家最熟知的，如果不了解Git是什么以及怎么使用的，请参考临近的一些文档。&lt;br&gt;本文档主</summary>
      
    
    
    
    <category term="other" scheme="https://winjeg.github.io/categories/other/"/>
    
    
    <category term="git" scheme="https://winjeg.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>JWT 基本原理笔记</title>
    <link href="https://winjeg.github.io/2021/11/12/others/jwt/"/>
    <id>https://winjeg.github.io/2021/11/12/others/jwt/</id>
    <published>2021-11-12T02:14:11.000Z</published>
    <updated>2022-12-09T11:34:13.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jwt-简介："><a href="#jwt-简介：" class="headerlink" title="jwt 简介："></a>jwt 简介：</h2><p>jwt 是json web token 的缩写， 主要用来做用户授权或者session登录的事情。<br>JWT 是一种比较流程的协议， 它是由三段式组成的</p><ol><li>header</li><li>body</li><li>sign</li></ol><hr><ol><li>header 包含了此JWT用的加密算法， body 则为具体的payload.</li><li>签名则是由body header经过base64 加密后再进行生成的类似hash&#x2F;md5 值的东西, 主要是为了防止jwt被串改， 保证请求的合法性</li></ol><h2 id="安全相关"><a href="#安全相关" class="headerlink" title="安全相关"></a>安全相关</h2><p>由于JWT的信息并非经过加密的信息，因此JWT本身不适合存一些比较敏感的信息，比如密码或者secret之类的东西。<br>JWT 存储的信息是确定用户身份而用的， 一般不应该被浏览器中的其他JS读取到， 因此我们可以设置JWT cookie 的 httpOnly 属性为true这样一些基于JS的攻击对TOKEN的窃取就不会生效。</p><h2 id="jwt浏览器与服务端的交互流程"><a href="#jwt浏览器与服务端的交互流程" class="headerlink" title="jwt浏览器与服务端的交互流程"></a>jwt浏览器与服务端的交互流程</h2><p>jwt信息一般会被放在浏览器的cookie中， 设置一定的有效日期， 每次客户端发起请求的时候都会吧这个cookie信息发给服务端， 服务端本身可以获取到这个cookie信息，并经过签名校验和解密，可以得到用户信息。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;jwt-简介：&quot;&gt;&lt;a href=&quot;#jwt-简介：&quot; class=&quot;headerlink&quot; title=&quot;jwt 简介：&quot;&gt;&lt;/a&gt;jwt 简介：&lt;/h2&gt;&lt;p&gt;jwt 是json web token 的缩写， 主要用来做用户授权或者session登录的事情。&lt;</summary>
      
    
    
    
    <category term="other" scheme="https://winjeg.github.io/categories/other/"/>
    
    
    <category term="web" scheme="https://winjeg.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>混沌工程实践笔记</title>
    <link href="https://winjeg.github.io/2021/11/10/devops/chaos/"/>
    <id>https://winjeg.github.io/2021/11/10/devops/chaos/</id>
    <published>2021-11-10T07:14:11.000Z</published>
    <updated>2022-12-09T11:34:13.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="混沌工程实践笔记"><a href="#混沌工程实践笔记" class="headerlink" title="混沌工程实践笔记"></a>混沌工程实践笔记</h2><h2 id="混沌工程简介"><a href="#混沌工程简介" class="headerlink" title="混沌工程简介"></a>混沌工程简介</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>混沌工程起始于2008年，现在混沌工程的概念与之前有了很大的区别， 经过多年的沉淀和总结，混沌工程越来越趋向如下定义，混沌工程是软件工程的一部分，旨在通过工程化的手段， 帮助软件开发获得更好的质量和稳定性，通过有计划科学的实验计划，提前对生产环境可能出现的各种问题和情况进行预演，通过对实验结果进行分析和总结，得出对软件质量和软件架构非常有帮助的结论。通过不断的迭代，使得软件质量和稳定性得到更好的保障。</p><p><img src="https://user-images.githubusercontent.com/7270177/141088399-6038c6db-15ba-4d48-a4d1-d81b3a7ed74f.png" alt="DD"></p><p>混沌工程发展历史<br>混沌工程诞生的契机<br>企业服务队稳定性的迫切需求<br>规模的增长和系统的复杂性<br>快速迭代与稳定性的冲突<br>稳定性测试遇到的难题<br>排障追踪的困境<br>混沌工程的原则<br>image<br>image</p><h3 id="建立一个围绕稳定状态行为的假说"><a href="#建立一个围绕稳定状态行为的假说" class="headerlink" title="建立一个围绕稳定状态行为的假说"></a>建立一个围绕稳定状态行为的假说</h3><p>要关注系统的可测量输出, 而不是系统的属性。对这些输出在短时间内的度量构成了系统稳定状态的一个代理。 整个系统的吞吐量、错误率、延迟百分点等都可能是表示稳态行为的指标。 通过在实验中的系统性行为模式上的关注, 混沌工程验证了系统是否正常工作, 而不是试图验证它是如何工作的。<br>通俗的来讲就是你的服务在什么的状态下（用什么样的数据说明）是正常服务的，稳定的。<br>这也是将来我们进行混沌试验验证的一个非常重要的参考。</p><h3 id="多样化真实世界的事件"><a href="#多样化真实世界的事件" class="headerlink" title="多样化真实世界的事件"></a>多样化真实世界的事件</h3><p>混沌变量反映了现实世界中的事件。 我们可以通过潜在影响或估计频率排定这些事件的优先级。考虑与硬件故障类似的事件, 如服务器宕机、软件故障 (如错误响应) 和非故障事件 (如流量激增或伸缩事件)。 任何能够破坏稳态的事件都是混沌实验中的一个潜在变量。<br><img src="https://user-images.githubusercontent.com/7270177/141089200-04642d5e-10a4-4c13-99eb-5c12024c7599.png" alt="xx"></p><h3 id="在生产环境中运行实验"><a href="#在生产环境中运行实验" class="headerlink" title="在生产环境中运行实验"></a>在生产环境中运行实验</h3><p>系统的行为会依据环境和流量模式都会有所不同。 由于资源使用率变化的随时可能发生, 因此通过采集实际流量是捕获请求路径的唯一可靠方法。 为了保证系统执行方式的真实性与当前部署系统的相关性, 混沌工程强烈推荐直接采用生产环境流量进行实验。</p><h3 id="持续自动化运行实验"><a href="#持续自动化运行实验" class="headerlink" title="持续自动化运行实验"></a>持续自动化运行实验</h3><p>手动运行实验是劳动密集型的, 最终是不可持续的。所以我们要把实验自动化并持续运行，混沌工程要在系统中构建自动化的编排和分析。 一般公司会构建自己公司专用的混沌平台， 用以解决混沌工程中处处的人工操作，解决效率低下的问题。 最终平台可以作为软件工程中必要的环节集成到公司的研发流程中去。</p><h3 id="最小化爆炸半径"><a href="#最小化爆炸半径" class="headerlink" title="最小化爆炸半径"></a>最小化爆炸半径</h3><p>在生产中进行试验可能会造成不必要的客户投诉。虽然对一些短期负面影响必须有一个补偿, 但混沌工程师的责任和义务是确保这些后续影响最小化且被考虑到。<br>混沌工程是一个强大的实践, 它已经在世界上一些规模最大的业务系统上改变了软件是如何设计和工程化的。 相较于其他方法解决了速度和灵活性, 混沌工程专门处理这些分布式系统中的系统不确定性。 混沌工程的原则为我们大规模的创新和给予客户他们应得的高质量的体验提供了信心。</p><h3 id="混沌工程实践流程"><a href="#混沌工程实践流程" class="headerlink" title="混沌工程实践流程"></a>混沌工程实践流程</h3><p>业界关于混沌工程的标准实践流程没有一个明确标准的定义。但大部分实践过混沌工程的大致流程都一致, 下图是IBM的实践流程：<br><img src="https://user-images.githubusercontent.com/7270177/141087306-09bb61b2-a971-4b42-a7f3-fdac9f38df16.png" alt="DKK"></p><p>总结来说，主要分为如下几个步骤:</p><h3 id="1-对将要进行混沌工程的软件项目进行一个彻底的了解，获得组织上的认可"><a href="#1-对将要进行混沌工程的软件项目进行一个彻底的了解，获得组织上的认可" class="headerlink" title="1. 对将要进行混沌工程的软件项目进行一个彻底的了解，获得组织上的认可"></a>1. 对将要进行混沌工程的软件项目进行一个彻底的了解，获得组织上的认可</h3><p>对于将被实验覆盖的软件系统，我们需要有个端对端的了解，我们要知道这个软件系统的架构，软件的运行环境，软件服务的客户等等。 在了解这些基本信息之后， 我们要对此软件系统做故障注入还需要做组织上的认可和准备。</p><h3 id="2-创建对此软件项目专门针对性的实验假设-实验过程可观测"><a href="#2-创建对此软件项目专门针对性的实验假设-实验过程可观测" class="headerlink" title="2. 创建对此软件项目专门针对性的实验假设, 实验过程可观测"></a>2. 创建对此软件项目专门针对性的实验假设, 实验过程可观测</h3><p>通过第一步的积累， 我们需要建立一些可观测的指标，系统的运行稳健与否，需要有相关的指标数据， 通常来说，这些指标数据是由监控系统所承载的。 我们会尝试对此软件系统进行一定的假设， 比如，但个节点崩溃预期服务正常提供， 数据库崩溃服务仍然可用。 有</p><h3 id="3-定制设计实验"><a href="#3-定制设计实验" class="headerlink" title="3. 定制设计实验"></a>3. 定制设计实验</h3><p>依赖假设及系统稳定态观测的方法之后， 我们可以针对性的进行实验设计。 针对不同场景，我们可以设定不同的实验内容， 整个试验可以是多种场景混合作用的一个结果， 因此，我们在设计实验的时候，可以根据既有假设，去指定对应的实验计划，证明这个假设是不成立的。 这个过程中可能需要我们的混沌平台具备场景编排的功能，以真实制造可能会出现的事件。</p><h3 id="4-执行实验"><a href="#4-执行实验" class="headerlink" title="4. 执行实验"></a>4. 执行实验</h3><p>当实验设计完毕之后， 我们可以手动的或者在平台上自动执行编排好的混沌实验， 执行过程中，把相关的实验数据与试验结果进行详细记录。初期执行的时候通常需要相关人员在场， 后期软件系统成熟之后，也可以做一些突袭实验， 用来验证维护人员发现问题以及解决问题的能力。</p><h3 id="5-分析实验结果"><a href="#5-分析实验结果" class="headerlink" title="5. 分析实验结果"></a>5. 分析实验结果</h3><p>对于每一次的实验数据，都是我们宝贵的财富， 我们结合软件系统和架构，对实验数据进行详细的分析， 总结得出实验结果得出的结论，验证之前的假设是否成立， 我们需要把这些结论文档化，并且把这些结论中需要改进的点，记录到今后的优化改进任务中去。</p><h3 id="6-交流改进点，并且进行改进"><a href="#6-交流改进点，并且进行改进" class="headerlink" title="6. 交流改进点，并且进行改进"></a>6. 交流改进点，并且进行改进</h3><p>对于每次实验结果，我们都能得出一些结论， 我们需要对这些结论进行相应的分析和执行。<br>对于需要架构调整以及代码问题修复的地方，我们要及时安排任务去修复掉， 这样才能保证软件在将来遇到同样的场景，不会出现相应的问题。对于不能修复解决的，我们也要有一个可以迅速执行落地的应急预案， 这样，当这样的情况发生时， 我们可以迅速采取行动，最大可能的降低对软件服务的影响。</p><h3 id="7-扩大实验范围，继续进行实验迭代"><a href="#7-扩大实验范围，继续进行实验迭代" class="headerlink" title="7. 扩大实验范围，继续进行实验迭代"></a>7. 扩大实验范围，继续进行实验迭代</h3><p>经过软件的优化和修复之后， 我们会把原来的范围进行扩大，这里的范围含义比较广， 比如机器集群范围的扩大， 再比如服务依赖范围的扩大等等， 为了尽可能的验证极端情况下，我们能够正确应对突发问题的效率和可靠性， 我们需要扩大实验范围，继续迭代这个实验流程。</p><h2 id="混沌工程的收益"><a href="#混沌工程的收益" class="headerlink" title="混沌工程的收益"></a>混沌工程的收益</h2><p>未雨绸缪， 在问题发生前，提前解决可能出现的问题<br>提升软件质量，保障软件服务可用性<br>提升迭代效率， 一定程度上降低团队为稳定性所花费的额外时间。<br>沉淀和总结经验，为将来软件系统的设计和实施提供有益的参考</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;混沌工程实践笔记&quot;&gt;&lt;a href=&quot;#混沌工程实践笔记&quot; class=&quot;headerlink&quot; title=&quot;混沌工程实践笔记&quot;&gt;&lt;/a&gt;混沌工程实践笔记&lt;/h2&gt;&lt;h2 id=&quot;混沌工程简介&quot;&gt;&lt;a href=&quot;#混沌工程简介&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="devops" scheme="https://winjeg.github.io/categories/devops/"/>
    
    
    <category term="devops" scheme="https://winjeg.github.io/tags/devops/"/>
    
    <category term="chaos" scheme="https://winjeg.github.io/tags/chaos/"/>
    
  </entry>
  
  <entry>
    <title>Golang的代码风格</title>
    <link href="https://winjeg.github.io/2020/05/30/langs/golang/code_style/"/>
    <id>https://winjeg.github.io/2020/05/30/langs/golang/code_style/</id>
    <published>2020-05-30T07:14:11.000Z</published>
    <updated>2022-12-09T11:34:13.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一些废话（Some-useless-words）"><a href="#一些废话（Some-useless-words）" class="headerlink" title="一些废话（Some useless words）"></a>一些废话（Some useless words）</h2><p>想必能看到我博客的人，已经对golang有一定的了解了</p><h3 id="gofmt-一统天下"><a href="#gofmt-一统天下" class="headerlink" title="gofmt 一统天下"></a>gofmt 一统天下</h3><p>gofmt 是目前golang里面用的最多的用来格式化代码风格的一个命令行工具， 很多知名项目都用它来保证自己的最基本的代码风格与官方和社区推荐的风格一致。<br>使用如下命令就可以轻松格式化一个目录下的所有文件：  </p><pre class="line-numbers language-sh"><code class="language-sh">gofmt -w .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>gofmt 可以解决的问题</p></li><li><p>gofmt 不能解决的问题</p></li></ol><h3 id="天下之外"><a href="#天下之外" class="headerlink" title="天下之外"></a>天下之外</h3><p>其实标准gofmt有很多代码风格没有规定的地方比如以下几种场景：  </p><ul><li>常量命名风格</li><li>变量命名风格</li><li>函数命名风格</li><li>对象字段使用风格</li><li>值传递，还是指针传递</li></ul><h4 id="据库对象："><a href="#据库对象：" class="headerlink" title="据库对象："></a>据库对象：</h4><ol><li>可空字段，使用指针，用来表示NULL</li><li>对于不可空字段不使用指针类型， 用来表示这个字段一定有值</li></ol><h3 id="注释风格"><a href="#注释风格" class="headerlink" title="注释风格"></a>注释风格</h3><p>golang 与某Java不同， 不喜欢多行注释，纵观Golang SDK以及 一些非常文明的项目，大部分注释均为单行注释， 虽然golang 支持以下两种注释类型。  </p><pre class="line-numbers language-golang"><code class="language-golang">//  单行注释var code = 0/*多行注释 */const someVeryNastyThing = -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="特殊指令"><a href="#特殊指令" class="headerlink" title="特殊指令"></a>特殊指令</h5><p>在golang注释里面可以写一些特殊指令， 这个时候编译器就会处理这些指令，而不是仅仅当做注释， 这在很多场景下非常有用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一些废话（Some-useless-words）&quot;&gt;&lt;a href=&quot;#一些废话（Some-useless-words）&quot; class=&quot;headerlink&quot; title=&quot;一些废话（Some useless words）&quot;&gt;&lt;/a&gt;一些废话（Some usel</summary>
      
    
    
    
    <category term="lang" scheme="https://winjeg.github.io/categories/lang/"/>
    
    
    <category term="golang" scheme="https://winjeg.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Happy Year 2020 (2020快乐)</title>
    <link href="https://winjeg.github.io/2020/01/01/others/year2020/"/>
    <id>https://winjeg.github.io/2020/01/01/others/year2020/</id>
    <published>2020-01-01T02:00:00.000Z</published>
    <updated>2022-12-09T11:34:13.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-0-2-0-–-快-乐"><a href="#2-0-2-0-–-快-乐" class="headerlink" title="2 0 2 0 – 快 乐 : )     ; )"></a>2 0 2 0 – 快 乐 : )     ; )</h1><p><img src="https://user-images.githubusercontent.com/7270177/71637837-94fd6e80-2c89-11ea-86b8-b5dc6636d00b.png" alt="image"></p><hr><h1 id="每一个清晨，都是一个美好的开始，每一个清晨，都意味着前进的脚步，不管昨天怎么样，今天我们只做最好的自己，带着微笑，带着善良，带着梦想起航。再见，2019！你好，2020！"><a href="#每一个清晨，都是一个美好的开始，每一个清晨，都意味着前进的脚步，不管昨天怎么样，今天我们只做最好的自己，带着微笑，带着善良，带着梦想起航。再见，2019！你好，2020！" class="headerlink" title="每一个清晨，都是一个美好的开始，每一个清晨，都意味着前进的脚步，不管昨天怎么样，今天我们只做最好的自己，带着微笑，带着善良，带着梦想起航。再见，2019！你好，2020！"></a>每一个清晨，都是一个美好的开始，每一个清晨，都意味着前进的脚步，不管昨天怎么样，今天我们只做最好的自己，带着微笑，带着善良，带着梦想起航。再见，2019！你好，2020！</h1><hr><p><img src="https://user-images.githubusercontent.com/7270177/71637861-55835200-2c8a-11ea-8a2e-938e3c13df35.png" alt="image"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2-0-2-0-–-快-乐&quot;&gt;&lt;a href=&quot;#2-0-2-0-–-快-乐&quot; class=&quot;headerlink&quot; title=&quot;2 0 2 0 – 快 乐 : )     ; )&quot;&gt;&lt;/a&gt;2 0 2 0 – 快 乐 : )     ; )&lt;/h1&gt;&lt;p&gt;&lt;i</summary>
      
    
    
    
    <category term="other" scheme="https://winjeg.github.io/categories/other/"/>
    
    
    <category term="Year2020" scheme="https://winjeg.github.io/tags/Year2020/"/>
    
  </entry>
  
  <entry>
    <title>Golang JSON 详解</title>
    <link href="https://winjeg.github.io/2019/12/02/langs/golang/json/"/>
    <id>https://winjeg.github.io/2019/12/02/langs/golang/json/</id>
    <published>2019-12-02T07:14:11.000Z</published>
    <updated>2022-12-09T11:34:13.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GOLANG-JSON-详解"><a href="#GOLANG-JSON-详解" class="headerlink" title="GOLANG JSON 详解"></a>GOLANG JSON 详解</h2><h3 id="JSON-简介"><a href="#JSON-简介" class="headerlink" title="JSON 简介"></a>JSON 简介</h3><p><code>json</code> 是JavaScript Object Notation  的简称, 它是一种数据格式定义语言， 使用起来非常简单，层级结构也非常明确，学习成本几乎为0， 两分钟即可明白它的格式和含义，并上上手写自己的一段json, 下面是个json的实例</p><pre class="line-numbers language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"data"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    mems<span class="token operator">:</span><span class="token punctuation">[</span>        &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Tom"</span><span class="token punctuation">,</span>            <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">,</span>            <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token null">null</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token punctuation">]</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON-库"><a href="#JSON-库" class="headerlink" title="JSON 库"></a>JSON 库</h3><p>对于golang 而言， json解析也是sdk自带的一个功能， 而且它还定义了json的一些规范，位置在 <code>encoding/json</code> 下面。</p><p>另外还有一个值得一提的json库是 <code>github.com/json-iterator/go</code>， 据说他有着非常高的性能</p><p><img src="https://camo.githubusercontent.com/9f07f16d9d489005278c9722c785b2595b01c59e/687474703a2f2f6a736f6e697465722e636f6d2f62656e63686d61726b732f676f2d62656e63686d61726b2e706e67" alt="json-iterator"></p><h4 id="API-定义"><a href="#API-定义" class="headerlink" title="API 定义"></a>API 定义</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 序列化</span><span class="token keyword">func</span> <span class="token function">Marshal</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 序列化并且加缩进</span><span class="token keyword">func</span> <span class="token function">MarshalIndent</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> indent <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 反序列化 </span><span class="token keyword">func</span> <span class="token function">Unmarshal</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> v <span class="token keyword">interface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> Test <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Content     <span class="token builtin">string</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">testJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span>  a A    <span class="token comment" spellcheck="true">// 序列化</span>    d<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 反序列化</span>    json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON-TAGS"><a href="#JSON-TAGS" class="headerlink" title="JSON TAGS"></a>JSON TAGS</h3><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Name <span class="token builtin">string</span> <span class="token string">`json:"name,omitempty"`</span> <span class="token comment" spellcheck="true">// name， 可为空空则忽略</span>    Age  <span class="token builtin">int</span>    <span class="token string">`json:"age"`</span>    Num  <span class="token builtin">uint64</span> <span class="token string">`json:"num,string"`</span> <span class="token comment" spellcheck="true">// 把num在序列化的时候序列化成string</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="json-html-注意事项"><a href="#json-html-注意事项" class="headerlink" title="json html 注意事项"></a>json html 注意事项</h4><p>html的encode的时候往往会有问题， 因为默认的json的marshal 方法是忽略这点的， html标签中的 <code>&gt;</code>, <code>&lt;</code>, <code>&amp;</code> 会被golang变掉， 如果想保持原样请用如下方式</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    t <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Test<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>Content <span class="token operator">=</span> <span class="token string">"&lt;p>test&lt;/p>"</span>    bf <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    jsonEncoder <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>bf<span class="token punctuation">)</span>    jsonEncoder<span class="token punctuation">.</span><span class="token function">SetEscapeHTML</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>    jsonEncoder<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>bf<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JSON-自定义marshal"><a href="#JSON-自定义marshal" class="headerlink" title="JSON 自定义marshal"></a>JSON 自定义marshal</h4><p>在 encoding 包下有个文件叫 <code>encoding.go</code> 里面定义了很多接口，在反序列化的时候会被调用，如果你想像java那样通过设置 getter 和setter来改变默认的行为， 你只需要把被处理的对象实现这些接口就行了， 例如我们常见的 <code>logrus.Level</code> 便实现了这一接口， 可以使得 “info”字符串可以被反序列化成 uint32</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// TextMarshaler is the interface implemented by an object that can</span><span class="token comment" spellcheck="true">// marshal itself into a textual form.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// MarshalText encodes the receiver into UTF-8-encoded text and returns the result.</span><span class="token keyword">type</span> TextMarshaler <span class="token keyword">interface</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">MarshalText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>text <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// TextUnmarshaler is the interface implemented by an object that can</span><span class="token comment" spellcheck="true">// unmarshal a textual representation of itself.</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// UnmarshalText must be able to decode the form generated by MarshalText.</span><span class="token comment" spellcheck="true">// UnmarshalText must copy the text if it wishes to retain the text</span><span class="token comment" spellcheck="true">// after returning.</span><span class="token keyword">type</span> TextUnmarshaler <span class="token keyword">interface</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">UnmarshalText</span><span class="token punctuation">(</span>text <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;GOLANG-JSON-详解&quot;&gt;&lt;a href=&quot;#GOLANG-JSON-详解&quot; class=&quot;headerlink&quot; title=&quot;GOLANG JSON 详解&quot;&gt;&lt;/a&gt;GOLANG JSON 详解&lt;/h2&gt;&lt;h3 id=&quot;JSON-简介&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="lang" scheme="https://winjeg.github.io/categories/lang/"/>
    
    
    <category term="golang" scheme="https://winjeg.github.io/tags/golang/"/>
    
    <category term="json" scheme="https://winjeg.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Golang slice 与 数组详解</title>
    <link href="https://winjeg.github.io/2019/12/02/langs/golang/slice/"/>
    <id>https://winjeg.github.io/2019/12/02/langs/golang/slice/</id>
    <published>2019-12-02T07:14:11.000Z</published>
    <updated>2022-12-09T11:34:13.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="golang-slice-与数组详解"><a href="#golang-slice-与数组详解" class="headerlink" title="golang slice 与数组详解"></a>golang slice 与数组详解</h2><p>对于很多人来说golang的 slice 与数组很难分清楚具体的区别，不知道什么情况下是数组什么情况下是slice，两者有什么区别，怎么 使用它们， 本文就slice与数数组的区别做出一个详细的说明。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><h4 id="slice-定义"><a href="#slice-定义" class="headerlink" title="slice 定义"></a>slice 定义</h4><p>slice的定义比较灵活， 可以直接用make来定义， 也可以直接初始化好</p><pre class="line-numbers language-go"><code class="language-go">    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义一个长度为3容量为3的slice， 并初始化好数据</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 定义一个长度为0， 容量为3的slice</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h4><p>数据在定义的时候，就指定了长度，且长度与容量相等  </p><pre class="line-numbers language-go"><code class="language-go">    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义一个长度为3的数组, 并初始化好</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 定义一个长度为2的数组, 初始化为 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="使用区别"><a href="#使用区别" class="headerlink" title="使用区别"></a>使用区别</h3><h4 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h4><p>slice 对于golang来说使用的更普遍一些，因为其灵活性非常好，可以自动扩容， 当然功能多，意味着性能相比功能单一的数组来说较低一些  </p><pre class="line-numbers language-go"><code class="language-go">    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token function">byte</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ok, slice 可以被append, 且slice 会自动扩容</span>    b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ok, slice 也可以根据下标进行操作</span>    <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 这时长度为4, 容量为8（2倍）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>数组一旦定义了就固定了类型使用起来也只能根据下标进行操作，不同长度的数组，其类型不同，即便其基类型相同，仍然是不同的类型  </p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// append(a, b) 报错， 因为数组不能进行append</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// ok 可以直接根据数组下标进行操作</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// false 不类型不同, 所以也不能进行赋值或者转换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="相互转换"><a href="#相互转换" class="headerlink" title="相互转换"></a>相互转换</h3><p>尽管如此golang提供了方便的slice与数组相互转换的机制，下面是一些示例代码  </p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">conv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义一个数组</span>    <span class="token comment" spellcheck="true">// 数组转slice</span>    b <span class="token operator">:=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// slice 转数组， 其实这种情况很少</span>    c <span class="token operator">:=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">copy</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 查看结果</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果  </p><pre><code>[3]uint8[]uint8[3]uint8[1 2 3]</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;golang-slice-与数组详解&quot;&gt;&lt;a href=&quot;#golang-slice-与数组详解&quot; class=&quot;headerlink&quot; title=&quot;golang slice 与数组详解&quot;&gt;&lt;/a&gt;golang slice 与数组详解&lt;/h2&gt;&lt;p&gt;对于很多人来</summary>
      
    
    
    
    <category term="lang" scheme="https://winjeg.github.io/categories/lang/"/>
    
    
    <category term="golang" scheme="https://winjeg.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>CICD 笔记</title>
    <link href="https://winjeg.github.io/2019/07/30/devops/cicd/"/>
    <id>https://winjeg.github.io/2019/07/30/devops/cicd/</id>
    <published>2019-07-30T07:14:11.000Z</published>
    <updated>2022-12-09T11:34:13.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CICD-笔录、-想法记录"><a href="#CICD-笔录、-想法记录" class="headerlink" title="CICD 笔录、 想法记录"></a>CICD 笔录、 想法记录</h2><h3 id="CICD是什么"><a href="#CICD是什么" class="headerlink" title="CICD是什么"></a>CICD是什么</h3><p>什么是CICD呢， 按我理解， CICD 应该做应用生命周期管理的一整套解决方案， 而非仅仅关注与持续集成和持续发布，CICD是应用生命周期的重要组成部分， 但它不是全部。<br>更有一些组织会把CICD强行隔离， 部署和编译没有任何的整合， 我认为这是不科学的。<br>按照个人理解，应用除了自己要关注的业务逻辑部分， 各其他点（中间件， 运维， 甚至中台）等都应该被CICD所关注，最终能达到的效果就是应用可以放心的去写应用， 大家能再这个生命周期里各司其职。<br>虽然这样，我也不得不关注，当下意义上的CI和CD， 因为他们确实是前辈们抽象的最重要的两个概念了。 如果这两个概念没有， 其实这个体系也许就不存在，甚至是有另外一个体系会存在，现在应用交付的方式会发生质的变化。</p><h3 id="CI-持续集成"><a href="#CI-持续集成" class="headerlink" title="CI - 持续集成"></a>CI - 持续集成</h3><p>应该是从代码写之前就开始关注， 从项目的创建，业务逻辑的编写， 到打成可部署的包，包的版本管理。<br>我们知道很多公司不仅仅会有一种类型的项目结构，也不止一种的单测或者其他代码质量工具，甚至一些公司可能用多种语言进行开发。 做到通用的同时，又能做到可版本化、代码化、幂等化、简单化那就是一种艺术。</p><h4 id="项目生成"><a href="#项目生成" class="headerlink" title="项目生成"></a>项目生成</h4><p>项目的生成主要是指项目的初始化， 项目初始化其实是非常重要的，它影响了我们以怎么样的模板去部署它。 让业务方去专注于业务， 就必须由基础设施来承担项目生成的职责。<br>当然基础设施方生成项目，也能够使得项目更好的匹配我们的自动化集成与部署。<br>Spring的 <code>initializer</code> 仅仅提供了一个生成非常通用的Java <code>Spring Boot</code> 项目的工具， 但这些还不够， 我们不仅仅需要把项目生成， 更要与公司的规范和基础设相结合， 保证生成的项目可以直接与基础设施无缝衔接， 这样才能赋能业务仅仅需要关注业务开发。</p><h4 id="业务逻辑编写"><a href="#业务逻辑编写" class="headerlink" title="业务逻辑编写"></a>业务逻辑编写</h4><p>在项目生成的基础上，假设项目生成这一步， 我们已经选择了我们所需要的所有的基础设施， 所有的中间件与存储设施等等， 剩下的只有业务架构设计，以及业务逻辑编写了。<br>我们甚至可以规定生成的项目结构， 让公司某一类项目都遵循同一个项目结构标准， 这对公司的快速迭代及基础设施都是有非常大的好处的。</p><h4 id="打包-（Packaging）"><a href="#打包-（Packaging）" class="headerlink" title="打包 （Packaging）"></a>打包 （Packaging）</h4><p>打包其实只是个步骤而已，它主要关注两件事情：  </p><ol><li>执行打包命令， 生成可以部署的文件</li><li>打包过程可复制化， 或者把打成的包存到历史包集里</li></ol><p>不同的程序来讲， 打包命令是不一样的，如maven项目的常用打包命令是 <code>mvn clean package</code>, C&#x2F;C++ 则更多的使用 <code>make</code> 来生成它所需要的文件。<br>打包过程可复制化要求其实还是有一些的， </p><ul><li>代版本跟可以用来发布的包关联</li><li>总是使用<code>release</code> 版本的依赖(这里我们假定这个release版本的依赖是不会改变的)</li></ul><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol><li>SONAR 等代码规范检测</li><li>单元测试</li><li>性能测试</li></ol><h4 id="CI-应该具备的特点"><a href="#CI-应该具备的特点" class="headerlink" title="CI 应该具备的特点"></a>CI 应该具备的特点</h4><ol><li>任务清单化&#x2F;模板化</li><li>CI节点无状态，任务随时来随时完成。</li><li>基础依赖镜像化， 固化。</li><li>打包过程可知化</li><li>包与代码对应，幂等性</li></ol><p>gitlab的runner 和travis-ci， 等都是比较优秀的一些平台， 而jenkins 更像一个任务平台，而非部署平台。</p><h3 id="CD-持续发布"><a href="#CD-持续发布" class="headerlink" title="CD - 持续发布"></a>CD - 持续发布</h3><h4 id="版本控制与回滚"><a href="#版本控制与回滚" class="headerlink" title="版本控制与回滚"></a>版本控制与回滚</h4><p>一般版本控制会跟代码的版本控制去走， 建立映射关系， 也有一些版本控制会维护自己单独的生命线。<br>无论哪一种无非是想具备出错迅速纠正的能力。 当然能与代码建立关系是最好的， 最好能够具备某个版本打出来的包不论打几次是等价的。</p><h4 id="部署前准备"><a href="#部署前准备" class="headerlink" title="部署前准备"></a>部署前准备</h4><p>部署前的准备主要则是把程序的依赖， 机器的初始化设置等都一一设置好。</p><h4 id="顺序部署"><a href="#顺序部署" class="headerlink" title="顺序部署"></a>顺序部署</h4><p>顺序部署主要为了平滑上线，而不至于服务中断， 也是必须的。</p><ol><li>分批部署</li><li>健康监测</li><li>部署预热</li></ol><h4 id="部分部署"><a href="#部分部署" class="headerlink" title="部分部署"></a>部分部署</h4><p>部署一部分进行功能点验证， 这对业务逻辑有一定要求。</p><h4 id="混合部署"><a href="#混合部署" class="headerlink" title="混合部署"></a>混合部署</h4><p>在容器化时期是不需要的， 因为大家都可以根据自己的资源需求量来安排资源。<br>但在非容器化时期， 能混合部署会节省大量的IT成本。</p><h4 id="弹性伸缩"><a href="#弹性伸缩" class="headerlink" title="弹性伸缩"></a>弹性伸缩</h4><ol><li>手动弹性伸缩</li><li>自动弹性伸缩</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CICD-笔录、-想法记录&quot;&gt;&lt;a href=&quot;#CICD-笔录、-想法记录&quot; class=&quot;headerlink&quot; title=&quot;CICD 笔录、 想法记录&quot;&gt;&lt;/a&gt;CICD 笔录、 想法记录&lt;/h2&gt;&lt;h3 id=&quot;CICD是什么&quot;&gt;&lt;a href=&quot;#CI</summary>
      
    
    
    
    <category term="devops" scheme="https://winjeg.github.io/categories/devops/"/>
    
    
    <category term="devops" scheme="https://winjeg.github.io/tags/devops/"/>
    
    <category term="cicd" scheme="https://winjeg.github.io/tags/cicd/"/>
    
  </entry>
  
  <entry>
    <title>使用docker运行MySQL服务</title>
    <link href="https://winjeg.github.io/2019/07/02/storage/mysql/mysql_docker/"/>
    <id>https://winjeg.github.io/2019/07/02/storage/mysql/mysql_docker/</id>
    <published>2019-07-02T07:14:11.000Z</published>
    <updated>2022-12-09T11:34:13.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为啥要使用docker运行MySQL"><a href="#为啥要使用docker运行MySQL" class="headerlink" title="为啥要使用docker运行MySQL"></a>为啥要使用docker运行MySQL</h2><p>熟悉docker和k8s的人都知道， 我们使用容器化技术，是为了方便我们运行某个服务，我们用docker 运行Mysql， 并不是因为mysql在docker比在物理机或者kvm上运行的更好，配置起来更简单。<br>我们使用docker 主要还是因为，我们在不关注太多MySQL本身的东西的时候， 单纯想快速简单的启动一个MySQL服务的时候能够做到，分钟级别即可完成。<br>这相对于传统级别的从安装到配置动则半小时到几个小时的工作量来说，已经非常简单方便了。</p><h2 id="怎么使用Docker-去运行一个MySQL服务"><a href="#怎么使用Docker-去运行一个MySQL服务" class="headerlink" title="怎么使用Docker 去运行一个MySQL服务"></a>怎么使用Docker 去运行一个MySQL服务</h2><p>在运行之前，你首先要装docker， 安装docker非常简单，只需要一路下一步下一步就可以完成， linux或者mac野只需要一些安装命令即可搞定。<br>当然安装docker可以不仅仅用于MySQL用途， 也可以用来它方便其他任何你想需要运行的服务的部署和运行。  </p><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><pre class="line-numbers language-bash"><code class="language-bash">docker pull mysql:5.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里mysql是镜像名称， 5.6 是mysql的版本。 一半这些镜像都默认是比较官方维护的， 在docker没有进行特殊设置的情况下可以信任。</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><pre class="line-numbers language-bash"><code class="language-bash">docker run -p 3306:3306 --name mysql -v /opt/docker_v/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>123456 -d imageID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述命令有如下解释：</p><ol><li><code>-p 3306:3306 </code> 是指把容器的3306端口映射到本地的3306端口</li><li><code>--name</code> 制定容器的名称, 我们下次要操作的时候可以制定名称即可， 如 <code>docker start mysql</code></li><li><code>-v</code> 把本地文件夹与docker文件夹进行一个映射</li><li><code>-e </code> 传入容器一些环境变量， 这里传入的是MySQL运行的时候需要的root密码</li><li><code>-d</code> 后台方式运行</li></ol><h3 id="常见的问题"><a href="#常见的问题" class="headerlink" title="常见的问题"></a>常见的问题</h3><ol><li>docker 守护进程没有开启<br> 解决方案： 开启docker后台进程 如 <code>service docker start</code>或者 <code>systemctl start docker.service</code></li><li>mysql 运行的端口过小导致的没有权限<br> 解决方案：请在大于1024 的端口上运行MySQL</li><li>系统环境是 Windows 10 Pro，Docker 版本 18.03.1-ce，电脑开机之后第一次运行 docker run 的时候会遇到这个错误</li></ol><pre><code>C:\Program Files\Docker\Docker\Resources\bin\docker.exe: Error response from daemon: driver failed programming external connectivity on endpoint app (36577729ce7d4d2dddefb7fddd32521ea66958cf824138804b02ffb3c98452f3): Error starting userland proxy: mkdir /port/tcp:0.0.0.0:3306:tcp:172.17.0.2:3306: input/output error.</code></pre><p>解决方案： 重启docker服务</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为啥要使用docker运行MySQL&quot;&gt;&lt;a href=&quot;#为啥要使用docker运行MySQL&quot; class=&quot;headerlink&quot; title=&quot;为啥要使用docker运行MySQL&quot;&gt;&lt;/a&gt;为啥要使用docker运行MySQL&lt;/h2&gt;&lt;p&gt;熟悉dock</summary>
      
    
    
    
    <category term="storage" scheme="https://winjeg.github.io/categories/storage/"/>
    
    <category term="database" scheme="https://winjeg.github.io/categories/storage/database/"/>
    
    
    <category term="database" scheme="https://winjeg.github.io/tags/database/"/>
    
    <category term="docker" scheme="https://winjeg.github.io/tags/docker/"/>
    
    <category term="MySQL" scheme="https://winjeg.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>react+ts+webpack+antd 实战</title>
    <link href="https://winjeg.github.io/2019/06/18/langs/fe/new_project/"/>
    <id>https://winjeg.github.io/2019/06/18/langs/fe/new_project/</id>
    <published>2019-06-18T07:14:11.000Z</published>
    <updated>2022-12-09T11:34:13.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装react项目创建程序"><a href="#1-安装react项目创建程序" class="headerlink" title="1. 安装react项目创建程序"></a>1. 安装react项目创建程序</h2><pre><code>npm install -g create-react-app yarn</code></pre><h2 id="2-创建react-ts项目"><a href="#2-创建react-ts项目" class="headerlink" title="2. 创建react + ts项目"></a>2. 创建react + ts项目</h2><pre><code>create-react-app my-app --scripts-version=react-scripts-ts</code></pre><p>react-scripts-ts是一些调整的组合，使得你可以使用标准create-react-app项目流程并且加入TypeScript。<br>现在你的项目应该是下面这个样子：</p><pre><code>my-app/├─ .gitignore├─ node_modules/├─ public/├─ src/│  └─ ...├─ package.json├─ tsconfig.json└─ tslint.json</code></pre><p>其中：</p><p><code>tsconfig.json</code>包含我们项目中的TypeScript的配置信息</p><p><code>tslint.json</code>是我们的代码规范工具TSLint相关的配置</p><p><code>package.json</code>包含我们的依赖项，以及一些用于测试、预览、部署等的快捷命令。</p><p><code>public</code>包含静态资源，比如我们要部署的HTML页面和图片。你们可以删除除了index.html以外的任何文件。</p><p><code>src</code> 包含了我们TypeScript和CSS的代码。index.tsx是我们的文件的入口。</p><p>在<code>package.json</code> 中<code>scripts</code>中 分别有</p><p>start 开发命令 执行 npm run start<br>build 部署命令 执行 npm run build<br>test 测试命令允许Jest</p><h2 id="3-集成antd（不需要UI库可以跳过这里）"><a href="#3-集成antd（不需要UI库可以跳过这里）" class="headerlink" title="3. 集成antd（不需要UI库可以跳过这里）"></a>3. 集成antd（不需要UI库可以跳过这里）</h2><pre><code>yarn add antd  ts-import-plugin --dev</code></pre><h2 id="4-配置-config-overrides-js"><a href="#4-配置-config-overrides-js" class="headerlink" title="4.配置 config-overrides.js"></a>4.配置 <code>config-overrides.js</code></h2><pre><code>/*jshint esversion: 6 */const tsImportPluginFactory = require(&#39;ts-import-plugin&#39;);const &#123;    getLoader&#125; = require(&quot;react-app-rewired&quot;);const rewireLess = require(&#39;react-app-rewire-less&#39;);module.exports = function override(config) &#123;    const tsLoader = getLoader(        config.module.rules,        rule =&gt;        rule.loader &amp;&amp;        typeof rule.loader === &#39;string&#39; &amp;&amp;        rule.loader.includes(&#39;ts-loader&#39;)    );    tsLoader.options = &#123;        getCustomTransformers: () =&gt; (&#123;            before: [tsImportPluginFactory(&#123;                libraryDirectory: &#39;es&#39;,                libraryName: &#39;antd&#39;,                style: &#39;css&#39;,            &#125;)]        &#125;)    &#125;;    config = rewireLess.withLoaderOptions(&#123;        modifyVars: &#123;            &quot;@primary-color&quot;: &quot;#1DA57A&quot;        &#125;,    &#125;)(config, env);    config.resolve = &#123;        alias: &#123;            &#39;@&#39;: path.resolve(&quot;./&quot;, &#39;src&#39;)        &#125;,        extensions: [&#39;.tsx&#39;, &#39;.ts&#39;, &#39;.js&#39;, &#39;.jsx&#39;, &#39;css&#39;]    &#125;;    return config;&#125;;</code></pre><h2 id="5-配置-tsconfig-json"><a href="#5-配置-tsconfig-json" class="headerlink" title="5.配置 tsconfig.json"></a>5.配置 <code>tsconfig.json</code></h2><pre><code>complierOptionsu加入    &quot;paths&quot;: &#123;      &quot;@/*&quot;: [&quot;src/*&quot;]    &#125;</code></pre><p><a href="https://blog.csdn.net/u010377383/article/details/79014405">https://blog.csdn.net/u010377383/article/details/79014405</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-安装react项目创建程序&quot;&gt;&lt;a href=&quot;#1-安装react项目创建程序&quot; class=&quot;headerlink&quot; title=&quot;1. 安装react项目创建程序&quot;&gt;&lt;/a&gt;1. 安装react项目创建程序&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;npm inst</summary>
      
    
    
    
    <category term="lang" scheme="https://winjeg.github.io/categories/lang/"/>
    
    
    <category term="npm" scheme="https://winjeg.github.io/tags/npm/"/>
    
    <category term="react" scheme="https://winjeg.github.io/tags/react/"/>
    
    <category term="antd" scheme="https://winjeg.github.io/tags/antd/"/>
    
    <category term="project" scheme="https://winjeg.github.io/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>web 前端一些基本知识</title>
    <link href="https://winjeg.github.io/2019/06/18/langs/fe/project/"/>
    <id>https://winjeg.github.io/2019/06/18/langs/fe/project/</id>
    <published>2019-06-18T07:14:11.000Z</published>
    <updated>2022-12-09T11:34:13.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><p>vscode 是开发前段不二的IDE, 也是近年来维护最活跃的一个编辑器</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ol><li>Auto Close Tag</li><li>Auto Rename Tag</li><li>Beautify</li><li>Bracket Pair Colorizer</li><li>Class autocomplete for HTML</li><li>Code Runner</li><li>Css peek</li><li>Document this</li><li>Eslint</li><li>TsLint</li><li>Image Preview</li><li>Node.js Module Intellisense</li><li>Path Intellisense</li></ol><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ol><li>ctrl+shift+b  构建项目</li><li>F5 run</li><li>F10 Step over</li><li>F11 step into</li><li>Shift F11 step out.</li><li>Alt+Shift+F format</li></ol><h2 id="node与nmp"><a href="#node与nmp" class="headerlink" title="node与nmp"></a>node与nmp</h2><h3 id="包安装与管理工具yarn-与npm"><a href="#包安装与管理工具yarn-与npm" class="headerlink" title="包安装与管理工具yarn 与npm"></a>包安装与管理工具yarn 与npm</h3><h3 id="淘宝npm-镜像"><a href="#淘宝npm-镜像" class="headerlink" title="淘宝npm 镜像"></a>淘宝npm 镜像</h3><h4 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h4><pre><code> npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><h4 id="别名的方式"><a href="#别名的方式" class="headerlink" title="别名的方式"></a>别名的方式</h4><pre><code>alias cnpm=&quot;npm --registry=https://registry.npm.taobao.org \--cache=$HOME/.npm/.cache/cnpm \--disturl=https://npm.taobao.org/dist \--userconfig=$HOME/.cnpmrc&quot;# Or alias it in .bashrc or .zshrc$ echo &#39;\n#alias for cnpm\nalias cnpm=&quot;npm --registry=https://registry.npm.taobao.org \  --cache=$HOME/.npm/.cache/cnpm \  --disturl=https://npm.taobao.org/dist \  --userconfig=$HOME/.cnpmrc&quot;&#39; &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc</code></pre><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><h4 id="文件介绍"><a href="#文件介绍" class="headerlink" title="文件介绍"></a>文件介绍</h4><p>package.json 是项目的总的一个配置文件， 它定义了这个项目所需要的各种模块， 以及项目的基本配置信息。<br>可以自动生成或者手动编写， 自动生成的方法是用node</p><pre><code>node init</code></pre><h4 id="scripts-段"><a href="#scripts-段" class="headerlink" title="scripts 段"></a>scripts 段</h4><p>scripts 段制定了运行脚本命令的npm命令行缩写， 比如start指定了运行npm run start 的时候所需要执行的命令</p><pre><code>&quot;scripts&quot;: &#123;    &quot;dev&quot;: &quot;node build/dev-server.js&quot;,    &quot;lint&quot;:&quot;eslint --ext .js,.vue src test/unit/specs&quot;&#125;</code></pre><h4 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h4><p>depencies and devDependencies 分别指定了项目在运行时候依赖的模块与项目开发的时候需要的一些模块， 它们都指向同一个对象， 用来管理各种依赖</p><pre><code>&quot;dependencies&quot;: &#123;    &quot;vue&quot;: &quot;^2.2.2&quot;,    &quot;vue-router&quot;: &quot;^2.2.0&quot;  &#125;,  &quot;devDependencies&quot;: &#123;    &quot;autoprefixer&quot;: &quot;^6.7.2&quot;  &#125;</code></pre><h4 id="config-字段"><a href="#config-字段" class="headerlink" title="config 字段"></a>config 字段</h4><p>config 字段用于向环境变量输出值</p><h4 id="engines-字段"><a href="#engines-字段" class="headerlink" title="engines 字段"></a>engines 字段</h4><p>engines 字段主要声明node 与 npm的版本</p><h4 id="bin-字段"><a href="#bin-字段" class="headerlink" title="bin 字段"></a>bin 字段</h4><p>bin字段 主要是为了让一个可执行命令安装到系统的路径， 可以直接调用,<br>比如，要使用hello作为命令时可以这么做：</p><pre><code>&#123; &quot;bin&quot; : &#123; &quot;hello&quot; : &quot;./cli.js&quot; &#125; &#125;</code></pre><p>这么一来，当你安装hello程序，npm会从cli.js文件创建一个到&#x2F;usr&#x2F;local&#x2F;bin&#x2F;myapp的符号链接(这使你可以直接在命令行执行hello脚本)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;IDE&quot;&gt;&lt;a href=&quot;#IDE&quot; class=&quot;headerlink&quot; title=&quot;IDE&quot;&gt;&lt;/a&gt;IDE&lt;/h2&gt;&lt;p&gt;vscode 是开发前段不二的IDE, 也是近年来维护最活跃的一个编辑器&lt;/p&gt;
&lt;h3 id=&quot;插件&quot;&gt;&lt;a href=&quot;#插件&quot;</summary>
      
    
    
    
    <category term="lang" scheme="https://winjeg.github.io/categories/lang/"/>
    
    
    <category term="npm" scheme="https://winjeg.github.io/tags/npm/"/>
    
    <category term="project" scheme="https://winjeg.github.io/tags/project/"/>
    
  </entry>
  
  <entry>
    <title>版本管理工具Git的使用</title>
    <link href="https://winjeg.github.io/2019/06/13/apps/git/"/>
    <id>https://winjeg.github.io/2019/06/13/apps/git/</id>
    <published>2019-06-13T14:14:11.000Z</published>
    <updated>2022-12-09T11:34:13.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h2><p>Git 是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理，是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件， Git也是计算机界最重要的软件之一， 被广泛的适用于各大中小公司的各类项目中。</p><p>小插曲: 为啥我们不提其他的版本控制系统， 因为对于一般的情况下， 有<code>Git</code>就足够了，它至少能满足99 %的人的需求。</p><h2 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h2><h3 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h3><ol><li>生成 RSA 秘钥对， 私钥自己保存， 公钥需要给</li></ol><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -b 4096 -C <span class="token string">"winjeg@qq.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成过程中使用的密码会更安全一些， 但设置就会更麻烦一些， 关于相关的设置， 希望大家“不厌其烦”， 去搜索引擎自己搜索就好。<br>生成结果一般有两个文件：</p><ol><li><code>id_rsa</code> 这是一个绝密的文件， 只有使用者自己知道， 其他人不能知道</li><li><code>id_rsa.pub</code> 这个是一个公开的文件， 是发给外界用来安全通信的一个工具<br>对于Github或者Gitlab而言，均有地方添加 <code>public key</code>， 一般在 用户<code>settings</code> 菜单下</li></ol><p>生成完毕之后， 把私钥放到相应的位置：</p><ol><li>linux&#x2F;mac  ~&#x2F;.ssh  并设置<code>id_rsa</code>的权限 <code>chmod 600 ~/.ssh/id_rsa</code></li><li>windows 用户直接把 <code>id_rsa</code> 放到 用户目录下的 .ssh 文件夹中即可</li></ol><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><ol><li>windows 下安装<br>由于安装Git 比较简单，只需要去官方网站， 去下载并且按照默认步骤安装即可。<br>因此，此处不做更多详细的介绍。</li></ol><p>如果想用<code>gpg</code>签名则比较复杂， 但注意一点， 如果出现 <code>key not avalible</code> 类似的， 尝试设置下gpg的位置</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global gpg.program <span class="token string">"C:\Program Files (x86)\GnuPG\bin\gpg.exe"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>Linux 下安装</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span> <span class="token comment" spellcheck="true"># debian based</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">git</span> <span class="token comment" spellcheck="true"># redhat based</span><span class="token function">sudo</span> pacman -S <span class="token function">git</span> <span class="token comment" spellcheck="true"># archlinux  based</span><span class="token function">sudo</span> emerge <span class="token function">git</span>    <span class="token comment" spellcheck="true"># gentoo based</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>mac 下安装<br>我猜是：</li></ol><pre class="line-numbers language-bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Git的基础使用"><a href="#Git的基础使用" class="headerlink" title="Git的基础使用"></a>Git的基础使用</h2><h3 id="新建Git-项目"><a href="#新建Git-项目" class="headerlink" title="新建Git 项目"></a>新建Git 项目</h3><h4 id="克隆代码"><a href="#克隆代码" class="headerlink" title="克隆代码"></a>克隆代码</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/winjeg/demos-go<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="新建本地项目，并关联到远程"><a href="#新建本地项目，并关联到远程" class="headerlink" title="新建本地项目，并关联到远程"></a>新建本地项目，并关联到远程</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> init repo_name   <span class="token comment" spellcheck="true"># 创建 repo_name 的文件夹， 并创建好相关的 .git 隐藏文件夹等</span><span class="token function">cd</span> repo_name  <span class="token function">git</span> remote add origin git@github.com:winjeg/repo.git <span class="token comment" spellcheck="true"># 设置远端地址(这个关系到推送的地址)</span><span class="token function">git</span> add <span class="token keyword">.</span>  <span class="token comment" spellcheck="true"># 把当前的项目文件都暂存</span><span class="token function">git</span> commit -m <span class="token string">"Initial commit"</span> <span class="token comment" spellcheck="true"># 把暂存的文件作为一次 commit  提交</span><span class="token function">git</span> push -u origin master <span class="token comment" spellcheck="true"># 把commit push 到远程的master分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过以上步骤， 一个本地可以用的repo就建立好啦</p><h3 id="拉取远端"><a href="#拉取远端" class="headerlink" title="拉取远端"></a>拉取远端</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 拉取指定分支的变化</span><span class="token function">git</span> fetch origin master <span class="token comment" spellcheck="true"># 拉取所有分支的变化</span><span class="token function">git</span> fetch <span class="token comment" spellcheck="true"># 拉取所有分支的变化，并且将远端不存在的分支同步移除【推荐】</span><span class="token function">git</span> fetch -p <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看当前状态"><a href="#查看当前状态" class="headerlink" title="查看当前状态"></a>查看当前状态</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于当前repo， 增加， 删除，修改等的状态都会被列出来</p><pre><code>HEAD detached from fd07db2Changes not staged for commit:  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)        deleted:    rops.yaml        modified:   values.yamlUntracked files:  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)        a.mdno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</code></pre><h3 id="暂存"><a href="#暂存" class="headerlink" title="暂存"></a>暂存</h3><p>暂存文件是commit这些变更的前提</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add file_name <span class="token comment" spellcheck="true"># 暂存某文件</span><span class="token function">git</span> add <span class="token keyword">.</span> <span class="token comment" spellcheck="true"># 暂存所有变更</span><span class="token function">git</span> reset <span class="token comment" spellcheck="true"># 取消暂存</span><span class="token function">git</span> reset --hard <span class="token comment" spellcheck="true"># 取消本地所有未提交的更改</span><span class="token function">git</span> checkout <span class="token function">file</span> <span class="token comment" spellcheck="true"># 取消某文件的更改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">"the commit message"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提交时候，结果仍在本地，但已经属于创建了本地的一个变更集</p><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>推送代码到远端</p><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b new_branch <span class="token comment" spellcheck="true"># 新建</span><span class="token function">git</span> checkout new_branch <span class="token comment" spellcheck="true"># 切换到新建的分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 删除本地分支，如果本地还有未合并的代码，则不能删除</span><span class="token function">git</span> branch -d qixiu/feature<span class="token comment" spellcheck="true"># 强制删除本地分支</span><span class="token function">git</span> branch -D qixiu/feature <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="推送新建的分支到远端"><a href="#推送新建的分支到远端" class="headerlink" title="推送新建的分支到远端"></a>推送新建的分支到远端</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push origin new_branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="设置本地分支与远程同步"><a href="#设置本地分支与远程同步" class="headerlink" title="设置本地分支与远程同步"></a>设置本地分支与远程同步</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/<span class="token operator">&lt;</span>branch<span class="token operator">></span> hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 等同于git push origin -d qixiu/feaure</span><span class="token function">git</span> push origin :qixiu/feature<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><ol><li>切换到本地分支</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> checkout branch_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>切换到远程分支</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> branch -b branch_name origin/branch_name <span class="token comment" spellcheck="true"># 设置本地分支与远程分支同步</span><span class="token function">git</span> pull <span class="token comment" spellcheck="true"># 拉取远程分支代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><ol><li>无冲突合并</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> merge branch_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>有冲突合并</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> merge branch_name<span class="token function">git</span> mergetool<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>mergetool 的设置， 下面以<code>Kdiff</code>为例， 当然merge工具也有非常多， 如 <code>meld</code>， <code>beyond compare</code> 等。<br>其设置方法都雷同，因此此处仅仅只举出一个例子作为说明。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global  merge.tool kdiff3<span class="token function">git</span> config mergetool.kdiff3.path <span class="token string">"/usr/bin/kdiff3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置好mergetool之后，以后有merge冲突的时候， <code>kdiff3</code> 会自动跳出并让你人工merge。</p><h3 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> rebase -i HEAD~4 <span class="token comment" spellcheck="true"># 合并提交记录</span>git:<span class="token punctuation">(</span>feature1<span class="token punctuation">)</span> <span class="token function">git</span> rebase master <span class="token comment" spellcheck="true"># rebase 到master分支</span><span class="token function">git</span> rebase --continue <span class="token comment" spellcheck="true"># 继续rebase</span><span class="token function">git</span> rebase —abort <span class="token comment" spellcheck="true"># 放弃rebase回到原始状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在合并提交记录的时候会有如下信息打印出来</p><pre class="line-numbers language-bash"><code class="language-bash">s cacc52da add: qrcodes f072ef48 update: indexeddb hacks 4e84901a feat: add indexedDB floders 8f33126c feat: add test2.js<span class="token comment" spellcheck="true"># Rebase 5f2452b2..8f33126c onto 5f2452b2 (4 commands)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Commands:</span><span class="token comment" spellcheck="true"># p, pick = use commit</span><span class="token comment" spellcheck="true"># r, reword = use commit, but edit the commit message</span><span class="token comment" spellcheck="true"># e, edit = use commit, but stop for amending</span><span class="token comment" spellcheck="true"># s, squash = use commit, but meld into previous commit</span><span class="token comment" spellcheck="true"># f, fixup = like "squash", but discard this commit's log message</span><span class="token comment" spellcheck="true"># x, exec = run command (the rest of the line) using shell</span><span class="token comment" spellcheck="true"># d, drop = remove commit</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># These lines can be re-ordered; they are executed from top to bottom.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If you remove a line here THAT COMMIT WILL BE LOST.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># However, if you remove everything, the rebase will be aborted.</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择其中一种作为合并的方式， 上述是在vim（也可以是其他设置的编辑器）的一个窗口中展示的。<br>如果你异常退出了 <code>vim</code>  窗口，不要紧张：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> rebase --edit-todo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时候会一直处在这个编辑的模式里，我们可以回去继续编辑，修改完保存一下：</p><pre><code>git rebase --continue</code></pre><p>与其他版本管理工具类似， 下图比较形象的展示了<code>git</code>中 <code>rebase</code>与<code>merge</code>的区别<br><img src="https://user-images.githubusercontent.com/7270177/60004279-e1467100-969e-11e9-9d2f-16b6d437ac74.png" alt="image"></p><h3 id="Git命令别名"><a href="#Git命令别名" class="headerlink" title="Git命令别名"></a>Git命令别名</h3><p>git是一个比较开放的系统， 与bash类似， git可以自定义别名来取代冗长的命令行输入如可以设置 <code>git st</code> 代替 <code>git status</code>， 使用 <code>git l</code>代替 <code>git log</code> 等等， 这些都被定义在git的配置文件中(<code>~/.gitconfig</code>)， 修改起来非常方便。 </p><h3 id="Git-的GPG签名设置-Windows"><a href="#Git-的GPG签名设置-Windows" class="headerlink" title="Git 的GPG签名设置(Windows)"></a>Git 的GPG签名设置(Windows)</h3><p>安装<code>gpg4win</code> 如果没有响相应的GPG的KEY， 利用这个工具生成相应的key与配置， 记得备份。<br>如果是已有备份， 可以直接用这个工具导入，非常简单。</p><p>然而仅仅这样设置还是不够的， 你需要在<code>Github/Gitlab</code>上添加相应的 <code>PGP PUBLIC KEY BLOCK</code><br>提交的时候使用如下命令， 则会自动签名。</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">git</span> commit -S -m <span class="token string">"change readme"</span>ggpg: directory <span class="token string">'/c/Users/winjeg/.gnupg'</span> createdigpg: keybox <span class="token string">'/c/Users/winjeg/.gnupg/pubring.kbx'</span> createdgpg: skipped <span class="token string">"winjeg &lt;winjeg@qq.com>"</span><span class="token keyword">:</span> No secret keygpg: signing failed: No secret keyerror: gpg failed to sign the datafatal: failed to <span class="token function">write</span> commit object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上产生的错误则是由于Git默认的寻找签名证书的程序的路径有误。按照下面的方法进行设置。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global gpg.program <span class="token string">"C:\Program Files (x86)\GnuPG\bin\gpg.exe"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置完毕再次运行， 则可以看到成功签名<code>commit</code></p><pre class="line-numbers language-bash"><code class="language-bash">winjeg@gpc MINGW64 /d/projects/go/github.com/winjeg/cloudb <span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> commit -S -m <span class="token string">"change readme"</span><span class="token punctuation">[</span>master eca6b52<span class="token punctuation">]</span> change readme 1 <span class="token function">file</span> changed, 3 insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, 1 deletion<span class="token punctuation">(</span>-<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Git-高级用法"><a href="#Git-高级用法" class="headerlink" title="Git 高级用法"></a>Git 高级用法</h2><h3 id="Git对象"><a href="#Git对象" class="headerlink" title="Git对象"></a>Git对象</h3><p>接下来，新建一个空文件test.txt。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">touch</span> test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，把这个文件加入 Git 仓库，也就是为test.txt的当前内容创建一个副本。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> hash-object -w test.txte69de29bb2d1d6434b8b29ae775ad8c2e48c5391<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面代码中，<code>git hash-object</code>命令把<code>test.txt</code>的当前内容压缩成二进制文件，存入 Git。压缩后的二进制文件，称为一个 Git 对象，保存在.git&#x2F;objects目录。</p><p>这个命令还会计算当前内容的 SHA1 哈希值（长度40的字符串），作为该对象的文件名。</p><p>查看文件对象的内容</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> cat-file -p 3b18e512dba79e4c8300dd08aeb37f8e728b8dadhello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="暂存区-git-add"><a href="#暂存区-git-add" class="headerlink" title="暂存区 (git add)"></a>暂存区 (<code>git add</code>)</h3><p>文件保存成二进制对象以后，还需要通知 Git 哪些文件发生了变动。所有变动的文件，Git 都记录在一个区域，叫做”暂存区”（英文叫做 index 或者 stage）。等到变动告一段落，再统一把暂存区里面的文件写入正式的版本历史。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> update-index --add --cacheinfo 100644 \3b18e512dba79e4c8300dd08aeb37f8e728b8dad test.txt<span class="token function">git</span> ls-files --stage100644 3b18e512dba79e4c8300dd08aeb37f8e728b8dad 0   test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Git-快照-（commit）"><a href="#Git-快照-（commit）" class="headerlink" title="Git 快照 （commit）"></a>Git 快照 （<code>commit</code>）</h3><p>暂存区保留本次变动的文件信息，等到修改了差不多了，就要把这些信息写入历史，这就相当于生成了当前项目的一个快照（snapshot）。</p><p>项目的历史就是由不同时点的快照构成。Git 可以将项目恢复到任意一个快照。快照在 Git 里面有一个专门名词，叫做 commit，生成快照又称为完成一次提交。</p><p>下文所有提到”快照”的地方，指的就是 commit。</p><h3 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h3><p>Git分支其实是指向某个快照节点的指针， 对于Git来说， 分支的创建成本是极其低廉的。另外，Git 有一个特殊指针HEAD， 总是指向当前分支的最近一次快照。另外，Git 还提供简写方式，HEAD^指向 HEAD的前一个快照（父节点），HEAD~6则是HEAD之前的第6个快照。</p><hr><p>本文将不对其他内容做过多介绍, 仅仅介绍到此为止</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是Git&quot;&gt;&lt;a href=&quot;#什么是Git&quot; class=&quot;headerlink&quot; title=&quot;什么是Git&quot;&gt;&lt;/a&gt;什么是Git&lt;/h2&gt;&lt;p&gt;Git 是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理，是 Linus T</summary>
      
    
    
    
    <category term="tools" scheme="https://winjeg.github.io/categories/tools/"/>
    
    
    <category term="git" scheme="https://winjeg.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo创建博客</title>
    <link href="https://winjeg.github.io/2019/06/13/setup_blog/"/>
    <id>https://winjeg.github.io/2019/06/13/setup_blog/</id>
    <published>2019-06-13T07:14:11.000Z</published>
    <updated>2022-12-09T11:34:13.614Z</updated>
    
    <content type="html"><![CDATA[<p>在操作之前，</p><ol><li>安装好了相关的软件如： <code>node</code></li><li>拥有自己的github账号正确设置好<code>SSH KEY</code></li><li>创建一个 <code>username.github.io</code> 的repo 并开启相应的page设置</li></ol><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:your_name/your_name.github.io.git<span class="token function">git</span> checkout -b hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-clihexo init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由于Hexo要求必须在空文件夹中执行init操作，所以我们需要在博客文件夹以外的地方新建一个空文件夹，之后点击鼠标右键选择<code>Git bash Here</code>输入以下命令，并将命令执行完成后文件夹中的所有文件复制到<code>your_name.github.io</code>文件夹中</p><pre><code>npm install</code></pre><p>本地预览(可省略)</p><pre><code>hexo generatehexo server</code></pre><h3 id="远程部署"><a href="#远程部署" class="headerlink" title="远程部署"></a>远程部署</h3><p>我们已经在本地成功建站，接下来我们要做的就是通过简单的修改配置文件使得Hexo为我们生成的静态页面能够部署到Github Pages上面。</p><ol><li>编辑username.github.io文件夹下面的_config.yml（Hexo官方文档中将其称为全局配置文件），找到deploy关键字，将其修改为</li></ol><pre class="line-numbers language-yml"><code class="language-yml">deploy:  type: git  repo: git@github.com:your_name/your_name.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>为了将完成到Github的远程部署，我们还需要安装一个插件。</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>执行以下命令，完成静态页面的远程部署与博客源文件的备份</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">"提交说明"</span><span class="token function">git</span> push origin hexohexo generate -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h3><p>请自行搜索github, 输入关键字 <code>hexo theme</code>选择自己喜爱的主题，并按照相关文档进行设置</p><h3 id="对于其他设备上写博客"><a href="#对于其他设备上写博客" class="headerlink" title="对于其他设备上写博客"></a>对于其他设备上写博客</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone your_repo<span class="token function">cd</span> your_repo<span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span class="token function">npm</span> <span class="token function">install</span><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自动脚本编写"><a href="#自动脚本编写" class="headerlink" title="自动脚本编写"></a>自动脚本编写</h2><p>在源文件分支(<code>hexo</code>分支)上添加如下文件, 如果是windows 命名为<code>publish.cmd</code> 如果是linux 或者mac命名为<code>publish</code> 并加入可执行权限<code>chmod a+x publish</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">"add article"</span><span class="token function">git</span> push origin hexohexo generate -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>编写完毕，运行脚本 windows,  <code>publish</code> 其他 <code>./publish</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在操作之前，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装好了相关的软件如： &lt;code&gt;node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;拥有自己的github账号正确设置好&lt;code&gt;SSH KEY&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建一个 &lt;code&gt;username.github.io&lt;</summary>
      
    
    
    
    <category term="other" scheme="https://winjeg.github.io/categories/other/"/>
    
    
    <category term="blog" scheme="https://winjeg.github.io/tags/blog/"/>
    
    <category term="tutorial" scheme="https://winjeg.github.io/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 简易笔记</title>
    <link href="https://winjeg.github.io/2019/05/18/langs/fe/typescript/"/>
    <id>https://winjeg.github.io/2019/05/18/langs/fe/typescript/</id>
    <published>2019-05-18T07:14:11.000Z</published>
    <updated>2022-12-09T11:34:13.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="typescript-介绍"><a href="#typescript-介绍" class="headerlink" title="typescript 介绍"></a>typescript 介绍</h2><p>type script 是Javascript 的一种超集， 引入了JavaScript所欠缺的继承抽象与封装等</p><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">let</span> isDone<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">let</span> decLiteral<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">let</span> hexLiteral<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0xf00d</span><span class="token punctuation">;</span><span class="token keyword">let</span> binaryLiteral<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0b1010</span><span class="token punctuation">;</span><span class="token keyword">let</span> octalLiteral<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0o744</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>模版字符串，它可以定义多行文本和内嵌表达式。 这种字符串是被反引号包围（ &#96;），并且以${ expr }这种形式嵌入表达式</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Gene`</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span><span class="token keyword">let</span> sentence<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Hello, my name is $&amp;#123; name &amp;#125;.I'll be $&amp;#123; age + 1 &amp;#125; years old next month.`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="array"><a href="#array" class="headerlink" title="array  []"></a>array  []</h3><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Tuple-number-string"><a href="#Tuple-number-string" class="headerlink" title="Tuple [number, string]"></a>Tuple [number, string]</h3><pre class="line-numbers language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// Declare a tuple type</span><span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Initialize it</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span><span class="token comment" spellcheck="true">// Initialize it incorrectly</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">enum</span> Color <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> colorName<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> Color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 显示'Green'因为上面代码里它的值是2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><p>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 any类型来标记这些变量</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">let</span> notSure<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>notSure<span class="token punctuation">.</span><span class="token function">ifItExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay, ifItExists might exist at runtime</span>notSure<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay, toFixed exists (but the compiler doesn't check)</span><span class="token keyword">let</span> prettySure<span class="token punctuation">:</span> Object <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>prettySure<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error: Property 'toFixed' doesn't exist on type 'Object'.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><p>某种程度上来说，void类型像是与any类型相反，它表示没有任何类型。声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined和null：</p><pre><code>function warnUser(): void &#123;    console.log(&quot;This is my warning message&quot;);&#125;let unusable: void = undefined;</code></pre><h3 id="null-x2F-undefined"><a href="#null-x2F-undefined" class="headerlink" title="null &#x2F; undefined"></a>null &#x2F; undefined</h3><p>默认情况下null和undefined是所有类型的子类型。 就是说你可以把 null和undefined赋值给number类型的变量。当你指定了–strictNullChecks标记，null和undefined只能赋值给void和它们各自</p><pre><code>// Not much else we can assign to these variables!let u: undefined = undefined;let n: null = null;</code></pre><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><p>never 表示永远不存在的类型</p><pre><code>// 返回never的函数必须存在无法达到的终点function error(message: string): never &#123;    throw new Error(message);&#125;// 推断的返回值类型为neverfunction fail() &#123;    return error(&quot;Something failed&quot;);&#125;// 返回never的函数必须存在无法达到的终点function infiniteLoop(): never &#123;    while (true) &#123;    &#125;&#125;</code></pre><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p>object 表示非原始类型，即除number, boolean, string, symbol, null, undefined之外的类型</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span>o<span class="token punctuation">:</span> object <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> prop<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">let</span> someValue<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token string">"this is a string"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 以下两种方法等价</span><span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>someValue<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>someValue as <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><ol><li>let  比较正常的作用域与范围</li><li>var  奇怪的作用域与范围</li><li>const 不可修改</li></ol><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>接口是TS 的一个重要的概念，可以用于结构类型检查.</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">printLabel</span><span class="token punctuation">(</span>labelledObj<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> label<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>labelledObj<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> myObj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> size<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token string">"Size 10 Object"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token function">printLabel</span><span class="token punctuation">(</span>myObj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口与go的差不多， 只要包含即可</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">LabelledValue</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  label<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><p>带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个?符号。</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">SquareConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  color<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  width<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误。 比如，我们故意将 createSquare里的color属性名拼错，就会得到一个错误提示：</p><pre><code>interface SquareConfig &#123;  color?: string;  width?: number;&#125;function createSquare(config: SquareConfig): &#123; color: string; area: number &#125; &#123;  let newSquare = &#123;color: &quot;white&quot;, area: 100&#125;;  if (config.clor) &#123;    // Error: Property &#39;clor&#39; does not exist on type &#39;SquareConfig&#39;    newSquare.color = config.clor;  &#125;  return newSquare;&#125;let mySquare = createSquare(&#123;color: &quot;black&quot;&#125;);</code></pre><h3 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h3><pre><code>interface Point &#123;    readonly x: number;    readonly y: number;&#125;let p1: Point = &#123; x: 10, y: 20 &#125;;p1.x = 5; // error!let a: number[] = [1, 2, 3, 4];let ro: ReadonlyArray&lt;number&gt; = a;ro[0] = 12; // error!ro.push(5); // error!ro.length = 100; // error!a = ro; // error!a = ro as number[];interface SquareConfig &#123;    color?: string;    width?: number;    [propName: string]: any;&#125;</code></pre><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token punctuation">(</span>source<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> subString<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> mySearch<span class="token punctuation">:</span> SearchFunc<span class="token punctuation">;</span>mySearch <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>src<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> sub<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h3><p>TypeScript支持两种索引签名：字符串和数字。 可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型。 这是因为当使用 number来索引时，JavaScript会将它转换成string然后再去索引对象。 也就是说用 100（一个number）去索引等同于使用”100”（一个string）去索引，因此两者需要保持一致。</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">StringArray</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span>index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> myArray<span class="token punctuation">:</span> StringArray<span class="token punctuation">;</span>myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"Fred"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> myStr<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> myArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">StringArray</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span>index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> myArray<span class="token punctuation">:</span> StringArray<span class="token punctuation">;</span>myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"Fred"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> myStr<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> myArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，你可以将索引签名设置为只读，这样就防止了给索引赋值</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">ReadonlyStringArray</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    readonly <span class="token punctuation">[</span>index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> myArray<span class="token punctuation">:</span> ReadonlyStringArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>myArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Mallory"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h3><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">ClockInterface</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    currentTime<span class="token punctuation">:</span> Date<span class="token punctuation">;</span>    <span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> Date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">implements</span> <span class="token class-name">ClockInterface</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    currentTime<span class="token punctuation">:</span> Date<span class="token punctuation">;</span>    <span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> Date<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentTime <span class="token operator">=</span> d<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>h<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> constructor存在于类的静态部分，所以不在检查的范围内</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">ClockConstructor</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token punctuation">(</span>hour<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> minute<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ClockInterface<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">ClockInterface</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">createClock</span><span class="token punctuation">(</span>ctor<span class="token punctuation">:</span> ClockConstructor<span class="token punctuation">,</span> hour<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> minute<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ClockInterface <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ctor</span><span class="token punctuation">(</span>hour<span class="token punctuation">,</span> minute<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">DigitalClock</span> <span class="token keyword">implements</span> <span class="token class-name">ClockInterface</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>h<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"beep beep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AnalogClock</span> <span class="token keyword">implements</span> <span class="token class-name">ClockInterface</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>h<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"tick tock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> digital <span class="token operator">=</span> <span class="token function">createClock</span><span class="token punctuation">(</span>DigitalClock<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> analog <span class="token operator">=</span> <span class="token function">createClock</span><span class="token punctuation">(</span>AnalogClock<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h3><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    color<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    sideLength<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> square <span class="token operator">=</span> <span class="token operator">&lt;</span>Square<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>square<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">;</span>square<span class="token punctuation">.</span>sideLength <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h3><p>当接口继承了一个类类型时，它会继承类的成员但不包括其实现。 就好像接口声明了所有类中存在的成员，但并没有提供具体实现一样。 接口同样会继承到类的private和protected成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现 </p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Control</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> state<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">SelectableControl</span> <span class="token keyword">extends</span> <span class="token class-name">Control</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">Control</span> <span class="token keyword">implements</span> <span class="token class-name">SelectableControl</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TextBox</span> <span class="token keyword">extends</span> <span class="token class-name">Control</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 错误：“Image”类型缺少“state”属性。</span><span class="token keyword">class</span> <span class="token class-name">Image</span> <span class="token keyword">implements</span> <span class="token class-name">SelectableControl</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Location</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TypeScript-的类"><a href="#TypeScript-的类" class="headerlink" title="TypeScript 的类"></a>TypeScript 的类</h2><p>typescrpit 的类与java差不多，默认为Public， 有Protcected与private 成员， 也有抽象类，多态与继承<br>readonly关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。<br>我们也可以创建类的静态成员，这些属性存在于类本身上面而不是类的实例上。</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Point3d</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    z<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> point3d<span class="token punctuation">:</span> Point3d <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类定义会创建两个东西：类的实例类型和一个构造函数。 因为类可以创建出类型，所以你能够在允许使用接口的地方使用类。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数类型-1"><a href="#函数类型-1" class="headerlink" title="函数类型"></a>函数类型</h3><pre class="line-numbers language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// myAdd has the full function type</span><span class="token keyword">let</span> myAdd <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// The parameters `x` and `y` have the type number</span><span class="token keyword">let</span> myAdd<span class="token punctuation">:</span> <span class="token punctuation">(</span>baseValue<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> increment<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">number</span> <span class="token operator">=</span>   <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p> 可选参数必须跟在必须参数后面。 如果上例我们想让first name是可选的，那么就必须调整它们的位置，把first name放在后面。</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> lastName<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>lastName<span class="token punctuation">)</span>       <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>   <span class="token keyword">else</span>       <span class="token keyword">return</span> firstName<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// works correctly now</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"Adams"</span><span class="token punctuation">,</span> <span class="token string">"Sr."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// error, too many parameters</span><span class="token keyword">let</span> result3 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"Adams"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ah, just right</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p> 与普通可选参数不同的是，带默认值的参数不需要放在必须参数的后面。 如果带默认值的参数出现在必须参数前面，用户必须明确的传入 undefined值来获得默认值。</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName <span class="token operator">=</span> <span class="token string">"Will"</span><span class="token punctuation">,</span> lastName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// error, too few parameters</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"Adams"</span><span class="token punctuation">,</span> <span class="token string">"Sr."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// error, too many parameters</span><span class="token keyword">let</span> result3 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"Adams"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// okay and returns "Bob Adams"</span><span class="token keyword">let</span> result4 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span>undefined<span class="token punctuation">,</span> <span class="token string">"Adams"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// okay and returns "Will Adams"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可变数量参数（剩余参数）"><a href="#可变数量参数（剩余参数）" class="headerlink" title="可变数量参数（剩余参数）"></a>可变数量参数（剩余参数）</h3><p> 剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个。 编译器创建参数数组，名字是你在省略号（ …）后面给定的名字，你可以在函数体内使用这个数组</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>restOfName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> restOfName<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> buildNameFun<span class="token punctuation">:</span> <span class="token punctuation">(</span>fname<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span> <span class="token operator">=</span> buildName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="this"><a href="#this" class="headerlink" title="this"></a><code>this</code></h3><p> <em>this和箭头函数</em></p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">let</span> deck <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   suits<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"hearts"</span><span class="token punctuation">,</span> <span class="token string">"spades"</span><span class="token punctuation">,</span> <span class="token string">"clubs"</span><span class="token punctuation">,</span> <span class="token string">"diamonds"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   cards<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   createCardPicker<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token keyword">let</span> pickedCard <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">let</span> pickedSuit <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>pickedCard <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>suit<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>suits<span class="token punctuation">[</span>pickedSuit<span class="token punctuation">]</span><span class="token punctuation">,</span> card<span class="token punctuation">:</span> pickedCard <span class="token operator">%</span> <span class="token number">13</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> cardPicker <span class="token operator">=</span> deck<span class="token punctuation">.</span><span class="token function">createCardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickedCard <span class="token operator">=</span> <span class="token function">cardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"card: "</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>card <span class="token operator">+</span> <span class="token string">" of "</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 可以看到createCardPicker是个函数，并且它又返回了一个函数。 如果我们尝试运行这个程序，会发现它并没有弹出对话框而是报错了。 因为 createCardPicker返回的函数里的this被设置成了window而不是deck对象。 因为我们只是独立的调用了 cardPicker()。 顶级的非方法式调用会将 this视为window。 （注意：在严格模式下， this为undefined而不是window）。</p><p> 为了解决这个问题，我们可以在函数被返回时就绑好正确的this。 这样的话，无论之后怎么使用它，都会引用绑定的‘deck’对象。 我们需要改变函数表达式来使用ECMAScript 6箭头语法。 箭头函数能保存函数创建时的 this值，而不是调用时的值：</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">let</span> deck <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   suits<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"hearts"</span><span class="token punctuation">,</span> <span class="token string">"spades"</span><span class="token punctuation">,</span> <span class="token string">"clubs"</span><span class="token punctuation">,</span> <span class="token string">"diamonds"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   cards<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   createCardPicker<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// NOTE: the line below is now an arrow function, allowing us to capture 'this' right here</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token keyword">let</span> pickedCard <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">let</span> pickedSuit <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>pickedCard <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>suit<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>suits<span class="token punctuation">[</span>pickedSuit<span class="token punctuation">]</span><span class="token punctuation">,</span> card<span class="token punctuation">:</span> pickedCard <span class="token operator">%</span> <span class="token number">13</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> cardPicker <span class="token operator">=</span> deck<span class="token punctuation">.</span><span class="token function">createCardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickedCard <span class="token operator">=</span> <span class="token function">cardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"card: "</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>card <span class="token operator">+</span> <span class="token string">" of "</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 你可以也看到过在回调函数里的this报错，当你将一个函数传递到某个库函数里稍后会被调用时。 因为当回调被调用的时候，它们会被当成一个普通函数调用， this将为undefined。 稍做改动，你就可以通过 this参数来避免错误。首先，库函数的作者要指定 this的类型：</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">UIElement</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token function">addClickListener</span><span class="token punctuation">(</span>onclick<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">,</span> e<span class="token punctuation">:</span> Event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   info<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>   <span class="token function">onClickGood</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">,</span> e<span class="token punctuation">:</span> Event<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// can't use this here because it's of type void!</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'clicked!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uiElement<span class="token punctuation">.</span><span class="token function">addClickListener</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>onClickGood<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 因为onClickGood指定了this类型为void，因此传递addClickListener是合法的。 当然了，这也意味着不能使用 this.info. 如果你两者都想要，你不得不使用箭头函数了：</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   info<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>   onClickGood <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">:</span> Event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> e<span class="token punctuation">.</span>message <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 这是可行的因为箭头函数不会捕获this，所以你总是可以把它们传给期望this: void的函数。 缺点是每个 Handler对象都会创建一个箭头函数。 另一方面，方法只会被创建一次，添加到 Handler的原型链上。 它们在不同 Handler对象间是共享的。</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">function</span> identity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> output <span class="token operator">=</span> identity<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"myString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 显式声明</span><span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token string">"myString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 自动推断</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用泛型变量"><a href="#使用泛型变量" class="headerlink" title="使用泛型变量"></a>使用泛型变量</h3><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Error: T doesn't have .length</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Array has a .length, so no more error</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Array has a .length, so no more error</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h3><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">GenericIdentityFn</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> identity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> myIdentity<span class="token punctuation">:</span> GenericIdentityFn <span class="token operator">=</span> identity<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">GenericNumber</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    zeroValue<span class="token punctuation">:</span> T<span class="token punctuation">;</span>    add<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> T<span class="token punctuation">,</span> y<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> T<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> myGenericNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericNumber</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myGenericNumber<span class="token punctuation">.</span>zeroValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>myGenericNumber<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">BeeKeeper</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    hasMask<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ZooKeeper</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    nametag<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    numLegs<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Bee</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    keeper<span class="token punctuation">:</span> BeeKeeper<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Lion</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    keeper<span class="token punctuation">:</span> ZooKeeper<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> createInstance<span class="token operator">&lt;</span>A <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token operator">></span><span class="token punctuation">(</span>c<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> A<span class="token punctuation">)</span><span class="token punctuation">:</span> A <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">createInstance</span><span class="token punctuation">(</span>Lion<span class="token punctuation">)</span><span class="token punctuation">.</span>keeper<span class="token punctuation">.</span>nametag<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// typechecks!</span><span class="token function">createInstance</span><span class="token punctuation">(</span>Bee<span class="token punctuation">)</span><span class="token punctuation">.</span>keeper<span class="token punctuation">.</span>hasMask<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// typechecks!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="交叉类型（Intersection-Types）"><a href="#交叉类型（Intersection-Types）" class="headerlink" title="交叉类型（Intersection Types）"></a>交叉类型（Intersection Types）</h3><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">function</span> extend<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span><span class="token punctuation">(</span>first<span class="token punctuation">:</span> T<span class="token punctuation">,</span> second<span class="token punctuation">:</span> U<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token operator">&amp;</span> U <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token operator">&lt;</span>T <span class="token operator">&amp;</span> U<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> id <span class="token keyword">in</span> first<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span>result<span class="token punctuation">)</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span>first<span class="token punctuation">)</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> id <span class="token keyword">in</span> second<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 两个类型如果这个没有就去另外一个</span>            <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span>result<span class="token punctuation">)</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span>second<span class="token punctuation">)</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Loggable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ConsoleLogger</span> <span class="token keyword">implements</span> <span class="token class-name">Loggable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> jim <span class="token operator">=</span> <span class="token function">extend</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jim"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConsoleLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> n <span class="token operator">=</span> jim<span class="token punctuation">.</span>name<span class="token punctuation">;</span>jim<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="联合类型（Union-Types）"><a href="#联合类型（Union-Types）" class="headerlink" title="联合类型（Union Types）"></a>联合类型（Union Types）</h3><p>联合类型与交叉类型很有关联，但是使用上却完全不同。 偶尔你会遇到这种情况，一个代码库希望传入 number或 string类型的参数。 例如下面的函数：</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">/** * Takes a string and adds "padding" to the left. * If 'padding' is a string, then 'padding' is appended to the left side. * If 'padding' is a number, then that number of spaces is added to the left side. */</span><span class="token keyword">function</span> <span class="token function">padLeft</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> padding<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> padding <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">Array</span><span class="token punctuation">(</span>padding <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> padding <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> padding <span class="token operator">+</span> value<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Expected string or number, got '$&amp;#123;padding&amp;#125;'.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">padLeft</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// returns "    Hello world"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h3><p>export default<br>import xxx from </p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">ZipCodeValidator</span> <span class="token keyword">implements</span> <span class="token class-name">StringValidator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">isAcceptable</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> numberRegexp<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> ZipCodeValidator <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> ZipCodeValidator as mainValidator <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><h2 id="三斜线"><a href="#三斜线" class="headerlink" title="三斜线"></a>三斜线</h2><p>三斜线指令是包含单个XML标签的单行注释。 注释的内容会做为编译器指令使用。</p><p>三斜线指令仅可放在包含它的文件的最顶端。 一个三斜线指令的前面只能出现单行或多行注释，这包括其它的三斜线指令。 如果它们出现在一个语句或声明之后，那么它们会被当做普通的单行注释，并且不具有特殊的涵义。</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">/// &lt;reference no-default-lib="true"/></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个指令把一个文件标记成默认库。 你会在 lib.d.ts文件和它不同的变体的顶端看到这个注释。</p><h2 id="模块导入"><a href="#模块导入" class="headerlink" title="模块导入"></a>模块导入</h2><p>相对 vs. 非相对模块导入</p><p>相对导入是以&#x2F;，.&#x2F;或..&#x2F;开头的。 下面是一些例子：</p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">import</span> Entry <span class="token keyword">from</span> <span class="token string">"./components/Entry"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> DefaultHeaders <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">"../constants/http"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"/mod"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>相对导入的模块是相对于导入它的文件进行解析的。 因此 &#x2F;root&#x2F;src&#x2F;folder&#x2F;A.ts文件里的import { b } from “.&#x2F;moduleB”会使用下面的查找流程：</p><ol><li>&#x2F;root&#x2F;src&#x2F;folder&#x2F;moduleB.ts</li><li>&#x2F;root&#x2F;src&#x2F;folder&#x2F;moduleB.d.ts<br>所有其它形式的导入被当作非相对的。 下面是一些例子：</li></ol><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token operator">*</span> as $ <span class="token keyword">from</span> <span class="token string">"jQuery"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Component <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">"@angular/core"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有一个对moduleB的非相对导入import { b } from “moduleB”，它是在&#x2F;root&#x2F;src&#x2F;folder&#x2F;A.ts文件里，会以如下的方式来定位”moduleB”：</p><pre><code>/root/src/folder/moduleB.ts/root/src/folder/moduleB.d.ts/root/src/moduleB.ts/root/src/moduleB.d.ts/root/moduleB.ts/root/moduleB.d.ts/moduleB.ts/moduleB.d.ts</code></pre><h3 id="TypeScript如何解析模块"><a href="#TypeScript如何解析模块" class="headerlink" title="TypeScript如何解析模块"></a>TypeScript如何解析模块</h3><p>TypeScript是模仿Node.js运行时的解析策略来在编译阶段定位模块定义文件。 因此，TypeScript在Node解析逻辑基础上增加了TypeScript源文件的扩展名（ .ts，.tsx和.d.ts）。 同时，TypeScript在 package.json里使用字段”types”来表示类似”main”的意义 - 编译器会使用它来找到要使用的”main”定义文件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;typescript-介绍&quot;&gt;&lt;a href=&quot;#typescript-介绍&quot; class=&quot;headerlink&quot; title=&quot;typescript 介绍&quot;&gt;&lt;/a&gt;typescript 介绍&lt;/h2&gt;&lt;p&gt;type script 是Javascript 的一</summary>
      
    
    
    
    <category term="lang" scheme="https://winjeg.github.io/categories/lang/"/>
    
    
    <category term="npm" scheme="https://winjeg.github.io/tags/npm/"/>
    
    <category term="lang" scheme="https://winjeg.github.io/tags/lang/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 其他杂记</title>
    <link href="https://winjeg.github.io/2019/05/13/storage/mysql/mysql_other/"/>
    <id>https://winjeg.github.io/2019/05/13/storage/mysql/mysql_other/</id>
    <published>2019-05-13T07:14:11.000Z</published>
    <updated>2022-12-09T11:34:13.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事务查询"><a href="#事务查询" class="headerlink" title="事务查询"></a>事务查询</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> @<span class="token variable">@tx_isolation</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>   r<span class="token punctuation">.</span><span class="token punctuation">`</span>trx_id<span class="token punctuation">`</span> waiting_trx_id<span class="token punctuation">,</span>  r<span class="token punctuation">.</span><span class="token punctuation">`</span>trx_mysql_thread_id<span class="token punctuation">`</span> waiting_thread<span class="token punctuation">,</span>  r<span class="token punctuation">.</span><span class="token punctuation">`</span>trx_query<span class="token punctuation">`</span> waiting_query<span class="token punctuation">,</span>  <span class="token number">b</span><span class="token punctuation">.</span><span class="token punctuation">`</span>trx_id<span class="token punctuation">`</span> bolcking_trx_id<span class="token punctuation">,</span>  <span class="token number">b</span><span class="token punctuation">.</span><span class="token punctuation">`</span>trx_mysql_thread_id<span class="token punctuation">`</span> blocking_thread<span class="token punctuation">,</span>  <span class="token number">b</span><span class="token punctuation">.</span><span class="token punctuation">`</span>trx_query<span class="token punctuation">`</span> block_query <span class="token keyword">FROM</span>  information_schema<span class="token punctuation">.</span><span class="token punctuation">`</span>INNODB_LOCK_WAITS<span class="token punctuation">`</span> w   <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> information_schema<span class="token punctuation">.</span><span class="token punctuation">`</span>INNODB_TRX<span class="token punctuation">`</span> <span class="token number">b</span>     <span class="token keyword">ON</span> <span class="token number">b</span><span class="token punctuation">.</span><span class="token punctuation">`</span>trx_id<span class="token punctuation">`</span> <span class="token operator">=</span> w<span class="token punctuation">.</span><span class="token punctuation">`</span>blocking_trx_id<span class="token punctuation">`</span>   <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> information_schema<span class="token punctuation">.</span><span class="token punctuation">`</span>INNODB_TRX<span class="token punctuation">`</span> r     <span class="token keyword">ON</span> r<span class="token punctuation">.</span><span class="token punctuation">`</span>trx_id<span class="token punctuation">`</span> <span class="token operator">=</span> w<span class="token punctuation">.</span><span class="token punctuation">`</span>requesting_trx_id<span class="token punctuation">`</span> <span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查询外键"><a href="#查询外键" class="headerlink" title="查询外键"></a>查询外键</h2><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'alter table '</span><span class="token punctuation">,</span>table_name<span class="token punctuation">,</span><span class="token string">' drop foreign key '</span><span class="token punctuation">,</span>constraint_name<span class="token punctuation">,</span><span class="token string">';'</span><span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>key_column_usage<span class="token keyword">where</span> constraint_schema <span class="token operator">=</span> <span class="token string">'dbname'</span> <span class="token operator">and</span> referenced_table_name <span class="token operator">=</span> <span class="token string">'tbName'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> concat<span class="token punctuation">(</span><span class="token string">'alter table '</span><span class="token punctuation">,</span>table_schema<span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">,</span>table_name<span class="token punctuation">,</span><span class="token string">' DROP FOREIGN KEY '</span><span class="token punctuation">,</span>constraint_name<span class="token punctuation">,</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>table_constraints<span class="token keyword">WHERE</span> constraint_type<span class="token operator">=</span><span class="token string">'FOREIGN KEY'</span><span class="token operator">AND</span> table_schema<span class="token operator">=</span><span class="token string">'dbname'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> TABLE_NAME <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token punctuation">`</span><span class="token keyword">TABLES</span><span class="token punctuation">`</span><span class="token keyword">WHERE</span> TABLE_TYPE<span class="token operator">=</span><span class="token string">"BASE TABLE"</span><span class="token operator">AND</span> TABLE_SCHEMA<span class="token operator">=</span><span class="token string">"dbname"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原因是由于RDS的备份文件中包含了RDS的主从复制关系，需要把这些主从复制关系清理掉，清理方法：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">truncate</span> <span class="token keyword">table</span>  slave_relay_log_info<span class="token punctuation">;</span><span class="token keyword">truncate</span> <span class="token keyword">table</span>  mysql<span class="token punctuation">.</span>slave_master_info<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Mysql-DUMP-表"><a href="#Mysql-DUMP-表" class="headerlink" title="Mysql DUMP 表"></a>Mysql DUMP 表</h3><pre><code>mysqldump -u root -h 127.0.0.1  dbName msgattach  &gt; msgattach.sql</code></pre><h3 id="MySQL-客户端"><a href="#MySQL-客户端" class="headerlink" title="MySQL 客户端"></a>MySQL 客户端</h3><p>从表现上来看分两种：</p><ol><li>客户端执行完query之后， 直接返回， 并开始用rows.next 去取数据， 其中很快</li><li>如果在客户端取数据的时候打上断点， 服务端发送完数据之后， 客户端只能取到部分数据， 不能取到全部数据， 怀疑客户端有一个缓冲区，不断接收服务端的数据并刷新</li><li>如果客户端收到数据后，不打断点， 则可以获取全部数据（前提是建立在客户端执行速度比较快的情况下）</li></ol><p>底层代码里面来看， mysql服务端发送数据给客户端的时候， 客户端会把数据存在一个 默认4096大小的buffer 里面， 从这个buffer里面再读到rows里面<br>如果buffer里的数据没有被及时消费掉， 那么连接上面传送过来的数据会丢失掉。</p><p>MySQL 本身的问题对于数据量传输不完的时候有个write_timeout,  出现错误之后， 会返回EOF 相关的Error</p><pre><code>[mysql] 2019/04/25 14:31:27 packets.go:72: unexpected EOF[mysql] 2019/04/25 14:31:27 packets.go:393: busy buffer</code></pre><h3 id="实用脚本"><a href="#实用脚本" class="headerlink" title="实用脚本"></a>实用脚本</h3><h4 id="Mysql-查看表的外键"><a href="#Mysql-查看表的外键" class="headerlink" title="Mysql 查看表的外键"></a>Mysql 查看表的外键</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> TABLE_NAME<span class="token punctuation">,</span>COLUMN_NAME<span class="token punctuation">,</span>CONSTRAINT_NAME<span class="token punctuation">,</span> REFERENCED_TABLE_NAME<span class="token punctuation">,</span>REFERENCED_COLUMN_NAME <span class="token keyword">from</span> INFORMATION_SCHEMA<span class="token punctuation">.</span>KEY_COLUMN_USAGE  <span class="token keyword">WHERE</span> CONSTRAINT_NAME <span class="token operator">!=</span> <span class="token string">'PRIMARY'</span> <span class="token operator">AND</span> REFERENCED_TABLE_NAME <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试稳定情况"><a href="#测试稳定情况" class="headerlink" title="测试稳定情况"></a>测试稳定情况</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> 1 100<span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>     mysql -u username -h host -P 3306 -ppassword -e <span class="token string">"use dbName; select askid from ask limit 1"</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">"==============<span class="token variable">$i</span>"</span><span class="token punctuation">;</span> <span class="token function">sleep</span> 1<span class="token punctuation">;</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;事务查询&quot;&gt;&lt;a href=&quot;#事务查询&quot; class=&quot;headerlink&quot; title=&quot;事务查询&quot;&gt;&lt;/a&gt;事务查询&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;</summary>
      
    
    
    
    <category term="storage" scheme="https://winjeg.github.io/categories/storage/"/>
    
    <category term="database" scheme="https://winjeg.github.io/categories/storage/database/"/>
    
    
    <category term="database" scheme="https://winjeg.github.io/tags/database/"/>
    
    <category term="MySQL" scheme="https://winjeg.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 如何找回Root密码</title>
    <link href="https://winjeg.github.io/2019/05/13/storage/mysql/passwd/"/>
    <id>https://winjeg.github.io/2019/05/13/storage/mysql/passwd/</id>
    <published>2019-05-13T07:14:11.000Z</published>
    <updated>2022-12-09T11:34:13.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-修改-x2F-etc-x2F-my-cnf"><a href="#1-修改-x2F-etc-x2F-my-cnf" class="headerlink" title="1  修改 &#x2F;etc&#x2F;my.cnf"></a>1  修改 &#x2F;etc&#x2F;my.cnf</h2><p>加上</p><pre><code>[mysqld]skip-grant-tables</code></pre><h2 id="2-重启mysql"><a href="#2-重启mysql" class="headerlink" title="2. 重启mysql"></a>2. 重启mysql</h2><pre><code>service mysql restart</code></pre><h2 id="3-更改root密码"><a href="#3-更改root密码" class="headerlink" title="3. 更改root密码"></a>3. 更改root密码</h2><pre class="line-numbers language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">USE</span> mysql <span class="token punctuation">;</span> mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> <span class="token keyword">user</span> <span class="token keyword">SET</span> Password <span class="token operator">=</span> password <span class="token punctuation">(</span> <span class="token string">'new-password'</span> <span class="token punctuation">)</span> <span class="token keyword">WHERE</span> <span class="token keyword">User</span> <span class="token operator">=</span> <span class="token string">'root'</span> <span class="token punctuation">;</span> mysql<span class="token operator">></span> flush <span class="token keyword">privileges</span> <span class="token punctuation">;</span> mysql<span class="token operator">></span> quit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果版本高于5.6 则是如下字段存着密码</p><pre><code>authentication_string</code></pre><h2 id="4-将MySQL的登录设置修改回来"><a href="#4-将MySQL的登录设置修改回来" class="headerlink" title="4.将MySQL的登录设置修改回来"></a>4.将MySQL的登录设置修改回来</h2><h2 id="5-重启mysql"><a href="#5-重启mysql" class="headerlink" title="5. 重启mysql"></a>5. 重启mysql</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-修改-x2F-etc-x2F-my-cnf&quot;&gt;&lt;a href=&quot;#1-修改-x2F-etc-x2F-my-cnf&quot; class=&quot;headerlink&quot; title=&quot;1  修改 &amp;#x2F;etc&amp;#x2F;my.cnf&quot;&gt;&lt;/a&gt;1  修改 &amp;#x2F;e</summary>
      
    
    
    
    <category term="storage" scheme="https://winjeg.github.io/categories/storage/"/>
    
    <category term="database" scheme="https://winjeg.github.io/categories/storage/database/"/>
    
    
    <category term="database" scheme="https://winjeg.github.io/tags/database/"/>
    
    <category term="MySQL" scheme="https://winjeg.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Golang的工程配置</title>
    <link href="https://winjeg.github.io/2018/12/13/langs/golang/go_project/"/>
    <id>https://winjeg.github.io/2018/12/13/langs/golang/go_project/</id>
    <published>2018-12-13T07:14:11.000Z</published>
    <updated>2022-12-09T11:34:13.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go-module简介"><a href="#go-module简介" class="headerlink" title="go module简介"></a>go module简介</h1><p>Go 1.11 中引入了module 管理的概念，这使得我们终于有一个官方正式支持的模块管理工具了， 但由于官方工具刚出功能还不是十分完善，易用， 很多人还摸索不出来如何使用是最科学的。</p><h2 id="为什么要使用-go-module"><a href="#为什么要使用-go-module" class="headerlink" title="为什么要使用 go module?"></a>为什么要使用 go module?</h2><p> 更好的版本管理， 使得项目依赖的module版本都是确定以及稳定的（这是依赖管理的最核心的要求）<br>依赖管理更简单方便<br>dep本身不利于项目中私有仓库的包共享， dep 在拉取依赖的时候， 会把依赖放到 项目目录的vendor下面， 这样也能达到上面说的这个效果，<br>但是dep本身对私有仓库的支持不好，不能很好的配置ssh key拉取私有仓库代码（无论如何配置它就是不用，不是不能用就是不好用）<br>另外，dep对依赖的拉取是相对比较慢， 处理比较复杂的。<br>dep已经进入不维护状态， 而且go module 得到了官方的支持与更新的确认</p><h2 id="私有仓库"><a href="#私有仓库" class="headerlink" title="私有仓库"></a>私有仓库</h2><h3 id="通过git命令"><a href="#通过git命令" class="headerlink" title="通过git命令"></a>通过git命令</h3><pre><code>git config --global url.git@github.com:.insteadof=https://github.com</code></pre><h3 id="修改git配置文件"><a href="#修改git配置文件" class="headerlink" title="修改git配置文件"></a>修改git配置文件</h3><p>看下 vim ~&#x2F;.gitconfig 是否有生效，否则，就手动改一下</p><pre><code>[url &quot;git@github.com:&quot;]        insteadOf = https://github.com/</code></pre><p>重启terminal生效</p><h2 id="go-module的要求"><a href="#go-module的要求" class="headerlink" title="go module的要求"></a>go module的要求</h2><p><code>golang version &lt; 1.12</code></p><pre><code>GO111MODULE=on</code></pre><p>由于官方没有默认打开 go module 的feature 因此在设置ci的时候需要手动设置一下两个环境变量, 这是唯一的代价</p><p><code>golang version &gt;=1.12</code>则不需要进行任何设置</p><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><pre><code>go mod init mod_name</code></pre><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><pre><code>go get github.com/demo/xxx</code></pre><h2 id="删除依赖"><a href="#删除依赖" class="headerlink" title="删除依赖"></a>删除依赖</h2><pre><code>go mod edit -droprequire github.com/demo/test</code></pre><h2 id="更新依赖版本"><a href="#更新依赖版本" class="headerlink" title="更新依赖版本"></a>更新依赖版本</h2><pre><code>go mod edit xxx</code></pre><p>更新与删除依赖比较难用， 建议直接修改go.mod 文件与go.sum 文件， 更简单直接</p><h2 id="整理依赖"><a href="#整理依赖" class="headerlink" title="整理依赖"></a>整理依赖</h2><pre><code>go mod tidy</code></pre><p>这句命令会自动去除没用的依赖， 添加需要增加的依赖</p><h2 id="依赖查询"><a href="#依赖查询" class="headerlink" title="依赖查询"></a>依赖查询</h2><pre><code>go mod graph</code></pre><h2 id="依赖设置代理"><a href="#依赖设置代理" class="headerlink" title="依赖设置代理"></a>依赖设置代理</h2><p>由于墙的原因， 想要去使用Go， 没有代理还是不行的</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">set</span> GOPROXY<span class="token operator">=</span>https://goproxy.io <span class="token comment" spellcheck="true"># windows, 也可以设置环境变量</span><span class="token function">export</span> GOPROXY<span class="token operator">=</span>https://goproxy.io <span class="token comment" spellcheck="true"># windows</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;go-module简介&quot;&gt;&lt;a href=&quot;#go-module简介&quot; class=&quot;headerlink&quot; title=&quot;go module简介&quot;&gt;&lt;/a&gt;go module简介&lt;/h1&gt;&lt;p&gt;Go 1.11 中引入了module 管理的概念，这使得我们终于有一</summary>
      
    
    
    
    <category term="lang" scheme="https://winjeg.github.io/categories/lang/"/>
    
    
    <category term="golang" scheme="https://winjeg.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang 下的数据库使用</title>
    <link href="https://winjeg.github.io/2018/12/13/langs/golang/golang_db/"/>
    <id>https://winjeg.github.io/2018/12/13/langs/golang/golang_db/</id>
    <published>2018-12-13T07:14:11.000Z</published>
    <updated>2022-12-09T11:34:13.598Z</updated>
    
    <content type="html"><![CDATA[<p>golang 下使用数据库是几乎每个golang程序员必须经历过的一个环节， 我们在这里专门挑了两个常见的数据库的使用方式来进行简单的科普一下。<br>此文可以用作使用MySQL和Postgres的笔记性的文档， 不做深入分析， 全当给大家记备。</p><h2 id="Golang下使用-MySQL"><a href="#Golang下使用-MySQL" class="headerlink" title="Golang下使用 MySQL"></a>Golang下使用 <code>MySQL</code></h2><p>由于golang 官方的SDK中已经定义好了数据库的访问接口， 还内定了连接池连接方式等基本的数据库操作元素， 但Golang并没有实现每种数据库的访问方式。<br>因此如果要正常使用数据库，数据库相关的开发者需要找到定义了数据库具体访问方式与协议的数据库的驱动， 以访问数据库。 下面我们就从驱动讲起。  </p><h3 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h3><pre><code>go get github.com/go-sql-driver/mysql</code></pre><h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><h4 id="创建数据库访问对象-sql-DB"><a href="#创建数据库访问对象-sql-DB" class="headerlink" title="创建数据库访问对象 *sql.DB"></a>创建数据库访问对象 <code>*sql.DB</code></h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"database/sql"</span>    <span class="token string">"fmt"</span>    <span class="token string">"time"</span>    <span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    USERNAME <span class="token operator">=</span> <span class="token string">"root"</span>    PASSWORD <span class="token operator">=</span> <span class="token string">"*******"</span>    NETWORK  <span class="token operator">=</span> <span class="token string">"tcp"</span>    SERVER   <span class="token operator">=</span> <span class="token string">"localhost"</span>    PORT     <span class="token operator">=</span> <span class="token number">3306</span>    DATABASE <span class="token operator">=</span> <span class="token string">"blog"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">getDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    dsn <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s:%s@%s(%s:%d)/%s"</span><span class="token punctuation">,</span>USERNAME<span class="token punctuation">,</span>PASSWORD<span class="token punctuation">,</span>NETWORK<span class="token punctuation">,</span>SERVER<span class="token punctuation">,</span>PORT<span class="token punctuation">,</span>DATABASE<span class="token punctuation">)</span>    DB<span class="token punctuation">,</span>err <span class="token operator">:=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span>dsn<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Open mysql failed,err:%v\n"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    DB<span class="token punctuation">.</span><span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//最大连接周期，超过时间的连接就close</span>    DB<span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">100</span>）<span class="token comment" spellcheck="true">//设置最大连接数</span>    DB<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//设置闲置连接数</span>    <span class="token keyword">return</span> db<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> mysqlDb <span class="token operator">=</span> <span class="token function">getDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 用此函数，则为单例， 只在初始化的时候创建一次， 不会多创建无用的连接池</span><span class="token keyword">func</span> <span class="token function">GetDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mysqlDb<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查询数据库"><a href="#查询数据库" class="headerlink" title="查询数据库"></a>查询数据库</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">FetchData</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 查询多行</span>    rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user limit 3"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果err不等于nil, 一般row 为nil， 所以你直接close 会抛出空指针异常</span>        log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注意这个一定要close</span>    <span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 取数据</span>    <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> userId <span class="token builtin">int</span>        <span class="token keyword">var</span> username <span class="token builtin">string</span>        <span class="token comment" spellcheck="true">// 如果有多行， 可以把结果放到相应的数据结构中</span>        sErr <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>userId<span class="token punctuation">,</span> <span class="token operator">&amp;</span>username<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 查询单行</span>    row <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span><span class="token string">"SELECT username FROM user WHERE user_id = ?"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> username <span class="token builtin">string</span>    sErr <span class="token operator">:=</span> row<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>username<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// deal with error and username</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="执行DML"><a href="#执行DML" class="headerlink" title="执行DML"></a>执行DML</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">DML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// INSERT</span>    result<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO user(username, user_id) VALUES(?, ?)"</span><span class="token punctuation">,</span> username<span class="token punctuation">,</span> userId<span class="token punctuation">)</span>    stmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO user(username, user_id) VALUES(?, ?)"</span><span class="token punctuation">)</span>    sr<span class="token punctuation">,</span> err <span class="token operator">:=</span> stmt<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> userId<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// result 和 sr 中都可以拿到自动生成的ID，以及影响的行数    </span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Golang下使用-Postgres-SQL"><a href="#Golang下使用-Postgres-SQL" class="headerlink" title="Golang下使用 Postgres SQL"></a>Golang下使用 <code>Postgres SQL</code></h2><h3 id="驱动-1"><a href="#驱动-1" class="headerlink" title="驱动"></a>驱动</h3><pre><code>go get github.com/lib/pq</code></pre><h3 id="基础使用-1"><a href="#基础使用-1" class="headerlink" title="基础使用"></a>基础使用</h3><h4 id="创建数据库访问对象-sql-DB-1"><a href="#创建数据库访问对象-sql-DB-1" class="headerlink" title="创建数据库访问对象 *sql.DB"></a>创建数据库访问对象 <code>*sql.DB</code></h4><pre class="line-numbers language-golang"><code class="language-golang">package mainimport (    "database/sql"    "fmt"    _ "github.com/lib/pq")const (    host     = "localhost"    port     = 1234    user     = "testuser"    password = "testpass"    dbname   = "test_db")func getDb() *sql.DB &#123;    psqlInfo := fmt.Sprintf("host=%s port=%d user=%s "+        "password=%s dbname=%s sslmode=disable search_path=test_schema",        host, port, user, password, dbname)    db, err := sql.Open("postgres", psqlInfo)    if err != nil &#123;        panic(err)    &#125;    defer db.Close()    err = db.Ping()    if err != nil &#123;        panic(err)    &#125;    return db&#125;// 同样你可以再使用单例模式创建一个访问方式// 但推荐使用 sync.Once() 进行单例模式的设计<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Postgres-SQL中查询数据"><a href="#Postgres-SQL中查询数据" class="headerlink" title="Postgres SQL中查询数据"></a>Postgres SQL中查询数据</h4><p>由于其他的与MySQL一样， 因此此处实例就简单一点写明：</p><pre class="line-numbers language-golang"><code class="language-golang">func QueryPostgres(db *sql.DB) &#123;    // MySQL 使用 "?" Postgres 使用 $num,    // 使用 ？ postgres 会报错    db.Query("SELECT * FROM user WHERE user_id = $1", userId)    db.QueryRow("SELECT * FROM user WHERE user_id = $1", userId)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Postgres-SQL-中进行DML操作"><a href="#Postgres-SQL-中进行DML操作" class="headerlink" title="Postgres SQL 中进行DML操作"></a>Postgres SQL 中进行DML操作</h4><pre class="line-numbers language-golang"><code class="language-golang">func DML(db *sql.DB) &#123;    // 貌似必须得用stmt 直接使用Exec 会报错    stmt, err := db.Prepare("UPDATE user SET username= $1 WHERE user_id = $2")    stmt.exec("Lily", 123)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用数据库的注意点"><a href="#使用数据库的注意点" class="headerlink" title="使用数据库的注意点"></a>使用数据库的注意点</h2><p>golang 使用数据库的注意点都基本相同因此不再把postgres跟mysql分开讲述</p><h3 id="合理创建连接池"><a href="#合理创建连接池" class="headerlink" title="合理创建连接池"></a>合理创建连接池</h3><ol><li>合理设定连接池参数</li><li>对于一个数据库仅仅创建一个连接池</li></ol><h3 id="关闭该关闭的结果集"><a href="#关闭该关闭的结果集" class="headerlink" title="关闭该关闭的结果集"></a>关闭该关闭的结果集</h3><p>主要还是提到的</p><pre class="line-numbers language-golang"><code class="language-golang">// 如果不关闭， 它会慢慢的耗尽连接池的连接， 并且让你无连接可用rows.Close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;golang 下使用数据库是几乎每个golang程序员必须经历过的一个环节， 我们在这里专门挑了两个常见的数据库的使用方式来进行简单的科普一下。&lt;br&gt;此文可以用作使用MySQL和Postgres的笔记性的文档， 不做深入分析， 全当给大家记备。&lt;/p&gt;
&lt;h2 id=&quot;G</summary>
      
    
    
    
    <category term="lang" scheme="https://winjeg.github.io/categories/lang/"/>
    
    
    <category term="database" scheme="https://winjeg.github.io/tags/database/"/>
    
    <category term="golang" scheme="https://winjeg.github.io/tags/golang/"/>
    
  </entry>
  
</feed>
